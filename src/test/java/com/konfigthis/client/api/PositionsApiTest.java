/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Positions;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for PositionsApi
 */
@Disabled
public class PositionsApiTest {

    private static PositionsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new PositionsApi(apiClient);
    }

    /**
     * Returns list of employee position information filtered on various parameters
     *
     * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Company Configuration Integration\&quot; Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).&lt;/br&gt;&lt;/br&gt;           /configuration/v1/position endpoint can take following optional parameter:   &lt;ul&gt;     &lt;li&gt;     companyId :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     employeeType :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     payGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     statusCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     positionCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;      &lt;li&gt;     projectCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;       &lt;li&gt;     shiftGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     isProrated      &lt;/li&gt;     &lt;li&gt;     isApproved      &lt;/li&gt;      &lt;li&gt;     isEligibleForBenefits   &lt;/li&gt;  &lt;ul&gt;&lt;br/&gt;    Correct syntax when using parameters are as follows:    &lt;ul&gt;      &lt;li&gt;Get positions without parameter     &lt;ul&gt;      &lt;li&gt;Example: /configuration/v1/positions      &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by single companyid      &lt;ul&gt;      &lt;li&gt;Example: /configuration/v1/positions?companyid&#x3D;{companyid}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;   &lt;li&gt;Get positions by multiple companyid      &lt;ul&gt;      &lt;li&gt;Example: /configuration/v1/positions?companyid&#x3D;[companyid1,companyid2]&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by positionsCode     &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?positionCode&#x3D;{positionCode}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by isEligibleForBenefits      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?isEligibleForBenefits&#x3D;{isEligibleForBenefit}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by employeeType      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?employeeType&#x3D;{employeeType}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by statusCode      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?statusCode&#x3D;{statusCode}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by shiftGroupCode      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?shiftGrouptCode&#x3D;{shiftGrouptCode}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;Get positions by using all parameter      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?isApproved&#x3D;{isApproved}&amp;employeeType&#x3D;{employeeType}&amp;shiftGroupCode&#x3D;{shiftGroupCode}&amp;isEligibleForBenefits&#x3D;{isEligibleForBenefits}&amp;isProrated&#x3D;{isProrated}&amp;statusCode&#x3D;{statusCode}&amp;payGroupCode&#x3D;{payGroup}&amp;positionCode&#x3D;{positionCode}&amp;projectCode&#x3D;{projectCode}&amp;companyId&#x3D;{companyId}&amp;page&#x3D;{page}&amp;per_Page&#x3D;{per_Page}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;      &lt;/ul&gt;   
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listFilteredTest() throws ApiException {
        String companyId = null;
        String employeeType = null;
        String statusCode = null;
        String payGroupCode = null;
        String positionCode = null;
        String projectCode = null;
        String shiftGroupCode = null;
        Boolean isProrated = null;
        Boolean isApproved = null;
        Boolean isEligibleForBenefits = null;
        Integer page = null;
        Integer perPage = null;
        List<Positions> response = api.listFiltered()
                .companyId(companyId)
                .employeeType(employeeType)
                .statusCode(statusCode)
                .payGroupCode(payGroupCode)
                .positionCode(positionCode)
                .projectCode(projectCode)
                .shiftGroupCode(shiftGroupCode)
                .isProrated(isProrated)
                .isApproved(isApproved)
                .isEligibleForBenefits(isEligibleForBenefits)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

}
