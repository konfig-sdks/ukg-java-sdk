/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.EmployeeIdentifier;
import com.konfigthis.client.model.EmployeePayStatementModel;
import com.konfigthis.client.model.EmployeePayStatementRangeFilter;
import java.time.OffsetDateTime;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EmployeePayStatementApi
 */
@Disabled
public class EmployeePayStatementApiTest {

    private static EmployeePayStatementApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EmployeePayStatementApi(apiClient);
    }

    /**
     * Get employee pay statement(s) based on the passed employee identifier for a given date range.
     *
     * This method returns zero or more pay statements for a specific employee identified by the passed-in employee identifier. The pay statement returned is based on the start date and the end date passed in. &lt;br /&gt;If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Pay Statements\&quot; Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByDateRangeTest() throws ApiException {
        EmployeeIdentifier employeeIdentifier = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Integer page = null;
        Integer perPage = null;
        Integer pagesCount = null;
        List<EmployeePayStatementModel> response = api.getByDateRange()
                .employeeIdentifier(employeeIdentifier)
                .startDate(startDate)
                .endDate(endDate)
                .page(page)
                .perPage(perPage)
                .pagesCount(pagesCount)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employee pay statement based on the given pay identifier.
     *
     * This method returns zero or one pay statements based on the given pay identifier. The pay identifier is a string value that represents a unique pay statement.&lt;br /&gt; If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Pay Statements\&quot; Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getByPayIdentifierTest() throws ApiException {
        String payIdentifier = null;
        EmployeePayStatementModel response = api.getByPayIdentifier(payIdentifier)
                .execute();
        // TODO: test validations
    }

    /**
     * Get employee last pay statement based on the passed employee identifier.
     *
     * This method allows you to retrieve an individual pay statement by providing an employee identifier. This is helpful if you are designing an application that is aware of the employees to retrieve. &lt;br /&gt;If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Pay Statements\&quot; Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password})
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getLastPayStatementTest() throws ApiException {
        EmployeeIdentifier employeeIdentifier = null;
        OffsetDateTime startDate = null;
        OffsetDateTime endDate = null;
        Integer page = null;
        Integer perPage = null;
        Integer pagesCount = null;
        EmployeePayStatementModel response = api.getLastPayStatement()
                .employeeIdentifier(employeeIdentifier)
                .startDate(startDate)
                .endDate(endDate)
                .page(page)
                .perPage(perPage)
                .pagesCount(pagesCount)
                .execute();
        // TODO: test validations
    }

}
