/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import java.time.OffsetDateTime;
import com.konfigthis.client.model.ResultDtoClockTransactionDto;
import com.konfigthis.client.model.TimeItem;
import com.konfigthis.client.model.TimeItemList;
import com.konfigthis.client.model.TimesheetDtoWorkSummaryDto;
import java.util.UUID;
import com.konfigthis.client.model.WorkSummaryDto;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for TimeApi
 */
@Disabled
public class TimeApiTest {

    private static TimeApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new TimeApi(apiClient);
    }

    /**
     * Add hours worked entries
     *
     * Add multiple Time entries
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTimeEntriesTest() throws ApiException {
        List<TimeItem> timeData = null;
        UUID xCorrelationId = null;
        UUID usTenantId = null;
        TimeItemList response = api.addTimeEntries(timeData, xCorrelationId, usTenantId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get pending clock transactions.
     *
     * Obtain all pending clock transactions.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getPendingTransactionsTest() throws ApiException {
        String empName = null;
        Long empId = null;
        ResultDtoClockTransactionDto response = api.getPendingTransactions()
                .empName(empName)
                .empId(empId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get processed clock transactions.
     *
     * Obtain all processed clock transactions for a given date.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getProcessedTransactionsTest() throws ApiException {
        OffsetDateTime date = null;
        String empName = null;
        Long empId = null;
        ResultDtoClockTransactionDto response = api.getProcessedTransactions(date)
                .empName(empName)
                .empId(empId)
                .execute();
        // TODO: test validations
    }

    /**
     * Obtain work summaries.
     *
     * Obtain work summaries between the provided date range.
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkSummariesTest() throws ApiException {
        OffsetDateTime from = null;
        OffsetDateTime to = null;
        String empName = null;
        Long empId = null;
        Boolean full = null;
        Boolean authStatus = null;
        TimesheetDtoWorkSummaryDto response = api.getWorkSummaries(from, to)
                .empName(empName)
                .empId(empId)
                .full(full)
                .authStatus(authStatus)
                .execute();
        // TODO: test validations
    }

    /**
     * Obtain a work summary.
     *
     * Obtain a work summary by the specified id.  Will load a full work summary (includes clock and work detail information).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getWorkSummaryByIdTest() throws ApiException {
        Long workSummaryId = null;
        WorkSummaryDto response = api.getWorkSummaryById(workSummaryId)
                .execute();
        // TODO: test validations
    }

}
