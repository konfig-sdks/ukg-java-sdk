/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.model.Earning;
import com.konfigthis.client.model.EarningStatusResponse;
import com.konfigthis.client.model.EarningsAddTimeClockDataRequest;
import com.konfigthis.client.model.EarningsAddTimeClockDataResponse;
import com.konfigthis.client.model.EarningsDto;
import com.konfigthis.client.model.MultiStatusResponse;
import java.util.UUID;
import org.junit.jupiter.api.Disabled;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.BeforeAll;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for EarningsApi
 */
@Disabled
public class EarningsApiTest {

    private static EarningsApi api;

    
    @BeforeAll
    public static void beforeClass() {
        ApiClient apiClient = Configuration.getDefaultApiClient();
        api = new EarningsApi(apiClient);
    }

    /**
     * Add UKG Pro time clock data
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void addTimeClockDataTest() throws ApiException {
        UUID xCorrelationId = null;
        String usClientId = null;
        List<Earning> earnings = null;
        Boolean failAllOnRequest = null;
        EarningsAddTimeClockDataResponse response = api.addTimeClockData(xCorrelationId, usClientId)
                .earnings(earnings)
                .failAllOnRequest(failAllOnRequest)
                .execute();
        // TODO: test validations
    }

    /**
     * Delete a earning
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void deleteEarningTest() throws ApiException {
        UUID xCorrelationId = null;
        String usClientId = null;
        String refId = null;
        api.deleteEarning(xCorrelationId, usClientId, refId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get list of earnings configurations filtered by Parameter including pagination params
     *
     * Get all the earning configuration filtered by the parameter(s) passed. &lt;/br&gt;If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getConfigurationsFilteredByParameterTest() throws ApiException {
        String calculationRule = null;
        String taxCategory = null;
        String useDeductionOffset = null;
        String countryCode = null;
        String includeInShiftDiffrential = null;
        String includeInManualCheck = null;
        String earningCode = null;
        String includeInAccruals = null;
        Boolean includeInDeferredCompensation = null;
        Boolean includeInDeferredCompensationHours = null;
        Integer page = null;
        Integer perPage = null;
        List<EarningsDto> response = api.getConfigurationsFilteredByParameter(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck)
                .earningCode(earningCode)
                .includeInAccruals(includeInAccruals)
                .includeInDeferredCompensation(includeInDeferredCompensation)
                .includeInDeferredCompensationHours(includeInDeferredCompensationHours)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get status details for specified earning
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void getStatusDetailsTest() throws ApiException {
        UUID xCorrelationId = null;
        String usClientId = null;
        String refId = null;
        EarningStatusResponse response = api.getStatusDetails(xCorrelationId, usClientId, refId)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a list of all earnings configurations
     *
     * Get details of all earnings configuration setup at company level. &lt;/br&gt;If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void listEarningsConfigurationsTest() throws ApiException {
        String calculationRule = null;
        String taxCategory = null;
        String useDeductionOffset = null;
        String countryCode = null;
        String includeInShiftDiffrential = null;
        String includeInManualCheck = null;
        String earningCode = null;
        String includeInAccruals = null;
        Boolean includeInDeferredCompensation = null;
        Boolean includeInDeferredCompensationHours = null;
        Integer page = null;
        Integer perPage = null;
        List<EarningsDto> response = api.listEarningsConfigurations()
                .calculationRule(calculationRule)
                .taxCategory(taxCategory)
                .useDeductionOffset(useDeductionOffset)
                .countryCode(countryCode)
                .includeInShiftDiffrential(includeInShiftDiffrential)
                .includeInManualCheck(includeInManualCheck)
                .earningCode(earningCode)
                .includeInAccruals(includeInAccruals)
                .includeInDeferredCompensation(includeInDeferredCompensation)
                .includeInDeferredCompensationHours(includeInDeferredCompensationHours)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

    /**
     * Get a specific earning configuration
     *
     * Get details of the earning configuration requested. &lt;/br&gt;If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     *
     * @throws ApiException if the Api call fails
     */
    @Test
    public void specificConfigurationGetTest() throws ApiException {
        String earningCode = null;
        String calculationRule = null;
        String taxCategory = null;
        String useDeductionOffset = null;
        String countryCode = null;
        String includeInShiftDiffrential = null;
        String includeInManualCheck = null;
        String earningCode2 = null;
        String includeInAccruals = null;
        Boolean includeInDeferredCompensation = null;
        Boolean includeInDeferredCompensationHours = null;
        Integer page = null;
        Integer perPage = null;
        List<EarningsDto> response = api.specificConfigurationGet(earningCode)
                .calculationRule(calculationRule)
                .taxCategory(taxCategory)
                .useDeductionOffset(useDeductionOffset)
                .countryCode(countryCode)
                .includeInShiftDiffrential(includeInShiftDiffrential)
                .includeInManualCheck(includeInManualCheck)
                .earningCode2(earningCode2)
                .includeInAccruals(includeInAccruals)
                .includeInDeferredCompensation(includeInDeferredCompensation)
                .includeInDeferredCompensationHours(includeInDeferredCompensationHours)
                .page(page)
                .perPage(perPage)
                .execute();
        // TODO: test validations
    }

}
