/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * InsuranceRate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class InsuranceRate {
  public static final String SERIALIZED_NAME_DEDUCTION_CODE = "deductionCode";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_CODE)
  private String deductionCode;

  public static final String SERIALIZED_NAME_MINIMUM_AGE = "minimumAge";
  @SerializedName(SERIALIZED_NAME_MINIMUM_AGE)
  private Double minimumAge;

  public static final String SERIALIZED_NAME_MAXIMUM_AGE = "maximumAge";
  @SerializedName(SERIALIZED_NAME_MAXIMUM_AGE)
  private Double maximumAge;

  public static final String SERIALIZED_NAME_EMPLOYEE_RATE_NON_SMOKER_FEMALE = "employeeRateNonSmokerFemale";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_RATE_NON_SMOKER_FEMALE)
  private Double employeeRateNonSmokerFemale;

  public static final String SERIALIZED_NAME_EMPLOYEE_RATE_NON_SMOKER_MALE = "employeeRateNonSmokerMale";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_RATE_NON_SMOKER_MALE)
  private Double employeeRateNonSmokerMale;

  public static final String SERIALIZED_NAME_EMPLOYEE_RATE_SMOKER_FEMALE = "employeeRateSmokerFemale";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_RATE_SMOKER_FEMALE)
  private Double employeeRateSmokerFemale;

  public static final String SERIALIZED_NAME_EMPLOYEE_RATE_SMOKER_MALE = "employeeRateSmokerMale";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_RATE_SMOKER_MALE)
  private Double employeeRateSmokerMale;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public static final String SERIALIZED_NAME_EMPLOYER_RATE_NON_SMOKER_FEMALE = "employerRateNonSmokerFemale";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_RATE_NON_SMOKER_FEMALE)
  private Double employerRateNonSmokerFemale;

  public static final String SERIALIZED_NAME_EMPLOYER_RATE_NON_SMOKER_MALE = "employerRateNonSmokerMale";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_RATE_NON_SMOKER_MALE)
  private Double employerRateNonSmokerMale;

  public static final String SERIALIZED_NAME_EMPLOYER_RATE_SMOKER_FEMALE = "employerRateSmokerFemale";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_RATE_SMOKER_FEMALE)
  private Double employerRateSmokerFemale;

  public static final String SERIALIZED_NAME_EMPLOYER_RATE_SMOKER_MALE = "employerRateSmokerMale";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_RATE_SMOKER_MALE)
  private Double employerRateSmokerMale;

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "payFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_STOP_DATE = "stopDate";
  @SerializedName(SERIALIZED_NAME_STOP_DATE)
  private OffsetDateTime stopDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_RATE_NON_SMOKER_NOT_SPECIFIED = "employeeRateNonSmokerNotSpecified";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_RATE_NON_SMOKER_NOT_SPECIFIED)
  private Double employeeRateNonSmokerNotSpecified;

  public static final String SERIALIZED_NAME_EMPLOYEE_RATE_SMOKER_NOT_SPECIFIED = "employeeRateSmokerNotSpecified";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_RATE_SMOKER_NOT_SPECIFIED)
  private Double employeeRateSmokerNotSpecified;

  public static final String SERIALIZED_NAME_EMPLOYER_RATE_NON_SMOKER_NOT_SPECIFIED = "employerRateNonSmokerNotSpecified";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_RATE_NON_SMOKER_NOT_SPECIFIED)
  private Double employerRateNonSmokerNotSpecified;

  public static final String SERIALIZED_NAME_EMPLOYER_RATE_SMOKER_NOT_SPECIFIED = "employerRateSmokerNotSpecified";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_RATE_SMOKER_NOT_SPECIFIED)
  private Double employerRateSmokerNotSpecified;

  public InsuranceRate() {
  }

  public InsuranceRate deductionCode(String deductionCode) {
    
    
    
    
    this.deductionCode = deductionCode;
    return this;
  }

   /**
   * Get deductionCode
   * @return deductionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeductionCode() {
    return deductionCode;
  }


  public void setDeductionCode(String deductionCode) {
    
    
    
    this.deductionCode = deductionCode;
  }


  public InsuranceRate minimumAge(Double minimumAge) {
    
    
    
    
    this.minimumAge = minimumAge;
    return this;
  }

  public InsuranceRate minimumAge(Integer minimumAge) {
    
    
    
    
    this.minimumAge = minimumAge.doubleValue();
    return this;
  }

   /**
   * Get minimumAge
   * @return minimumAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getMinimumAge() {
    return minimumAge;
  }


  public void setMinimumAge(Double minimumAge) {
    
    
    
    this.minimumAge = minimumAge;
  }


  public InsuranceRate maximumAge(Double maximumAge) {
    
    
    
    
    this.maximumAge = maximumAge;
    return this;
  }

  public InsuranceRate maximumAge(Integer maximumAge) {
    
    
    
    
    this.maximumAge = maximumAge.doubleValue();
    return this;
  }

   /**
   * Get maximumAge
   * @return maximumAge
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getMaximumAge() {
    return maximumAge;
  }


  public void setMaximumAge(Double maximumAge) {
    
    
    
    this.maximumAge = maximumAge;
  }


  public InsuranceRate employeeRateNonSmokerFemale(Double employeeRateNonSmokerFemale) {
    
    
    
    
    this.employeeRateNonSmokerFemale = employeeRateNonSmokerFemale;
    return this;
  }

  public InsuranceRate employeeRateNonSmokerFemale(Integer employeeRateNonSmokerFemale) {
    
    
    
    
    this.employeeRateNonSmokerFemale = employeeRateNonSmokerFemale.doubleValue();
    return this;
  }

   /**
   * Get employeeRateNonSmokerFemale
   * @return employeeRateNonSmokerFemale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeRateNonSmokerFemale() {
    return employeeRateNonSmokerFemale;
  }


  public void setEmployeeRateNonSmokerFemale(Double employeeRateNonSmokerFemale) {
    
    
    
    this.employeeRateNonSmokerFemale = employeeRateNonSmokerFemale;
  }


  public InsuranceRate employeeRateNonSmokerMale(Double employeeRateNonSmokerMale) {
    
    
    
    
    this.employeeRateNonSmokerMale = employeeRateNonSmokerMale;
    return this;
  }

  public InsuranceRate employeeRateNonSmokerMale(Integer employeeRateNonSmokerMale) {
    
    
    
    
    this.employeeRateNonSmokerMale = employeeRateNonSmokerMale.doubleValue();
    return this;
  }

   /**
   * Get employeeRateNonSmokerMale
   * @return employeeRateNonSmokerMale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeRateNonSmokerMale() {
    return employeeRateNonSmokerMale;
  }


  public void setEmployeeRateNonSmokerMale(Double employeeRateNonSmokerMale) {
    
    
    
    this.employeeRateNonSmokerMale = employeeRateNonSmokerMale;
  }


  public InsuranceRate employeeRateSmokerFemale(Double employeeRateSmokerFemale) {
    
    
    
    
    this.employeeRateSmokerFemale = employeeRateSmokerFemale;
    return this;
  }

  public InsuranceRate employeeRateSmokerFemale(Integer employeeRateSmokerFemale) {
    
    
    
    
    this.employeeRateSmokerFemale = employeeRateSmokerFemale.doubleValue();
    return this;
  }

   /**
   * Get employeeRateSmokerFemale
   * @return employeeRateSmokerFemale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeRateSmokerFemale() {
    return employeeRateSmokerFemale;
  }


  public void setEmployeeRateSmokerFemale(Double employeeRateSmokerFemale) {
    
    
    
    this.employeeRateSmokerFemale = employeeRateSmokerFemale;
  }


  public InsuranceRate employeeRateSmokerMale(Double employeeRateSmokerMale) {
    
    
    
    
    this.employeeRateSmokerMale = employeeRateSmokerMale;
    return this;
  }

  public InsuranceRate employeeRateSmokerMale(Integer employeeRateSmokerMale) {
    
    
    
    
    this.employeeRateSmokerMale = employeeRateSmokerMale.doubleValue();
    return this;
  }

   /**
   * Get employeeRateSmokerMale
   * @return employeeRateSmokerMale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeRateSmokerMale() {
    return employeeRateSmokerMale;
  }


  public void setEmployeeRateSmokerMale(Double employeeRateSmokerMale) {
    
    
    
    this.employeeRateSmokerMale = employeeRateSmokerMale;
  }


  public InsuranceRate effectiveDate(OffsetDateTime effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Get effectiveDate
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(OffsetDateTime effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public InsuranceRate employerRateNonSmokerFemale(Double employerRateNonSmokerFemale) {
    
    
    
    
    this.employerRateNonSmokerFemale = employerRateNonSmokerFemale;
    return this;
  }

  public InsuranceRate employerRateNonSmokerFemale(Integer employerRateNonSmokerFemale) {
    
    
    
    
    this.employerRateNonSmokerFemale = employerRateNonSmokerFemale.doubleValue();
    return this;
  }

   /**
   * Get employerRateNonSmokerFemale
   * @return employerRateNonSmokerFemale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployerRateNonSmokerFemale() {
    return employerRateNonSmokerFemale;
  }


  public void setEmployerRateNonSmokerFemale(Double employerRateNonSmokerFemale) {
    
    
    
    this.employerRateNonSmokerFemale = employerRateNonSmokerFemale;
  }


  public InsuranceRate employerRateNonSmokerMale(Double employerRateNonSmokerMale) {
    
    
    
    
    this.employerRateNonSmokerMale = employerRateNonSmokerMale;
    return this;
  }

  public InsuranceRate employerRateNonSmokerMale(Integer employerRateNonSmokerMale) {
    
    
    
    
    this.employerRateNonSmokerMale = employerRateNonSmokerMale.doubleValue();
    return this;
  }

   /**
   * Get employerRateNonSmokerMale
   * @return employerRateNonSmokerMale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployerRateNonSmokerMale() {
    return employerRateNonSmokerMale;
  }


  public void setEmployerRateNonSmokerMale(Double employerRateNonSmokerMale) {
    
    
    
    this.employerRateNonSmokerMale = employerRateNonSmokerMale;
  }


  public InsuranceRate employerRateSmokerFemale(Double employerRateSmokerFemale) {
    
    
    
    
    this.employerRateSmokerFemale = employerRateSmokerFemale;
    return this;
  }

  public InsuranceRate employerRateSmokerFemale(Integer employerRateSmokerFemale) {
    
    
    
    
    this.employerRateSmokerFemale = employerRateSmokerFemale.doubleValue();
    return this;
  }

   /**
   * Get employerRateSmokerFemale
   * @return employerRateSmokerFemale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployerRateSmokerFemale() {
    return employerRateSmokerFemale;
  }


  public void setEmployerRateSmokerFemale(Double employerRateSmokerFemale) {
    
    
    
    this.employerRateSmokerFemale = employerRateSmokerFemale;
  }


  public InsuranceRate employerRateSmokerMale(Double employerRateSmokerMale) {
    
    
    
    
    this.employerRateSmokerMale = employerRateSmokerMale;
    return this;
  }

  public InsuranceRate employerRateSmokerMale(Integer employerRateSmokerMale) {
    
    
    
    
    this.employerRateSmokerMale = employerRateSmokerMale.doubleValue();
    return this;
  }

   /**
   * Get employerRateSmokerMale
   * @return employerRateSmokerMale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployerRateSmokerMale() {
    return employerRateSmokerMale;
  }


  public void setEmployerRateSmokerMale(Double employerRateSmokerMale) {
    
    
    
    this.employerRateSmokerMale = employerRateSmokerMale;
  }


  public InsuranceRate payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * Get payFrequency
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public InsuranceRate stopDate(OffsetDateTime stopDate) {
    
    
    
    
    this.stopDate = stopDate;
    return this;
  }

   /**
   * Get stopDate
   * @return stopDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStopDate() {
    return stopDate;
  }


  public void setStopDate(OffsetDateTime stopDate) {
    
    
    
    this.stopDate = stopDate;
  }


  public InsuranceRate employeeRateNonSmokerNotSpecified(Double employeeRateNonSmokerNotSpecified) {
    
    
    
    
    this.employeeRateNonSmokerNotSpecified = employeeRateNonSmokerNotSpecified;
    return this;
  }

  public InsuranceRate employeeRateNonSmokerNotSpecified(Integer employeeRateNonSmokerNotSpecified) {
    
    
    
    
    this.employeeRateNonSmokerNotSpecified = employeeRateNonSmokerNotSpecified.doubleValue();
    return this;
  }

   /**
   * Get employeeRateNonSmokerNotSpecified
   * @return employeeRateNonSmokerNotSpecified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeRateNonSmokerNotSpecified() {
    return employeeRateNonSmokerNotSpecified;
  }


  public void setEmployeeRateNonSmokerNotSpecified(Double employeeRateNonSmokerNotSpecified) {
    
    
    
    this.employeeRateNonSmokerNotSpecified = employeeRateNonSmokerNotSpecified;
  }


  public InsuranceRate employeeRateSmokerNotSpecified(Double employeeRateSmokerNotSpecified) {
    
    
    
    
    this.employeeRateSmokerNotSpecified = employeeRateSmokerNotSpecified;
    return this;
  }

  public InsuranceRate employeeRateSmokerNotSpecified(Integer employeeRateSmokerNotSpecified) {
    
    
    
    
    this.employeeRateSmokerNotSpecified = employeeRateSmokerNotSpecified.doubleValue();
    return this;
  }

   /**
   * Get employeeRateSmokerNotSpecified
   * @return employeeRateSmokerNotSpecified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeRateSmokerNotSpecified() {
    return employeeRateSmokerNotSpecified;
  }


  public void setEmployeeRateSmokerNotSpecified(Double employeeRateSmokerNotSpecified) {
    
    
    
    this.employeeRateSmokerNotSpecified = employeeRateSmokerNotSpecified;
  }


  public InsuranceRate employerRateNonSmokerNotSpecified(Double employerRateNonSmokerNotSpecified) {
    
    
    
    
    this.employerRateNonSmokerNotSpecified = employerRateNonSmokerNotSpecified;
    return this;
  }

  public InsuranceRate employerRateNonSmokerNotSpecified(Integer employerRateNonSmokerNotSpecified) {
    
    
    
    
    this.employerRateNonSmokerNotSpecified = employerRateNonSmokerNotSpecified.doubleValue();
    return this;
  }

   /**
   * Get employerRateNonSmokerNotSpecified
   * @return employerRateNonSmokerNotSpecified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployerRateNonSmokerNotSpecified() {
    return employerRateNonSmokerNotSpecified;
  }


  public void setEmployerRateNonSmokerNotSpecified(Double employerRateNonSmokerNotSpecified) {
    
    
    
    this.employerRateNonSmokerNotSpecified = employerRateNonSmokerNotSpecified;
  }


  public InsuranceRate employerRateSmokerNotSpecified(Double employerRateSmokerNotSpecified) {
    
    
    
    
    this.employerRateSmokerNotSpecified = employerRateSmokerNotSpecified;
    return this;
  }

  public InsuranceRate employerRateSmokerNotSpecified(Integer employerRateSmokerNotSpecified) {
    
    
    
    
    this.employerRateSmokerNotSpecified = employerRateSmokerNotSpecified.doubleValue();
    return this;
  }

   /**
   * Get employerRateSmokerNotSpecified
   * @return employerRateSmokerNotSpecified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployerRateSmokerNotSpecified() {
    return employerRateSmokerNotSpecified;
  }


  public void setEmployerRateSmokerNotSpecified(Double employerRateSmokerNotSpecified) {
    
    
    
    this.employerRateSmokerNotSpecified = employerRateSmokerNotSpecified;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the InsuranceRate instance itself
   */
  public InsuranceRate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    InsuranceRate insuranceRate = (InsuranceRate) o;
    return Objects.equals(this.deductionCode, insuranceRate.deductionCode) &&
        Objects.equals(this.minimumAge, insuranceRate.minimumAge) &&
        Objects.equals(this.maximumAge, insuranceRate.maximumAge) &&
        Objects.equals(this.employeeRateNonSmokerFemale, insuranceRate.employeeRateNonSmokerFemale) &&
        Objects.equals(this.employeeRateNonSmokerMale, insuranceRate.employeeRateNonSmokerMale) &&
        Objects.equals(this.employeeRateSmokerFemale, insuranceRate.employeeRateSmokerFemale) &&
        Objects.equals(this.employeeRateSmokerMale, insuranceRate.employeeRateSmokerMale) &&
        Objects.equals(this.effectiveDate, insuranceRate.effectiveDate) &&
        Objects.equals(this.employerRateNonSmokerFemale, insuranceRate.employerRateNonSmokerFemale) &&
        Objects.equals(this.employerRateNonSmokerMale, insuranceRate.employerRateNonSmokerMale) &&
        Objects.equals(this.employerRateSmokerFemale, insuranceRate.employerRateSmokerFemale) &&
        Objects.equals(this.employerRateSmokerMale, insuranceRate.employerRateSmokerMale) &&
        Objects.equals(this.payFrequency, insuranceRate.payFrequency) &&
        Objects.equals(this.stopDate, insuranceRate.stopDate) &&
        Objects.equals(this.employeeRateNonSmokerNotSpecified, insuranceRate.employeeRateNonSmokerNotSpecified) &&
        Objects.equals(this.employeeRateSmokerNotSpecified, insuranceRate.employeeRateSmokerNotSpecified) &&
        Objects.equals(this.employerRateNonSmokerNotSpecified, insuranceRate.employerRateNonSmokerNotSpecified) &&
        Objects.equals(this.employerRateSmokerNotSpecified, insuranceRate.employerRateSmokerNotSpecified)&&
        Objects.equals(this.additionalProperties, insuranceRate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductionCode, minimumAge, maximumAge, employeeRateNonSmokerFemale, employeeRateNonSmokerMale, employeeRateSmokerFemale, employeeRateSmokerMale, effectiveDate, employerRateNonSmokerFemale, employerRateNonSmokerMale, employerRateSmokerFemale, employerRateSmokerMale, payFrequency, stopDate, employeeRateNonSmokerNotSpecified, employeeRateSmokerNotSpecified, employerRateNonSmokerNotSpecified, employerRateSmokerNotSpecified, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class InsuranceRate {\n");
    sb.append("    deductionCode: ").append(toIndentedString(deductionCode)).append("\n");
    sb.append("    minimumAge: ").append(toIndentedString(minimumAge)).append("\n");
    sb.append("    maximumAge: ").append(toIndentedString(maximumAge)).append("\n");
    sb.append("    employeeRateNonSmokerFemale: ").append(toIndentedString(employeeRateNonSmokerFemale)).append("\n");
    sb.append("    employeeRateNonSmokerMale: ").append(toIndentedString(employeeRateNonSmokerMale)).append("\n");
    sb.append("    employeeRateSmokerFemale: ").append(toIndentedString(employeeRateSmokerFemale)).append("\n");
    sb.append("    employeeRateSmokerMale: ").append(toIndentedString(employeeRateSmokerMale)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    employerRateNonSmokerFemale: ").append(toIndentedString(employerRateNonSmokerFemale)).append("\n");
    sb.append("    employerRateNonSmokerMale: ").append(toIndentedString(employerRateNonSmokerMale)).append("\n");
    sb.append("    employerRateSmokerFemale: ").append(toIndentedString(employerRateSmokerFemale)).append("\n");
    sb.append("    employerRateSmokerMale: ").append(toIndentedString(employerRateSmokerMale)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    stopDate: ").append(toIndentedString(stopDate)).append("\n");
    sb.append("    employeeRateNonSmokerNotSpecified: ").append(toIndentedString(employeeRateNonSmokerNotSpecified)).append("\n");
    sb.append("    employeeRateSmokerNotSpecified: ").append(toIndentedString(employeeRateSmokerNotSpecified)).append("\n");
    sb.append("    employerRateNonSmokerNotSpecified: ").append(toIndentedString(employerRateNonSmokerNotSpecified)).append("\n");
    sb.append("    employerRateSmokerNotSpecified: ").append(toIndentedString(employerRateSmokerNotSpecified)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deductionCode");
    openapiFields.add("minimumAge");
    openapiFields.add("maximumAge");
    openapiFields.add("employeeRateNonSmokerFemale");
    openapiFields.add("employeeRateNonSmokerMale");
    openapiFields.add("employeeRateSmokerFemale");
    openapiFields.add("employeeRateSmokerMale");
    openapiFields.add("effectiveDate");
    openapiFields.add("employerRateNonSmokerFemale");
    openapiFields.add("employerRateNonSmokerMale");
    openapiFields.add("employerRateSmokerFemale");
    openapiFields.add("employerRateSmokerMale");
    openapiFields.add("payFrequency");
    openapiFields.add("stopDate");
    openapiFields.add("employeeRateNonSmokerNotSpecified");
    openapiFields.add("employeeRateSmokerNotSpecified");
    openapiFields.add("employerRateNonSmokerNotSpecified");
    openapiFields.add("employerRateSmokerNotSpecified");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to InsuranceRate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!InsuranceRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in InsuranceRate is not found in the empty JSON string", InsuranceRate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("deductionCode") != null && !jsonObj.get("deductionCode").isJsonNull()) && !jsonObj.get("deductionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductionCode").toString()));
      }
      if ((jsonObj.get("payFrequency") != null && !jsonObj.get("payFrequency").isJsonNull()) && !jsonObj.get("payFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payFrequency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!InsuranceRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'InsuranceRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<InsuranceRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(InsuranceRate.class));

       return (TypeAdapter<T>) new TypeAdapter<InsuranceRate>() {
           @Override
           public void write(JsonWriter out, InsuranceRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public InsuranceRate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             InsuranceRate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of InsuranceRate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of InsuranceRate
  * @throws IOException if the JSON string is invalid with respect to InsuranceRate
  */
  public static InsuranceRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, InsuranceRate.class);
  }

 /**
  * Convert an instance of InsuranceRate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

