/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeContract
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeContract {
  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_CONTRACT_NUMBER = "contractNumber";
  @SerializedName(SERIALIZED_NAME_CONTRACT_NUMBER)
  private String contractNumber;

  public static final String SERIALIZED_NAME_CONTRACT_TYPE_CODE = "contractTypeCode";
  @SerializedName(SERIALIZED_NAME_CONTRACT_TYPE_CODE)
  private String contractTypeCode;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private String effectiveDate;

  public static final String SERIALIZED_NAME_DATE_TIME_CREATED = "dateTimeCreated";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_CREATED)
  private String dateTimeCreated;

  public static final String SERIALIZED_NAME_ROW_LAST_CHANGED = "rowLastChanged";
  @SerializedName(SERIALIZED_NAME_ROW_LAST_CHANGED)
  private String rowLastChanged;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_Page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private Integer perPage;

  public static final String SERIALIZED_NAME_PAGES_COUNT = "pagesCount";
  @SerializedName(SERIALIZED_NAME_PAGES_COUNT)
  private Integer pagesCount;

  public EmployeeContract() {
  }

  public EmployeeContract companyId(String companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Get companyId
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyId() {
    return companyId;
  }


  public void setCompanyId(String companyId) {
    
    
    
    this.companyId = companyId;
  }


  public EmployeeContract employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public EmployeeContract contractNumber(String contractNumber) {
    
    
    
    
    this.contractNumber = contractNumber;
    return this;
  }

   /**
   * Get contractNumber
   * @return contractNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContractNumber() {
    return contractNumber;
  }


  public void setContractNumber(String contractNumber) {
    
    
    
    this.contractNumber = contractNumber;
  }


  public EmployeeContract contractTypeCode(String contractTypeCode) {
    
    
    
    
    this.contractTypeCode = contractTypeCode;
    return this;
  }

   /**
   * Get contractTypeCode
   * @return contractTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContractTypeCode() {
    return contractTypeCode;
  }


  public void setContractTypeCode(String contractTypeCode) {
    
    
    
    this.contractTypeCode = contractTypeCode;
  }


  public EmployeeContract effectiveDate(String effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Get effectiveDate
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(String effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public EmployeeContract dateTimeCreated(String dateTimeCreated) {
    
    
    
    
    this.dateTimeCreated = dateTimeCreated;
    return this;
  }

   /**
   * Get dateTimeCreated
   * @return dateTimeCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateTimeCreated() {
    return dateTimeCreated;
  }


  public void setDateTimeCreated(String dateTimeCreated) {
    
    
    
    this.dateTimeCreated = dateTimeCreated;
  }


  public EmployeeContract rowLastChanged(String rowLastChanged) {
    
    
    
    
    this.rowLastChanged = rowLastChanged;
    return this;
  }

   /**
   * Get rowLastChanged
   * @return rowLastChanged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getRowLastChanged() {
    return rowLastChanged;
  }


  public void setRowLastChanged(String rowLastChanged) {
    
    
    
    this.rowLastChanged = rowLastChanged;
  }


  public EmployeeContract page(Integer page) {
    if (page != null && page < 1) {
      throw new IllegalArgumentException("Invalid value for page. Must be greater than or equal to 1.");
    }
    if (page != null && page > 2147483647) {
      throw new IllegalArgumentException("Invalid value for page. Must be less than or equal to 2147483647.");
    }
    
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * minimum: 1
   * maximum: 2147483647
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    if (page != null && page < 1) {
      throw new IllegalArgumentException("Invalid value for page. Must be greater than or equal to 1.");
    }
    if (page != null && page > 2147483647) {
      throw new IllegalArgumentException("Invalid value for page. Must be less than or equal to 2147483647.");
    }
    
    this.page = page;
  }


  public EmployeeContract perPage(Integer perPage) {
    if (perPage != null && perPage < 1) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be greater than or equal to 1.");
    }
    if (perPage != null && perPage > 2147483647) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be less than or equal to 2147483647.");
    }
    
    
    this.perPage = perPage;
    return this;
  }

   /**
   * Get perPage
   * minimum: 1
   * maximum: 2147483647
   * @return perPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPerPage() {
    return perPage;
  }


  public void setPerPage(Integer perPage) {
    if (perPage != null && perPage < 1) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be greater than or equal to 1.");
    }
    if (perPage != null && perPage > 2147483647) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be less than or equal to 2147483647.");
    }
    
    this.perPage = perPage;
  }


  public EmployeeContract pagesCount(Integer pagesCount) {
    
    
    
    
    this.pagesCount = pagesCount;
    return this;
  }

   /**
   * Get pagesCount
   * @return pagesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPagesCount() {
    return pagesCount;
  }


  public void setPagesCount(Integer pagesCount) {
    
    
    
    this.pagesCount = pagesCount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeContract instance itself
   */
  public EmployeeContract putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeContract employeeContract = (EmployeeContract) o;
    return Objects.equals(this.companyId, employeeContract.companyId) &&
        Objects.equals(this.employeeId, employeeContract.employeeId) &&
        Objects.equals(this.contractNumber, employeeContract.contractNumber) &&
        Objects.equals(this.contractTypeCode, employeeContract.contractTypeCode) &&
        Objects.equals(this.effectiveDate, employeeContract.effectiveDate) &&
        Objects.equals(this.dateTimeCreated, employeeContract.dateTimeCreated) &&
        Objects.equals(this.rowLastChanged, employeeContract.rowLastChanged) &&
        Objects.equals(this.page, employeeContract.page) &&
        Objects.equals(this.perPage, employeeContract.perPage) &&
        Objects.equals(this.pagesCount, employeeContract.pagesCount)&&
        Objects.equals(this.additionalProperties, employeeContract.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyId, employeeId, contractNumber, contractTypeCode, effectiveDate, dateTimeCreated, rowLastChanged, page, perPage, pagesCount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeContract {\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    contractNumber: ").append(toIndentedString(contractNumber)).append("\n");
    sb.append("    contractTypeCode: ").append(toIndentedString(contractTypeCode)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    dateTimeCreated: ").append(toIndentedString(dateTimeCreated)).append("\n");
    sb.append("    rowLastChanged: ").append(toIndentedString(rowLastChanged)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyId");
    openapiFields.add("employeeId");
    openapiFields.add("contractNumber");
    openapiFields.add("contractTypeCode");
    openapiFields.add("effectiveDate");
    openapiFields.add("dateTimeCreated");
    openapiFields.add("rowLastChanged");
    openapiFields.add("page");
    openapiFields.add("per_Page");
    openapiFields.add("pagesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeContract
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeContract.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeContract is not found in the empty JSON string", EmployeeContract.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("contractNumber") != null && !jsonObj.get("contractNumber").isJsonNull()) && !jsonObj.get("contractNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractNumber").toString()));
      }
      if ((jsonObj.get("contractTypeCode") != null && !jsonObj.get("contractTypeCode").isJsonNull()) && !jsonObj.get("contractTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contractTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contractTypeCode").toString()));
      }
      if ((jsonObj.get("effectiveDate") != null && !jsonObj.get("effectiveDate").isJsonNull()) && !jsonObj.get("effectiveDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `effectiveDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("effectiveDate").toString()));
      }
      if ((jsonObj.get("dateTimeCreated") != null && !jsonObj.get("dateTimeCreated").isJsonNull()) && !jsonObj.get("dateTimeCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTimeCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTimeCreated").toString()));
      }
      if ((jsonObj.get("rowLastChanged") != null && !jsonObj.get("rowLastChanged").isJsonNull()) && !jsonObj.get("rowLastChanged").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `rowLastChanged` to be a primitive type in the JSON string but got `%s`", jsonObj.get("rowLastChanged").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeContract.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeContract' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeContract> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeContract.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeContract>() {
           @Override
           public void write(JsonWriter out, EmployeeContract value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeContract read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeContract instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeContract given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeContract
  * @throws IOException if the JSON string is invalid with respect to EmployeeContract
  */
  public static EmployeeContract fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeContract.class);
  }

 /**
  * Convert an instance of EmployeeContract to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

