/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * OptionRate
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class OptionRate {
  public static final String SERIALIZED_NAME_DEDUCTION_CODE = "deductionCode";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_CODE)
  private String deductionCode;

  public static final String SERIALIZED_NAME_BENEFIT_OPTION = "benefitOption";
  @SerializedName(SERIALIZED_NAME_BENEFIT_OPTION)
  private String benefitOption;

  public static final String SERIALIZED_NAME_EMPLOYEE_RATE = "employeeRate";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_RATE)
  private Double employeeRate;

  public static final String SERIALIZED_NAME_EMPLOYER_RATE = "employerRate";
  @SerializedName(SERIALIZED_NAME_EMPLOYER_RATE)
  private Double employerRate;

  public static final String SERIALIZED_NAME_EFFECTIVE_DATE = "effectiveDate";
  @SerializedName(SERIALIZED_NAME_EFFECTIVE_DATE)
  private OffsetDateTime effectiveDate;

  public static final String SERIALIZED_NAME_PAY_FREQUENCY = "payFrequency";
  @SerializedName(SERIALIZED_NAME_PAY_FREQUENCY)
  private String payFrequency;

  public static final String SERIALIZED_NAME_RATE_STOP_DATE = "rateStopDate";
  @SerializedName(SERIALIZED_NAME_RATE_STOP_DATE)
  private OffsetDateTime rateStopDate;

  public OptionRate() {
  }

  public OptionRate deductionCode(String deductionCode) {
    
    
    
    
    this.deductionCode = deductionCode;
    return this;
  }

   /**
   * Get deductionCode
   * @return deductionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeductionCode() {
    return deductionCode;
  }


  public void setDeductionCode(String deductionCode) {
    
    
    
    this.deductionCode = deductionCode;
  }


  public OptionRate benefitOption(String benefitOption) {
    
    
    
    
    this.benefitOption = benefitOption;
    return this;
  }

   /**
   * Get benefitOption
   * @return benefitOption
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBenefitOption() {
    return benefitOption;
  }


  public void setBenefitOption(String benefitOption) {
    
    
    
    this.benefitOption = benefitOption;
  }


  public OptionRate employeeRate(Double employeeRate) {
    
    
    
    
    this.employeeRate = employeeRate;
    return this;
  }

  public OptionRate employeeRate(Integer employeeRate) {
    
    
    
    
    this.employeeRate = employeeRate.doubleValue();
    return this;
  }

   /**
   * Get employeeRate
   * @return employeeRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployeeRate() {
    return employeeRate;
  }


  public void setEmployeeRate(Double employeeRate) {
    
    
    
    this.employeeRate = employeeRate;
  }


  public OptionRate employerRate(Double employerRate) {
    
    
    
    
    this.employerRate = employerRate;
    return this;
  }

  public OptionRate employerRate(Integer employerRate) {
    
    
    
    
    this.employerRate = employerRate.doubleValue();
    return this;
  }

   /**
   * Get employerRate
   * @return employerRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getEmployerRate() {
    return employerRate;
  }


  public void setEmployerRate(Double employerRate) {
    
    
    
    this.employerRate = employerRate;
  }


  public OptionRate effectiveDate(OffsetDateTime effectiveDate) {
    
    
    
    
    this.effectiveDate = effectiveDate;
    return this;
  }

   /**
   * Get effectiveDate
   * @return effectiveDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEffectiveDate() {
    return effectiveDate;
  }


  public void setEffectiveDate(OffsetDateTime effectiveDate) {
    
    
    
    this.effectiveDate = effectiveDate;
  }


  public OptionRate payFrequency(String payFrequency) {
    
    
    
    
    this.payFrequency = payFrequency;
    return this;
  }

   /**
   * Get payFrequency
   * @return payFrequency
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayFrequency() {
    return payFrequency;
  }


  public void setPayFrequency(String payFrequency) {
    
    
    
    this.payFrequency = payFrequency;
  }


  public OptionRate rateStopDate(OffsetDateTime rateStopDate) {
    
    
    
    
    this.rateStopDate = rateStopDate;
    return this;
  }

   /**
   * Get rateStopDate
   * @return rateStopDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getRateStopDate() {
    return rateStopDate;
  }


  public void setRateStopDate(OffsetDateTime rateStopDate) {
    
    
    
    this.rateStopDate = rateStopDate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the OptionRate instance itself
   */
  public OptionRate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    OptionRate optionRate = (OptionRate) o;
    return Objects.equals(this.deductionCode, optionRate.deductionCode) &&
        Objects.equals(this.benefitOption, optionRate.benefitOption) &&
        Objects.equals(this.employeeRate, optionRate.employeeRate) &&
        Objects.equals(this.employerRate, optionRate.employerRate) &&
        Objects.equals(this.effectiveDate, optionRate.effectiveDate) &&
        Objects.equals(this.payFrequency, optionRate.payFrequency) &&
        Objects.equals(this.rateStopDate, optionRate.rateStopDate)&&
        Objects.equals(this.additionalProperties, optionRate.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(deductionCode, benefitOption, employeeRate, employerRate, effectiveDate, payFrequency, rateStopDate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class OptionRate {\n");
    sb.append("    deductionCode: ").append(toIndentedString(deductionCode)).append("\n");
    sb.append("    benefitOption: ").append(toIndentedString(benefitOption)).append("\n");
    sb.append("    employeeRate: ").append(toIndentedString(employeeRate)).append("\n");
    sb.append("    employerRate: ").append(toIndentedString(employerRate)).append("\n");
    sb.append("    effectiveDate: ").append(toIndentedString(effectiveDate)).append("\n");
    sb.append("    payFrequency: ").append(toIndentedString(payFrequency)).append("\n");
    sb.append("    rateStopDate: ").append(toIndentedString(rateStopDate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("deductionCode");
    openapiFields.add("benefitOption");
    openapiFields.add("employeeRate");
    openapiFields.add("employerRate");
    openapiFields.add("effectiveDate");
    openapiFields.add("payFrequency");
    openapiFields.add("rateStopDate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to OptionRate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!OptionRate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in OptionRate is not found in the empty JSON string", OptionRate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("deductionCode") != null && !jsonObj.get("deductionCode").isJsonNull()) && !jsonObj.get("deductionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductionCode").toString()));
      }
      if ((jsonObj.get("benefitOption") != null && !jsonObj.get("benefitOption").isJsonNull()) && !jsonObj.get("benefitOption").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `benefitOption` to be a primitive type in the JSON string but got `%s`", jsonObj.get("benefitOption").toString()));
      }
      if ((jsonObj.get("payFrequency") != null && !jsonObj.get("payFrequency").isJsonNull()) && !jsonObj.get("payFrequency").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payFrequency` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payFrequency").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!OptionRate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'OptionRate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<OptionRate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(OptionRate.class));

       return (TypeAdapter<T>) new TypeAdapter<OptionRate>() {
           @Override
           public void write(JsonWriter out, OptionRate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public OptionRate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             OptionRate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of OptionRate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of OptionRate
  * @throws IOException if the JSON string is invalid with respect to OptionRate
  */
  public static OptionRate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, OptionRate.class);
  }

 /**
  * Convert an instance of OptionRate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

