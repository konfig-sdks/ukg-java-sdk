/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Compensation information for the new hire
 */
@ApiModel(description = "Compensation information for the new hire")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NewHirePostModelCompensation {
  public static final String SERIALIZED_NAME_IS_FULL_TIME = "isFullTime";
  @SerializedName(SERIALIZED_NAME_IS_FULL_TIME)
  private Boolean isFullTime;

  public static final String SERIALIZED_NAME_IS_SALARIED = "isSalaried";
  @SerializedName(SERIALIZED_NAME_IS_SALARIED)
  private Boolean isSalaried;

  public static final String SERIALIZED_NAME_WORK_HOURS = "workHours";
  @SerializedName(SERIALIZED_NAME_WORK_HOURS)
  private Double workHours;

  public static final String SERIALIZED_NAME_WEEKLY_HOURS = "weeklyHours";
  @SerializedName(SERIALIZED_NAME_WEEKLY_HOURS)
  private Double weeklyHours;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_PAY_RATE = "payRate";
  @SerializedName(SERIALIZED_NAME_PAY_RATE)
  private Double payRate;

  public static final String SERIALIZED_NAME_RATE_PER = "ratePer";
  @SerializedName(SERIALIZED_NAME_RATE_PER)
  private String ratePer;

  public NewHirePostModelCompensation() {
  }

  public NewHirePostModelCompensation isFullTime(Boolean isFullTime) {
    
    
    
    
    this.isFullTime = isFullTime;
    return this;
  }

   /**
   * Whether the new hire is full time
   * @return isFullTime
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "Whether the new hire is full time")

  public Boolean getIsFullTime() {
    return isFullTime;
  }


  public void setIsFullTime(Boolean isFullTime) {
    
    
    
    this.isFullTime = isFullTime;
  }


  public NewHirePostModelCompensation isSalaried(Boolean isSalaried) {
    
    
    
    
    this.isSalaried = isSalaried;
    return this;
  }

   /**
   * Whether the new hire is salaried
   * @return isSalaried
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "Whether the new hire is salaried")

  public Boolean getIsSalaried() {
    return isSalaried;
  }


  public void setIsSalaried(Boolean isSalaried) {
    
    
    
    this.isSalaried = isSalaried;
  }


  public NewHirePostModelCompensation workHours(Double workHours) {
    
    
    
    
    this.workHours = workHours;
    return this;
  }

  public NewHirePostModelCompensation workHours(Integer workHours) {
    
    
    
    
    this.workHours = workHours.doubleValue();
    return this;
  }

   /**
   * Work hours of the new hire
   * @return workHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "40", value = "Work hours of the new hire")

  public Double getWorkHours() {
    return workHours;
  }


  public void setWorkHours(Double workHours) {
    
    
    
    this.workHours = workHours;
  }


  public NewHirePostModelCompensation weeklyHours(Double weeklyHours) {
    
    if (weeklyHours != null && weeklyHours > 168) {
      throw new IllegalArgumentException("Invalid value for weeklyHours. Must be less than or equal to 168.");
    }
    
    
    this.weeklyHours = weeklyHours;
    return this;
  }

  public NewHirePostModelCompensation weeklyHours(Integer weeklyHours) {
    
    if (weeklyHours != null && weeklyHours > 168) {
      throw new IllegalArgumentException("Invalid value for weeklyHours. Must be less than or equal to 168.");
    }
    
    
    this.weeklyHours = weeklyHours.doubleValue();
    return this;
  }

   /**
   * Weekly hours of the new hire. Only applicable for hires not in US/Canadian companies
   * maximum: 168
   * @return weeklyHours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0", value = "Weekly hours of the new hire. Only applicable for hires not in US/Canadian companies")

  public Double getWeeklyHours() {
    return weeklyHours;
  }


  public void setWeeklyHours(Double weeklyHours) {
    
    if (weeklyHours != null && weeklyHours > 168) {
      throw new IllegalArgumentException("Invalid value for weeklyHours. Must be less than or equal to 168.");
    }
    
    this.weeklyHours = weeklyHours;
  }


  public NewHirePostModelCompensation currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * ISO currency code of the new hire
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CAD", value = "ISO currency code of the new hire")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public NewHirePostModelCompensation payRate(Double payRate) {
    
    
    
    
    this.payRate = payRate;
    return this;
  }

  public NewHirePostModelCompensation payRate(Integer payRate) {
    
    
    
    
    this.payRate = payRate.doubleValue();
    return this;
  }

   /**
   * Pay rate of the new hire
   * @return payRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "50000", value = "Pay rate of the new hire")

  public Double getPayRate() {
    return payRate;
  }


  public void setPayRate(Double payRate) {
    
    
    
    this.payRate = payRate;
  }


  public NewHirePostModelCompensation ratePer(String ratePer) {
    
    
    
    
    this.ratePer = ratePer;
    return this;
  }

   /**
   * Pay period of the new hire. Accepts \&quot;H\&quot; (Hour), \&quot;W\&quot; (Week), \&quot;P\&quot; (Period), \&quot;Y\&quot; (Year)
   * @return ratePer
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Y", value = "Pay period of the new hire. Accepts \"H\" (Hour), \"W\" (Week), \"P\" (Period), \"Y\" (Year)")

  public String getRatePer() {
    return ratePer;
  }


  public void setRatePer(String ratePer) {
    
    
    
    this.ratePer = ratePer;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NewHirePostModelCompensation instance itself
   */
  public NewHirePostModelCompensation putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewHirePostModelCompensation newHirePostModelCompensation = (NewHirePostModelCompensation) o;
    return Objects.equals(this.isFullTime, newHirePostModelCompensation.isFullTime) &&
        Objects.equals(this.isSalaried, newHirePostModelCompensation.isSalaried) &&
        Objects.equals(this.workHours, newHirePostModelCompensation.workHours) &&
        Objects.equals(this.weeklyHours, newHirePostModelCompensation.weeklyHours) &&
        Objects.equals(this.currencyCode, newHirePostModelCompensation.currencyCode) &&
        Objects.equals(this.payRate, newHirePostModelCompensation.payRate) &&
        Objects.equals(this.ratePer, newHirePostModelCompensation.ratePer)&&
        Objects.equals(this.additionalProperties, newHirePostModelCompensation.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(isFullTime, isSalaried, workHours, weeklyHours, currencyCode, payRate, ratePer, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewHirePostModelCompensation {\n");
    sb.append("    isFullTime: ").append(toIndentedString(isFullTime)).append("\n");
    sb.append("    isSalaried: ").append(toIndentedString(isSalaried)).append("\n");
    sb.append("    workHours: ").append(toIndentedString(workHours)).append("\n");
    sb.append("    weeklyHours: ").append(toIndentedString(weeklyHours)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    payRate: ").append(toIndentedString(payRate)).append("\n");
    sb.append("    ratePer: ").append(toIndentedString(ratePer)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("isFullTime");
    openapiFields.add("isSalaried");
    openapiFields.add("workHours");
    openapiFields.add("weeklyHours");
    openapiFields.add("currencyCode");
    openapiFields.add("payRate");
    openapiFields.add("ratePer");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewHirePostModelCompensation
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewHirePostModelCompensation.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewHirePostModelCompensation is not found in the empty JSON string", NewHirePostModelCompensation.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("ratePer") != null && !jsonObj.get("ratePer").isJsonNull()) && !jsonObj.get("ratePer").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `ratePer` to be a primitive type in the JSON string but got `%s`", jsonObj.get("ratePer").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewHirePostModelCompensation.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewHirePostModelCompensation' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewHirePostModelCompensation> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewHirePostModelCompensation.class));

       return (TypeAdapter<T>) new TypeAdapter<NewHirePostModelCompensation>() {
           @Override
           public void write(JsonWriter out, NewHirePostModelCompensation value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NewHirePostModelCompensation read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NewHirePostModelCompensation instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewHirePostModelCompensation given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewHirePostModelCompensation
  * @throws IOException if the JSON string is invalid with respect to NewHirePostModelCompensation
  */
  public static NewHirePostModelCompensation fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewHirePostModelCompensation.class);
  }

 /**
  * Convert an instance of NewHirePostModelCompensation to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

