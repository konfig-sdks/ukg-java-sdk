/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeePayStatementEarningsModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeePayStatementEarningsModel {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_AMOUNTYTD = "amountytd";
  @SerializedName(SERIALIZED_NAME_AMOUNTYTD)
  private Float amountytd;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private Float hours;

  public static final String SERIALIZED_NAME_HOURSYTD = "hoursytd";
  @SerializedName(SERIALIZED_NAME_HOURSYTD)
  private Float hoursytd;

  public static final String SERIALIZED_NAME_PAYCODE = "paycode";
  @SerializedName(SERIALIZED_NAME_PAYCODE)
  private String paycode;

  public static final String SERIALIZED_NAME_PAYDESCRIPTION = "paydescription";
  @SerializedName(SERIALIZED_NAME_PAYDESCRIPTION)
  private String paydescription;

  public static final String SERIALIZED_NAME_PAYRATE = "payrate";
  @SerializedName(SERIALIZED_NAME_PAYRATE)
  private Float payrate;

  public static final String SERIALIZED_NAME_PERIODEND = "periodend";
  @SerializedName(SERIALIZED_NAME_PERIODEND)
  private OffsetDateTime periodend;

  public static final String SERIALIZED_NAME_PERIODSTART = "periodstart";
  @SerializedName(SERIALIZED_NAME_PERIODSTART)
  private OffsetDateTime periodstart;

  public static final String SERIALIZED_NAME_PIECECOUNT = "piececount";
  @SerializedName(SERIALIZED_NAME_PIECECOUNT)
  private Float piececount;

  public static final String SERIALIZED_NAME_PIECEPAYRATE = "piecepayrate";
  @SerializedName(SERIALIZED_NAME_PIECEPAYRATE)
  private Float piecepayrate;

  public EmployeePayStatementEarningsModel() {
  }

  public EmployeePayStatementEarningsModel amount(Float amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    
    
    this.amount = amount;
  }


  public EmployeePayStatementEarningsModel amountytd(Float amountytd) {
    
    
    
    
    this.amountytd = amountytd;
    return this;
  }

   /**
   * Get amountytd
   * @return amountytd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAmountytd() {
    return amountytd;
  }


  public void setAmountytd(Float amountytd) {
    
    
    
    this.amountytd = amountytd;
  }


  public EmployeePayStatementEarningsModel hours(Float hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

   /**
   * Get hours
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getHours() {
    return hours;
  }


  public void setHours(Float hours) {
    
    
    
    this.hours = hours;
  }


  public EmployeePayStatementEarningsModel hoursytd(Float hoursytd) {
    
    
    
    
    this.hoursytd = hoursytd;
    return this;
  }

   /**
   * Get hoursytd
   * @return hoursytd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getHoursytd() {
    return hoursytd;
  }


  public void setHoursytd(Float hoursytd) {
    
    
    
    this.hoursytd = hoursytd;
  }


  public EmployeePayStatementEarningsModel paycode(String paycode) {
    
    
    
    
    this.paycode = paycode;
    return this;
  }

   /**
   * Get paycode
   * @return paycode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaycode() {
    return paycode;
  }


  public void setPaycode(String paycode) {
    
    
    
    this.paycode = paycode;
  }


  public EmployeePayStatementEarningsModel paydescription(String paydescription) {
    
    
    
    
    this.paydescription = paydescription;
    return this;
  }

   /**
   * Get paydescription
   * @return paydescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPaydescription() {
    return paydescription;
  }


  public void setPaydescription(String paydescription) {
    
    
    
    this.paydescription = paydescription;
  }


  public EmployeePayStatementEarningsModel payrate(Float payrate) {
    
    
    
    
    this.payrate = payrate;
    return this;
  }

   /**
   * Get payrate
   * @return payrate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getPayrate() {
    return payrate;
  }


  public void setPayrate(Float payrate) {
    
    
    
    this.payrate = payrate;
  }


  public EmployeePayStatementEarningsModel periodend(OffsetDateTime periodend) {
    
    
    
    
    this.periodend = periodend;
    return this;
  }

   /**
   * Get periodend
   * @return periodend
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getPeriodend() {
    return periodend;
  }


  public void setPeriodend(OffsetDateTime periodend) {
    
    
    
    this.periodend = periodend;
  }


  public EmployeePayStatementEarningsModel periodstart(OffsetDateTime periodstart) {
    
    
    
    
    this.periodstart = periodstart;
    return this;
  }

   /**
   * Get periodstart
   * @return periodstart
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getPeriodstart() {
    return periodstart;
  }


  public void setPeriodstart(OffsetDateTime periodstart) {
    
    
    
    this.periodstart = periodstart;
  }


  public EmployeePayStatementEarningsModel piececount(Float piececount) {
    
    
    
    
    this.piececount = piececount;
    return this;
  }

   /**
   * Get piececount
   * @return piececount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getPiececount() {
    return piececount;
  }


  public void setPiececount(Float piececount) {
    
    
    
    this.piececount = piececount;
  }


  public EmployeePayStatementEarningsModel piecepayrate(Float piecepayrate) {
    
    
    
    
    this.piecepayrate = piecepayrate;
    return this;
  }

   /**
   * Get piecepayrate
   * @return piecepayrate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getPiecepayrate() {
    return piecepayrate;
  }


  public void setPiecepayrate(Float piecepayrate) {
    
    
    
    this.piecepayrate = piecepayrate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeePayStatementEarningsModel instance itself
   */
  public EmployeePayStatementEarningsModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeePayStatementEarningsModel employeePayStatementEarningsModel = (EmployeePayStatementEarningsModel) o;
    return Objects.equals(this.amount, employeePayStatementEarningsModel.amount) &&
        Objects.equals(this.amountytd, employeePayStatementEarningsModel.amountytd) &&
        Objects.equals(this.hours, employeePayStatementEarningsModel.hours) &&
        Objects.equals(this.hoursytd, employeePayStatementEarningsModel.hoursytd) &&
        Objects.equals(this.paycode, employeePayStatementEarningsModel.paycode) &&
        Objects.equals(this.paydescription, employeePayStatementEarningsModel.paydescription) &&
        Objects.equals(this.payrate, employeePayStatementEarningsModel.payrate) &&
        Objects.equals(this.periodend, employeePayStatementEarningsModel.periodend) &&
        Objects.equals(this.periodstart, employeePayStatementEarningsModel.periodstart) &&
        Objects.equals(this.piececount, employeePayStatementEarningsModel.piececount) &&
        Objects.equals(this.piecepayrate, employeePayStatementEarningsModel.piecepayrate)&&
        Objects.equals(this.additionalProperties, employeePayStatementEarningsModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountytd, hours, hoursytd, paycode, paydescription, payrate, periodend, periodstart, piececount, piecepayrate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeePayStatementEarningsModel {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountytd: ").append(toIndentedString(amountytd)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    hoursytd: ").append(toIndentedString(hoursytd)).append("\n");
    sb.append("    paycode: ").append(toIndentedString(paycode)).append("\n");
    sb.append("    paydescription: ").append(toIndentedString(paydescription)).append("\n");
    sb.append("    payrate: ").append(toIndentedString(payrate)).append("\n");
    sb.append("    periodend: ").append(toIndentedString(periodend)).append("\n");
    sb.append("    periodstart: ").append(toIndentedString(periodstart)).append("\n");
    sb.append("    piececount: ").append(toIndentedString(piececount)).append("\n");
    sb.append("    piecepayrate: ").append(toIndentedString(piecepayrate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amountytd");
    openapiFields.add("hours");
    openapiFields.add("hoursytd");
    openapiFields.add("paycode");
    openapiFields.add("paydescription");
    openapiFields.add("payrate");
    openapiFields.add("periodend");
    openapiFields.add("periodstart");
    openapiFields.add("piececount");
    openapiFields.add("piecepayrate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeePayStatementEarningsModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeePayStatementEarningsModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeePayStatementEarningsModel is not found in the empty JSON string", EmployeePayStatementEarningsModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("paycode") != null && !jsonObj.get("paycode").isJsonNull()) && !jsonObj.get("paycode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paycode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paycode").toString()));
      }
      if ((jsonObj.get("paydescription") != null && !jsonObj.get("paydescription").isJsonNull()) && !jsonObj.get("paydescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `paydescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("paydescription").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeePayStatementEarningsModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeePayStatementEarningsModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeePayStatementEarningsModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeePayStatementEarningsModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeePayStatementEarningsModel>() {
           @Override
           public void write(JsonWriter out, EmployeePayStatementEarningsModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeePayStatementEarningsModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeePayStatementEarningsModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeePayStatementEarningsModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeePayStatementEarningsModel
  * @throws IOException if the JSON string is invalid with respect to EmployeePayStatementEarningsModel
  */
  public static EmployeePayStatementEarningsModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeePayStatementEarningsModel.class);
  }

 /**
  * Convert an instance of EmployeePayStatementEarningsModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

