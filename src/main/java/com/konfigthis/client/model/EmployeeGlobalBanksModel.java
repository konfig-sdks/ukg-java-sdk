/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeGlobalBanksModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeGlobalBanksModel {
  public static final String SERIALIZED_NAME_BANK_ID = "bankId";
  @SerializedName(SERIALIZED_NAME_BANK_ID)
  private String bankId;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_PAY_GROUP = "payGroup";
  @SerializedName(SERIALIZED_NAME_PAY_GROUP)
  private String payGroup;

  public static final String SERIALIZED_NAME_CURRENCY_CODE = "currencyCode";
  @SerializedName(SERIALIZED_NAME_CURRENCY_CODE)
  private String currencyCode;

  public static final String SERIALIZED_NAME_FUNDING_METHOD = "fundingMethod";
  @SerializedName(SERIALIZED_NAME_FUNDING_METHOD)
  private String fundingMethod;

  public static final String SERIALIZED_NAME_FUNDING_METHOD_DESCRIPTION = "fundingMethodDescription";
  @SerializedName(SERIALIZED_NAME_FUNDING_METHOD_DESCRIPTION)
  private String fundingMethodDescription;

  public static final String SERIALIZED_NAME_ADDRESS_LINE1 = "addressLine1";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE1)
  private String addressLine1;

  public static final String SERIALIZED_NAME_ADDRESS_LINE2 = "addressLine2";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE2)
  private String addressLine2;

  public static final String SERIALIZED_NAME_ADDRESS_LINE3 = "addressLine3";
  @SerializedName(SERIALIZED_NAME_ADDRESS_LINE3)
  private String addressLine3;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_STATE = "state";
  @SerializedName(SERIALIZED_NAME_STATE)
  private String state;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private String country;

  public static final String SERIALIZED_NAME_BANK_NAME = "bankName";
  @SerializedName(SERIALIZED_NAME_BANK_NAME)
  private String bankName;

  public static final String SERIALIZED_NAME_BANK_BRANCH = "bankBranch";
  @SerializedName(SERIALIZED_NAME_BANK_BRANCH)
  private String bankBranch;

  public static final String SERIALIZED_NAME_BANK_COUNTRY_CODE = "bankCountryCode";
  @SerializedName(SERIALIZED_NAME_BANK_COUNTRY_CODE)
  private String bankCountryCode;

  public static final String SERIALIZED_NAME_BENEFICIARY_NAME = "beneficiaryName";
  @SerializedName(SERIALIZED_NAME_BENEFICIARY_NAME)
  private String beneficiaryName;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_TYPE = "bankAccountType";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_TYPE)
  private String bankAccountType;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_TYPE_DESCRIPTION = "bankAccountTypeDescription";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_TYPE_DESCRIPTION)
  private String bankAccountTypeDescription;

  public static final String SERIALIZED_NAME_BANK_ACCOUNT_NUMBER = "bankAccountNumber";
  @SerializedName(SERIALIZED_NAME_BANK_ACCOUNT_NUMBER)
  private String bankAccountNumber;

  public static final String SERIALIZED_NAME_IBAN = "iban";
  @SerializedName(SERIALIZED_NAME_IBAN)
  private String iban;

  public static final String SERIALIZED_NAME_SWIFT_CODE = "swiftCode";
  @SerializedName(SERIALIZED_NAME_SWIFT_CODE)
  private String swiftCode;

  public static final String SERIALIZED_NAME_BANK_REQUIREMENT1 = "bankRequirement1";
  @SerializedName(SERIALIZED_NAME_BANK_REQUIREMENT1)
  private String bankRequirement1;

  public static final String SERIALIZED_NAME_BANK_REQUIREMENT2 = "bankRequirement2";
  @SerializedName(SERIALIZED_NAME_BANK_REQUIREMENT2)
  private String bankRequirement2;

  public static final String SERIALIZED_NAME_BANK_REQUIREMENT3 = "bankRequirement3";
  @SerializedName(SERIALIZED_NAME_BANK_REQUIREMENT3)
  private String bankRequirement3;

  public static final String SERIALIZED_NAME_DATE_MODIFIED = "dateModified";
  @SerializedName(SERIALIZED_NAME_DATE_MODIFIED)
  private OffsetDateTime dateModified;

  public static final String SERIALIZED_NAME_BANK_REQUEST_CODE1 = "bankRequestCode1";
  @SerializedName(SERIALIZED_NAME_BANK_REQUEST_CODE1)
  private String bankRequestCode1;

  public static final String SERIALIZED_NAME_BANK_REQUEST_LABEL1 = "bankRequestLabel1";
  @SerializedName(SERIALIZED_NAME_BANK_REQUEST_LABEL1)
  private String bankRequestLabel1;

  public static final String SERIALIZED_NAME_BANK_REQUEST_CODE2 = "bankRequestCode2";
  @SerializedName(SERIALIZED_NAME_BANK_REQUEST_CODE2)
  private String bankRequestCode2;

  public static final String SERIALIZED_NAME_BANK_REQUEST_LABEL2 = "bankRequestLabel2";
  @SerializedName(SERIALIZED_NAME_BANK_REQUEST_LABEL2)
  private String bankRequestLabel2;

  public static final String SERIALIZED_NAME_BANK_REQUEST_CODE3 = "bankRequestCode3";
  @SerializedName(SERIALIZED_NAME_BANK_REQUEST_CODE3)
  private String bankRequestCode3;

  public static final String SERIALIZED_NAME_BANK_REQUEST_LABEL3 = "bankRequestLabel3";
  @SerializedName(SERIALIZED_NAME_BANK_REQUEST_LABEL3)
  private String bankRequestLabel3;

  public static final String SERIALIZED_NAME_EMPLOYEE_COUNTRY = "employeeCountry";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_COUNTRY)
  private String employeeCountry;

  public EmployeeGlobalBanksModel() {
  }

  public EmployeeGlobalBanksModel bankId(String bankId) {
    
    
    
    
    this.bankId = bankId;
    return this;
  }

   /**
   * Get bankId
   * @return bankId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankId() {
    return bankId;
  }


  public void setBankId(String bankId) {
    
    
    
    this.bankId = bankId;
  }


  public EmployeeGlobalBanksModel employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public EmployeeGlobalBanksModel companyId(String companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Get companyId
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyId() {
    return companyId;
  }


  public void setCompanyId(String companyId) {
    
    
    
    this.companyId = companyId;
  }


  public EmployeeGlobalBanksModel employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public EmployeeGlobalBanksModel payGroup(String payGroup) {
    
    
    
    
    this.payGroup = payGroup;
    return this;
  }

   /**
   * Get payGroup
   * @return payGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayGroup() {
    return payGroup;
  }


  public void setPayGroup(String payGroup) {
    
    
    
    this.payGroup = payGroup;
  }


  public EmployeeGlobalBanksModel currencyCode(String currencyCode) {
    
    
    
    
    this.currencyCode = currencyCode;
    return this;
  }

   /**
   * Get currencyCode
   * @return currencyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCurrencyCode() {
    return currencyCode;
  }


  public void setCurrencyCode(String currencyCode) {
    
    
    
    this.currencyCode = currencyCode;
  }


  public EmployeeGlobalBanksModel fundingMethod(String fundingMethod) {
    
    
    
    
    this.fundingMethod = fundingMethod;
    return this;
  }

   /**
   * Get fundingMethod
   * @return fundingMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFundingMethod() {
    return fundingMethod;
  }


  public void setFundingMethod(String fundingMethod) {
    
    
    
    this.fundingMethod = fundingMethod;
  }


  public EmployeeGlobalBanksModel fundingMethodDescription(String fundingMethodDescription) {
    
    
    
    
    this.fundingMethodDescription = fundingMethodDescription;
    return this;
  }

   /**
   * Get fundingMethodDescription
   * @return fundingMethodDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFundingMethodDescription() {
    return fundingMethodDescription;
  }


  public void setFundingMethodDescription(String fundingMethodDescription) {
    
    
    
    this.fundingMethodDescription = fundingMethodDescription;
  }


  public EmployeeGlobalBanksModel addressLine1(String addressLine1) {
    
    
    
    
    this.addressLine1 = addressLine1;
    return this;
  }

   /**
   * Get addressLine1
   * @return addressLine1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddressLine1() {
    return addressLine1;
  }


  public void setAddressLine1(String addressLine1) {
    
    
    
    this.addressLine1 = addressLine1;
  }


  public EmployeeGlobalBanksModel addressLine2(String addressLine2) {
    
    
    
    
    this.addressLine2 = addressLine2;
    return this;
  }

   /**
   * Get addressLine2
   * @return addressLine2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddressLine2() {
    return addressLine2;
  }


  public void setAddressLine2(String addressLine2) {
    
    
    
    this.addressLine2 = addressLine2;
  }


  public EmployeeGlobalBanksModel addressLine3(String addressLine3) {
    
    
    
    
    this.addressLine3 = addressLine3;
    return this;
  }

   /**
   * Get addressLine3
   * @return addressLine3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAddressLine3() {
    return addressLine3;
  }


  public void setAddressLine3(String addressLine3) {
    
    
    
    this.addressLine3 = addressLine3;
  }


  public EmployeeGlobalBanksModel city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * Get city
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public EmployeeGlobalBanksModel state(String state) {
    
    
    
    
    this.state = state;
    return this;
  }

   /**
   * Get state
   * @return state
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getState() {
    return state;
  }


  public void setState(String state) {
    
    
    
    this.state = state;
  }


  public EmployeeGlobalBanksModel postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Get postalCode
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public EmployeeGlobalBanksModel country(String country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountry() {
    return country;
  }


  public void setCountry(String country) {
    
    
    
    this.country = country;
  }


  public EmployeeGlobalBanksModel bankName(String bankName) {
    
    
    
    
    this.bankName = bankName;
    return this;
  }

   /**
   * Get bankName
   * @return bankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankName() {
    return bankName;
  }


  public void setBankName(String bankName) {
    
    
    
    this.bankName = bankName;
  }


  public EmployeeGlobalBanksModel bankBranch(String bankBranch) {
    
    
    
    
    this.bankBranch = bankBranch;
    return this;
  }

   /**
   * Get bankBranch
   * @return bankBranch
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankBranch() {
    return bankBranch;
  }


  public void setBankBranch(String bankBranch) {
    
    
    
    this.bankBranch = bankBranch;
  }


  public EmployeeGlobalBanksModel bankCountryCode(String bankCountryCode) {
    
    
    
    
    this.bankCountryCode = bankCountryCode;
    return this;
  }

   /**
   * Get bankCountryCode
   * @return bankCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankCountryCode() {
    return bankCountryCode;
  }


  public void setBankCountryCode(String bankCountryCode) {
    
    
    
    this.bankCountryCode = bankCountryCode;
  }


  public EmployeeGlobalBanksModel beneficiaryName(String beneficiaryName) {
    
    
    
    
    this.beneficiaryName = beneficiaryName;
    return this;
  }

   /**
   * Get beneficiaryName
   * @return beneficiaryName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBeneficiaryName() {
    return beneficiaryName;
  }


  public void setBeneficiaryName(String beneficiaryName) {
    
    
    
    this.beneficiaryName = beneficiaryName;
  }


  public EmployeeGlobalBanksModel bankAccountType(String bankAccountType) {
    
    
    
    
    this.bankAccountType = bankAccountType;
    return this;
  }

   /**
   * Get bankAccountType
   * @return bankAccountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankAccountType() {
    return bankAccountType;
  }


  public void setBankAccountType(String bankAccountType) {
    
    
    
    this.bankAccountType = bankAccountType;
  }


  public EmployeeGlobalBanksModel bankAccountTypeDescription(String bankAccountTypeDescription) {
    
    
    
    
    this.bankAccountTypeDescription = bankAccountTypeDescription;
    return this;
  }

   /**
   * Get bankAccountTypeDescription
   * @return bankAccountTypeDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankAccountTypeDescription() {
    return bankAccountTypeDescription;
  }


  public void setBankAccountTypeDescription(String bankAccountTypeDescription) {
    
    
    
    this.bankAccountTypeDescription = bankAccountTypeDescription;
  }


  public EmployeeGlobalBanksModel bankAccountNumber(String bankAccountNumber) {
    
    
    
    
    this.bankAccountNumber = bankAccountNumber;
    return this;
  }

   /**
   * Get bankAccountNumber
   * @return bankAccountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankAccountNumber() {
    return bankAccountNumber;
  }


  public void setBankAccountNumber(String bankAccountNumber) {
    
    
    
    this.bankAccountNumber = bankAccountNumber;
  }


  public EmployeeGlobalBanksModel iban(String iban) {
    
    
    
    
    this.iban = iban;
    return this;
  }

   /**
   * Get iban
   * @return iban
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIban() {
    return iban;
  }


  public void setIban(String iban) {
    
    
    
    this.iban = iban;
  }


  public EmployeeGlobalBanksModel swiftCode(String swiftCode) {
    
    
    
    
    this.swiftCode = swiftCode;
    return this;
  }

   /**
   * Get swiftCode
   * @return swiftCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSwiftCode() {
    return swiftCode;
  }


  public void setSwiftCode(String swiftCode) {
    
    
    
    this.swiftCode = swiftCode;
  }


  public EmployeeGlobalBanksModel bankRequirement1(String bankRequirement1) {
    
    
    
    
    this.bankRequirement1 = bankRequirement1;
    return this;
  }

   /**
   * Get bankRequirement1
   * @return bankRequirement1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequirement1() {
    return bankRequirement1;
  }


  public void setBankRequirement1(String bankRequirement1) {
    
    
    
    this.bankRequirement1 = bankRequirement1;
  }


  public EmployeeGlobalBanksModel bankRequirement2(String bankRequirement2) {
    
    
    
    
    this.bankRequirement2 = bankRequirement2;
    return this;
  }

   /**
   * Get bankRequirement2
   * @return bankRequirement2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequirement2() {
    return bankRequirement2;
  }


  public void setBankRequirement2(String bankRequirement2) {
    
    
    
    this.bankRequirement2 = bankRequirement2;
  }


  public EmployeeGlobalBanksModel bankRequirement3(String bankRequirement3) {
    
    
    
    
    this.bankRequirement3 = bankRequirement3;
    return this;
  }

   /**
   * Get bankRequirement3
   * @return bankRequirement3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequirement3() {
    return bankRequirement3;
  }


  public void setBankRequirement3(String bankRequirement3) {
    
    
    
    this.bankRequirement3 = bankRequirement3;
  }


  public EmployeeGlobalBanksModel dateModified(OffsetDateTime dateModified) {
    
    
    
    
    this.dateModified = dateModified;
    return this;
  }

   /**
   * Get dateModified
   * @return dateModified
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateModified() {
    return dateModified;
  }


  public void setDateModified(OffsetDateTime dateModified) {
    
    
    
    this.dateModified = dateModified;
  }


  public EmployeeGlobalBanksModel bankRequestCode1(String bankRequestCode1) {
    
    
    
    
    this.bankRequestCode1 = bankRequestCode1;
    return this;
  }

   /**
   * Get bankRequestCode1
   * @return bankRequestCode1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequestCode1() {
    return bankRequestCode1;
  }


  public void setBankRequestCode1(String bankRequestCode1) {
    
    
    
    this.bankRequestCode1 = bankRequestCode1;
  }


  public EmployeeGlobalBanksModel bankRequestLabel1(String bankRequestLabel1) {
    
    
    
    
    this.bankRequestLabel1 = bankRequestLabel1;
    return this;
  }

   /**
   * Get bankRequestLabel1
   * @return bankRequestLabel1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequestLabel1() {
    return bankRequestLabel1;
  }


  public void setBankRequestLabel1(String bankRequestLabel1) {
    
    
    
    this.bankRequestLabel1 = bankRequestLabel1;
  }


  public EmployeeGlobalBanksModel bankRequestCode2(String bankRequestCode2) {
    
    
    
    
    this.bankRequestCode2 = bankRequestCode2;
    return this;
  }

   /**
   * Get bankRequestCode2
   * @return bankRequestCode2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequestCode2() {
    return bankRequestCode2;
  }


  public void setBankRequestCode2(String bankRequestCode2) {
    
    
    
    this.bankRequestCode2 = bankRequestCode2;
  }


  public EmployeeGlobalBanksModel bankRequestLabel2(String bankRequestLabel2) {
    
    
    
    
    this.bankRequestLabel2 = bankRequestLabel2;
    return this;
  }

   /**
   * Get bankRequestLabel2
   * @return bankRequestLabel2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequestLabel2() {
    return bankRequestLabel2;
  }


  public void setBankRequestLabel2(String bankRequestLabel2) {
    
    
    
    this.bankRequestLabel2 = bankRequestLabel2;
  }


  public EmployeeGlobalBanksModel bankRequestCode3(String bankRequestCode3) {
    
    
    
    
    this.bankRequestCode3 = bankRequestCode3;
    return this;
  }

   /**
   * Get bankRequestCode3
   * @return bankRequestCode3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequestCode3() {
    return bankRequestCode3;
  }


  public void setBankRequestCode3(String bankRequestCode3) {
    
    
    
    this.bankRequestCode3 = bankRequestCode3;
  }


  public EmployeeGlobalBanksModel bankRequestLabel3(String bankRequestLabel3) {
    
    
    
    
    this.bankRequestLabel3 = bankRequestLabel3;
    return this;
  }

   /**
   * Get bankRequestLabel3
   * @return bankRequestLabel3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getBankRequestLabel3() {
    return bankRequestLabel3;
  }


  public void setBankRequestLabel3(String bankRequestLabel3) {
    
    
    
    this.bankRequestLabel3 = bankRequestLabel3;
  }


  public EmployeeGlobalBanksModel employeeCountry(String employeeCountry) {
    
    
    
    
    this.employeeCountry = employeeCountry;
    return this;
  }

   /**
   * Get employeeCountry
   * @return employeeCountry
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeCountry() {
    return employeeCountry;
  }


  public void setEmployeeCountry(String employeeCountry) {
    
    
    
    this.employeeCountry = employeeCountry;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeGlobalBanksModel instance itself
   */
  public EmployeeGlobalBanksModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeGlobalBanksModel employeeGlobalBanksModel = (EmployeeGlobalBanksModel) o;
    return Objects.equals(this.bankId, employeeGlobalBanksModel.bankId) &&
        Objects.equals(this.employeeId, employeeGlobalBanksModel.employeeId) &&
        Objects.equals(this.companyId, employeeGlobalBanksModel.companyId) &&
        Objects.equals(this.employeeNumber, employeeGlobalBanksModel.employeeNumber) &&
        Objects.equals(this.payGroup, employeeGlobalBanksModel.payGroup) &&
        Objects.equals(this.currencyCode, employeeGlobalBanksModel.currencyCode) &&
        Objects.equals(this.fundingMethod, employeeGlobalBanksModel.fundingMethod) &&
        Objects.equals(this.fundingMethodDescription, employeeGlobalBanksModel.fundingMethodDescription) &&
        Objects.equals(this.addressLine1, employeeGlobalBanksModel.addressLine1) &&
        Objects.equals(this.addressLine2, employeeGlobalBanksModel.addressLine2) &&
        Objects.equals(this.addressLine3, employeeGlobalBanksModel.addressLine3) &&
        Objects.equals(this.city, employeeGlobalBanksModel.city) &&
        Objects.equals(this.state, employeeGlobalBanksModel.state) &&
        Objects.equals(this.postalCode, employeeGlobalBanksModel.postalCode) &&
        Objects.equals(this.country, employeeGlobalBanksModel.country) &&
        Objects.equals(this.bankName, employeeGlobalBanksModel.bankName) &&
        Objects.equals(this.bankBranch, employeeGlobalBanksModel.bankBranch) &&
        Objects.equals(this.bankCountryCode, employeeGlobalBanksModel.bankCountryCode) &&
        Objects.equals(this.beneficiaryName, employeeGlobalBanksModel.beneficiaryName) &&
        Objects.equals(this.bankAccountType, employeeGlobalBanksModel.bankAccountType) &&
        Objects.equals(this.bankAccountTypeDescription, employeeGlobalBanksModel.bankAccountTypeDescription) &&
        Objects.equals(this.bankAccountNumber, employeeGlobalBanksModel.bankAccountNumber) &&
        Objects.equals(this.iban, employeeGlobalBanksModel.iban) &&
        Objects.equals(this.swiftCode, employeeGlobalBanksModel.swiftCode) &&
        Objects.equals(this.bankRequirement1, employeeGlobalBanksModel.bankRequirement1) &&
        Objects.equals(this.bankRequirement2, employeeGlobalBanksModel.bankRequirement2) &&
        Objects.equals(this.bankRequirement3, employeeGlobalBanksModel.bankRequirement3) &&
        Objects.equals(this.dateModified, employeeGlobalBanksModel.dateModified) &&
        Objects.equals(this.bankRequestCode1, employeeGlobalBanksModel.bankRequestCode1) &&
        Objects.equals(this.bankRequestLabel1, employeeGlobalBanksModel.bankRequestLabel1) &&
        Objects.equals(this.bankRequestCode2, employeeGlobalBanksModel.bankRequestCode2) &&
        Objects.equals(this.bankRequestLabel2, employeeGlobalBanksModel.bankRequestLabel2) &&
        Objects.equals(this.bankRequestCode3, employeeGlobalBanksModel.bankRequestCode3) &&
        Objects.equals(this.bankRequestLabel3, employeeGlobalBanksModel.bankRequestLabel3) &&
        Objects.equals(this.employeeCountry, employeeGlobalBanksModel.employeeCountry)&&
        Objects.equals(this.additionalProperties, employeeGlobalBanksModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(bankId, employeeId, companyId, employeeNumber, payGroup, currencyCode, fundingMethod, fundingMethodDescription, addressLine1, addressLine2, addressLine3, city, state, postalCode, country, bankName, bankBranch, bankCountryCode, beneficiaryName, bankAccountType, bankAccountTypeDescription, bankAccountNumber, iban, swiftCode, bankRequirement1, bankRequirement2, bankRequirement3, dateModified, bankRequestCode1, bankRequestLabel1, bankRequestCode2, bankRequestLabel2, bankRequestCode3, bankRequestLabel3, employeeCountry, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeGlobalBanksModel {\n");
    sb.append("    bankId: ").append(toIndentedString(bankId)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    payGroup: ").append(toIndentedString(payGroup)).append("\n");
    sb.append("    currencyCode: ").append(toIndentedString(currencyCode)).append("\n");
    sb.append("    fundingMethod: ").append(toIndentedString(fundingMethod)).append("\n");
    sb.append("    fundingMethodDescription: ").append(toIndentedString(fundingMethodDescription)).append("\n");
    sb.append("    addressLine1: ").append(toIndentedString(addressLine1)).append("\n");
    sb.append("    addressLine2: ").append(toIndentedString(addressLine2)).append("\n");
    sb.append("    addressLine3: ").append(toIndentedString(addressLine3)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    state: ").append(toIndentedString(state)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    bankName: ").append(toIndentedString(bankName)).append("\n");
    sb.append("    bankBranch: ").append(toIndentedString(bankBranch)).append("\n");
    sb.append("    bankCountryCode: ").append(toIndentedString(bankCountryCode)).append("\n");
    sb.append("    beneficiaryName: ").append(toIndentedString(beneficiaryName)).append("\n");
    sb.append("    bankAccountType: ").append(toIndentedString(bankAccountType)).append("\n");
    sb.append("    bankAccountTypeDescription: ").append(toIndentedString(bankAccountTypeDescription)).append("\n");
    sb.append("    bankAccountNumber: ").append(toIndentedString(bankAccountNumber)).append("\n");
    sb.append("    iban: ").append(toIndentedString(iban)).append("\n");
    sb.append("    swiftCode: ").append(toIndentedString(swiftCode)).append("\n");
    sb.append("    bankRequirement1: ").append(toIndentedString(bankRequirement1)).append("\n");
    sb.append("    bankRequirement2: ").append(toIndentedString(bankRequirement2)).append("\n");
    sb.append("    bankRequirement3: ").append(toIndentedString(bankRequirement3)).append("\n");
    sb.append("    dateModified: ").append(toIndentedString(dateModified)).append("\n");
    sb.append("    bankRequestCode1: ").append(toIndentedString(bankRequestCode1)).append("\n");
    sb.append("    bankRequestLabel1: ").append(toIndentedString(bankRequestLabel1)).append("\n");
    sb.append("    bankRequestCode2: ").append(toIndentedString(bankRequestCode2)).append("\n");
    sb.append("    bankRequestLabel2: ").append(toIndentedString(bankRequestLabel2)).append("\n");
    sb.append("    bankRequestCode3: ").append(toIndentedString(bankRequestCode3)).append("\n");
    sb.append("    bankRequestLabel3: ").append(toIndentedString(bankRequestLabel3)).append("\n");
    sb.append("    employeeCountry: ").append(toIndentedString(employeeCountry)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("bankId");
    openapiFields.add("employeeId");
    openapiFields.add("companyId");
    openapiFields.add("employeeNumber");
    openapiFields.add("payGroup");
    openapiFields.add("currencyCode");
    openapiFields.add("fundingMethod");
    openapiFields.add("fundingMethodDescription");
    openapiFields.add("addressLine1");
    openapiFields.add("addressLine2");
    openapiFields.add("addressLine3");
    openapiFields.add("city");
    openapiFields.add("state");
    openapiFields.add("postalCode");
    openapiFields.add("country");
    openapiFields.add("bankName");
    openapiFields.add("bankBranch");
    openapiFields.add("bankCountryCode");
    openapiFields.add("beneficiaryName");
    openapiFields.add("bankAccountType");
    openapiFields.add("bankAccountTypeDescription");
    openapiFields.add("bankAccountNumber");
    openapiFields.add("iban");
    openapiFields.add("swiftCode");
    openapiFields.add("bankRequirement1");
    openapiFields.add("bankRequirement2");
    openapiFields.add("bankRequirement3");
    openapiFields.add("dateModified");
    openapiFields.add("bankRequestCode1");
    openapiFields.add("bankRequestLabel1");
    openapiFields.add("bankRequestCode2");
    openapiFields.add("bankRequestLabel2");
    openapiFields.add("bankRequestCode3");
    openapiFields.add("bankRequestLabel3");
    openapiFields.add("employeeCountry");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeGlobalBanksModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeGlobalBanksModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeGlobalBanksModel is not found in the empty JSON string", EmployeeGlobalBanksModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("bankId") != null && !jsonObj.get("bankId").isJsonNull()) && !jsonObj.get("bankId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankId").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("payGroup") != null && !jsonObj.get("payGroup").isJsonNull()) && !jsonObj.get("payGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGroup").toString()));
      }
      if ((jsonObj.get("currencyCode") != null && !jsonObj.get("currencyCode").isJsonNull()) && !jsonObj.get("currencyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `currencyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("currencyCode").toString()));
      }
      if ((jsonObj.get("fundingMethod") != null && !jsonObj.get("fundingMethod").isJsonNull()) && !jsonObj.get("fundingMethod").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingMethod` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingMethod").toString()));
      }
      if ((jsonObj.get("fundingMethodDescription") != null && !jsonObj.get("fundingMethodDescription").isJsonNull()) && !jsonObj.get("fundingMethodDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fundingMethodDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fundingMethodDescription").toString()));
      }
      if ((jsonObj.get("addressLine1") != null && !jsonObj.get("addressLine1").isJsonNull()) && !jsonObj.get("addressLine1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine1").toString()));
      }
      if ((jsonObj.get("addressLine2") != null && !jsonObj.get("addressLine2").isJsonNull()) && !jsonObj.get("addressLine2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine2").toString()));
      }
      if ((jsonObj.get("addressLine3") != null && !jsonObj.get("addressLine3").isJsonNull()) && !jsonObj.get("addressLine3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `addressLine3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("addressLine3").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("state") != null && !jsonObj.get("state").isJsonNull()) && !jsonObj.get("state").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `state` to be a primitive type in the JSON string but got `%s`", jsonObj.get("state").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) && !jsonObj.get("country").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `country` to be a primitive type in the JSON string but got `%s`", jsonObj.get("country").toString()));
      }
      if ((jsonObj.get("bankName") != null && !jsonObj.get("bankName").isJsonNull()) && !jsonObj.get("bankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankName").toString()));
      }
      if ((jsonObj.get("bankBranch") != null && !jsonObj.get("bankBranch").isJsonNull()) && !jsonObj.get("bankBranch").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankBranch` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankBranch").toString()));
      }
      if ((jsonObj.get("bankCountryCode") != null && !jsonObj.get("bankCountryCode").isJsonNull()) && !jsonObj.get("bankCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankCountryCode").toString()));
      }
      if ((jsonObj.get("beneficiaryName") != null && !jsonObj.get("beneficiaryName").isJsonNull()) && !jsonObj.get("beneficiaryName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `beneficiaryName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("beneficiaryName").toString()));
      }
      if ((jsonObj.get("bankAccountType") != null && !jsonObj.get("bankAccountType").isJsonNull()) && !jsonObj.get("bankAccountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountType").toString()));
      }
      if ((jsonObj.get("bankAccountTypeDescription") != null && !jsonObj.get("bankAccountTypeDescription").isJsonNull()) && !jsonObj.get("bankAccountTypeDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountTypeDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountTypeDescription").toString()));
      }
      if ((jsonObj.get("bankAccountNumber") != null && !jsonObj.get("bankAccountNumber").isJsonNull()) && !jsonObj.get("bankAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankAccountNumber").toString()));
      }
      if ((jsonObj.get("iban") != null && !jsonObj.get("iban").isJsonNull()) && !jsonObj.get("iban").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `iban` to be a primitive type in the JSON string but got `%s`", jsonObj.get("iban").toString()));
      }
      if ((jsonObj.get("swiftCode") != null && !jsonObj.get("swiftCode").isJsonNull()) && !jsonObj.get("swiftCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `swiftCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("swiftCode").toString()));
      }
      if ((jsonObj.get("bankRequirement1") != null && !jsonObj.get("bankRequirement1").isJsonNull()) && !jsonObj.get("bankRequirement1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequirement1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequirement1").toString()));
      }
      if ((jsonObj.get("bankRequirement2") != null && !jsonObj.get("bankRequirement2").isJsonNull()) && !jsonObj.get("bankRequirement2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequirement2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequirement2").toString()));
      }
      if ((jsonObj.get("bankRequirement3") != null && !jsonObj.get("bankRequirement3").isJsonNull()) && !jsonObj.get("bankRequirement3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequirement3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequirement3").toString()));
      }
      if ((jsonObj.get("bankRequestCode1") != null && !jsonObj.get("bankRequestCode1").isJsonNull()) && !jsonObj.get("bankRequestCode1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequestCode1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequestCode1").toString()));
      }
      if ((jsonObj.get("bankRequestLabel1") != null && !jsonObj.get("bankRequestLabel1").isJsonNull()) && !jsonObj.get("bankRequestLabel1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequestLabel1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequestLabel1").toString()));
      }
      if ((jsonObj.get("bankRequestCode2") != null && !jsonObj.get("bankRequestCode2").isJsonNull()) && !jsonObj.get("bankRequestCode2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequestCode2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequestCode2").toString()));
      }
      if ((jsonObj.get("bankRequestLabel2") != null && !jsonObj.get("bankRequestLabel2").isJsonNull()) && !jsonObj.get("bankRequestLabel2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequestLabel2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequestLabel2").toString()));
      }
      if ((jsonObj.get("bankRequestCode3") != null && !jsonObj.get("bankRequestCode3").isJsonNull()) && !jsonObj.get("bankRequestCode3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequestCode3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequestCode3").toString()));
      }
      if ((jsonObj.get("bankRequestLabel3") != null && !jsonObj.get("bankRequestLabel3").isJsonNull()) && !jsonObj.get("bankRequestLabel3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `bankRequestLabel3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("bankRequestLabel3").toString()));
      }
      if ((jsonObj.get("employeeCountry") != null && !jsonObj.get("employeeCountry").isJsonNull()) && !jsonObj.get("employeeCountry").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeCountry` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeCountry").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeGlobalBanksModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeGlobalBanksModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeGlobalBanksModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeGlobalBanksModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeGlobalBanksModel>() {
           @Override
           public void write(JsonWriter out, EmployeeGlobalBanksModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeGlobalBanksModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeGlobalBanksModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeGlobalBanksModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeGlobalBanksModel
  * @throws IOException if the JSON string is invalid with respect to EmployeeGlobalBanksModel
  */
  public static EmployeeGlobalBanksModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeGlobalBanksModel.class);
  }

 /**
  * Convert an instance of EmployeeGlobalBanksModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

