/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeMultipleJobs
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeMultipleJobs {
  public static final String SERIALIZED_NAME_ANNUAL_PAY_RATE = "annualPayRate";
  @SerializedName(SERIALIZED_NAME_ANNUAL_PAY_RATE)
  private Double annualPayRate;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_DATE_IN_JOB = "dateInJob";
  @SerializedName(SERIALIZED_NAME_DATE_IN_JOB)
  private OffsetDateTime dateInJob;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_HOURLY_PAY_RATE = "hourlyPayRate";
  @SerializedName(SERIALIZED_NAME_HOURLY_PAY_RATE)
  private Double hourlyPayRate;

  public static final String SERIALIZED_NAME_IS_PRIMARY_JOB = "isPrimaryJob";
  @SerializedName(SERIALIZED_NAME_IS_PRIMARY_JOB)
  private Boolean isPrimaryJob;

  public static final String SERIALIZED_NAME_JOB_CODE = "jobCode";
  @SerializedName(SERIALIZED_NAME_JOB_CODE)
  private String jobCode;

  public static final String SERIALIZED_NAME_JOB_IS_IN_ACTIVE = "jobIsInActive";
  @SerializedName(SERIALIZED_NAME_JOB_IS_IN_ACTIVE)
  private Boolean jobIsInActive;

  public static final String SERIALIZED_NAME_OTHER_RATE1 = "otherRate1";
  @SerializedName(SERIALIZED_NAME_OTHER_RATE1)
  private Double otherRate1;

  public static final String SERIALIZED_NAME_OTHER_RATE2 = "otherRate2";
  @SerializedName(SERIALIZED_NAME_OTHER_RATE2)
  private Double otherRate2;

  public static final String SERIALIZED_NAME_OTHER_RATE3 = "otherRate3";
  @SerializedName(SERIALIZED_NAME_OTHER_RATE3)
  private Double otherRate3;

  public static final String SERIALIZED_NAME_OTHER_RATE4 = "otherRate4";
  @SerializedName(SERIALIZED_NAME_OTHER_RATE4)
  private Double otherRate4;

  public static final String SERIALIZED_NAME_PIECE_PAY_RATE = "piecePayRate";
  @SerializedName(SERIALIZED_NAME_PIECE_PAY_RATE)
  private Double piecePayRate;

  public EmployeeMultipleJobs() {
  }

  public EmployeeMultipleJobs annualPayRate(Double annualPayRate) {
    
    
    
    
    this.annualPayRate = annualPayRate;
    return this;
  }

  public EmployeeMultipleJobs annualPayRate(Integer annualPayRate) {
    
    
    
    
    this.annualPayRate = annualPayRate.doubleValue();
    return this;
  }

   /**
   * Get annualPayRate
   * @return annualPayRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAnnualPayRate() {
    return annualPayRate;
  }


  public void setAnnualPayRate(Double annualPayRate) {
    
    
    
    this.annualPayRate = annualPayRate;
  }


  public EmployeeMultipleJobs companyId(String companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Get companyId
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyId() {
    return companyId;
  }


  public void setCompanyId(String companyId) {
    
    
    
    this.companyId = companyId;
  }


  public EmployeeMultipleJobs dateInJob(OffsetDateTime dateInJob) {
    
    
    
    
    this.dateInJob = dateInJob;
    return this;
  }

   /**
   * Get dateInJob
   * @return dateInJob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateInJob() {
    return dateInJob;
  }


  public void setDateInJob(OffsetDateTime dateInJob) {
    
    
    
    this.dateInJob = dateInJob;
  }


  public EmployeeMultipleJobs employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public EmployeeMultipleJobs hourlyPayRate(Double hourlyPayRate) {
    
    
    
    
    this.hourlyPayRate = hourlyPayRate;
    return this;
  }

  public EmployeeMultipleJobs hourlyPayRate(Integer hourlyPayRate) {
    
    
    
    
    this.hourlyPayRate = hourlyPayRate.doubleValue();
    return this;
  }

   /**
   * Get hourlyPayRate
   * @return hourlyPayRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getHourlyPayRate() {
    return hourlyPayRate;
  }


  public void setHourlyPayRate(Double hourlyPayRate) {
    
    
    
    this.hourlyPayRate = hourlyPayRate;
  }


  public EmployeeMultipleJobs isPrimaryJob(Boolean isPrimaryJob) {
    
    
    
    
    this.isPrimaryJob = isPrimaryJob;
    return this;
  }

   /**
   * Get isPrimaryJob
   * @return isPrimaryJob
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getIsPrimaryJob() {
    return isPrimaryJob;
  }


  public void setIsPrimaryJob(Boolean isPrimaryJob) {
    
    
    
    this.isPrimaryJob = isPrimaryJob;
  }


  public EmployeeMultipleJobs jobCode(String jobCode) {
    
    
    
    
    this.jobCode = jobCode;
    return this;
  }

   /**
   * Get jobCode
   * @return jobCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobCode() {
    return jobCode;
  }


  public void setJobCode(String jobCode) {
    
    
    
    this.jobCode = jobCode;
  }


  public EmployeeMultipleJobs jobIsInActive(Boolean jobIsInActive) {
    
    
    
    
    this.jobIsInActive = jobIsInActive;
    return this;
  }

   /**
   * Get jobIsInActive
   * @return jobIsInActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getJobIsInActive() {
    return jobIsInActive;
  }


  public void setJobIsInActive(Boolean jobIsInActive) {
    
    
    
    this.jobIsInActive = jobIsInActive;
  }


  public EmployeeMultipleJobs otherRate1(Double otherRate1) {
    
    
    
    
    this.otherRate1 = otherRate1;
    return this;
  }

  public EmployeeMultipleJobs otherRate1(Integer otherRate1) {
    
    
    
    
    this.otherRate1 = otherRate1.doubleValue();
    return this;
  }

   /**
   * Get otherRate1
   * @return otherRate1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getOtherRate1() {
    return otherRate1;
  }


  public void setOtherRate1(Double otherRate1) {
    
    
    
    this.otherRate1 = otherRate1;
  }


  public EmployeeMultipleJobs otherRate2(Double otherRate2) {
    
    
    
    
    this.otherRate2 = otherRate2;
    return this;
  }

  public EmployeeMultipleJobs otherRate2(Integer otherRate2) {
    
    
    
    
    this.otherRate2 = otherRate2.doubleValue();
    return this;
  }

   /**
   * Get otherRate2
   * @return otherRate2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getOtherRate2() {
    return otherRate2;
  }


  public void setOtherRate2(Double otherRate2) {
    
    
    
    this.otherRate2 = otherRate2;
  }


  public EmployeeMultipleJobs otherRate3(Double otherRate3) {
    
    
    
    
    this.otherRate3 = otherRate3;
    return this;
  }

  public EmployeeMultipleJobs otherRate3(Integer otherRate3) {
    
    
    
    
    this.otherRate3 = otherRate3.doubleValue();
    return this;
  }

   /**
   * Get otherRate3
   * @return otherRate3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getOtherRate3() {
    return otherRate3;
  }


  public void setOtherRate3(Double otherRate3) {
    
    
    
    this.otherRate3 = otherRate3;
  }


  public EmployeeMultipleJobs otherRate4(Double otherRate4) {
    
    
    
    
    this.otherRate4 = otherRate4;
    return this;
  }

  public EmployeeMultipleJobs otherRate4(Integer otherRate4) {
    
    
    
    
    this.otherRate4 = otherRate4.doubleValue();
    return this;
  }

   /**
   * Get otherRate4
   * @return otherRate4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getOtherRate4() {
    return otherRate4;
  }


  public void setOtherRate4(Double otherRate4) {
    
    
    
    this.otherRate4 = otherRate4;
  }


  public EmployeeMultipleJobs piecePayRate(Double piecePayRate) {
    
    
    
    
    this.piecePayRate = piecePayRate;
    return this;
  }

  public EmployeeMultipleJobs piecePayRate(Integer piecePayRate) {
    
    
    
    
    this.piecePayRate = piecePayRate.doubleValue();
    return this;
  }

   /**
   * Get piecePayRate
   * @return piecePayRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getPiecePayRate() {
    return piecePayRate;
  }


  public void setPiecePayRate(Double piecePayRate) {
    
    
    
    this.piecePayRate = piecePayRate;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeMultipleJobs instance itself
   */
  public EmployeeMultipleJobs putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeMultipleJobs employeeMultipleJobs = (EmployeeMultipleJobs) o;
    return Objects.equals(this.annualPayRate, employeeMultipleJobs.annualPayRate) &&
        Objects.equals(this.companyId, employeeMultipleJobs.companyId) &&
        Objects.equals(this.dateInJob, employeeMultipleJobs.dateInJob) &&
        Objects.equals(this.employeeId, employeeMultipleJobs.employeeId) &&
        Objects.equals(this.hourlyPayRate, employeeMultipleJobs.hourlyPayRate) &&
        Objects.equals(this.isPrimaryJob, employeeMultipleJobs.isPrimaryJob) &&
        Objects.equals(this.jobCode, employeeMultipleJobs.jobCode) &&
        Objects.equals(this.jobIsInActive, employeeMultipleJobs.jobIsInActive) &&
        Objects.equals(this.otherRate1, employeeMultipleJobs.otherRate1) &&
        Objects.equals(this.otherRate2, employeeMultipleJobs.otherRate2) &&
        Objects.equals(this.otherRate3, employeeMultipleJobs.otherRate3) &&
        Objects.equals(this.otherRate4, employeeMultipleJobs.otherRate4) &&
        Objects.equals(this.piecePayRate, employeeMultipleJobs.piecePayRate)&&
        Objects.equals(this.additionalProperties, employeeMultipleJobs.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(annualPayRate, companyId, dateInJob, employeeId, hourlyPayRate, isPrimaryJob, jobCode, jobIsInActive, otherRate1, otherRate2, otherRate3, otherRate4, piecePayRate, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeMultipleJobs {\n");
    sb.append("    annualPayRate: ").append(toIndentedString(annualPayRate)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    dateInJob: ").append(toIndentedString(dateInJob)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    hourlyPayRate: ").append(toIndentedString(hourlyPayRate)).append("\n");
    sb.append("    isPrimaryJob: ").append(toIndentedString(isPrimaryJob)).append("\n");
    sb.append("    jobCode: ").append(toIndentedString(jobCode)).append("\n");
    sb.append("    jobIsInActive: ").append(toIndentedString(jobIsInActive)).append("\n");
    sb.append("    otherRate1: ").append(toIndentedString(otherRate1)).append("\n");
    sb.append("    otherRate2: ").append(toIndentedString(otherRate2)).append("\n");
    sb.append("    otherRate3: ").append(toIndentedString(otherRate3)).append("\n");
    sb.append("    otherRate4: ").append(toIndentedString(otherRate4)).append("\n");
    sb.append("    piecePayRate: ").append(toIndentedString(piecePayRate)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("annualPayRate");
    openapiFields.add("companyId");
    openapiFields.add("dateInJob");
    openapiFields.add("employeeId");
    openapiFields.add("hourlyPayRate");
    openapiFields.add("isPrimaryJob");
    openapiFields.add("jobCode");
    openapiFields.add("jobIsInActive");
    openapiFields.add("otherRate1");
    openapiFields.add("otherRate2");
    openapiFields.add("otherRate3");
    openapiFields.add("otherRate4");
    openapiFields.add("piecePayRate");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeMultipleJobs
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeMultipleJobs.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeMultipleJobs is not found in the empty JSON string", EmployeeMultipleJobs.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("jobCode") != null && !jsonObj.get("jobCode").isJsonNull()) && !jsonObj.get("jobCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobCode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeMultipleJobs.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeMultipleJobs' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeMultipleJobs> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeMultipleJobs.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeMultipleJobs>() {
           @Override
           public void write(JsonWriter out, EmployeeMultipleJobs value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeMultipleJobs read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeMultipleJobs instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeMultipleJobs given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeMultipleJobs
  * @throws IOException if the JSON string is invalid with respect to EmployeeMultipleJobs
  */
  public static EmployeeMultipleJobs fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeMultipleJobs.class);
  }

 /**
  * Convert an instance of EmployeeMultipleJobs to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

