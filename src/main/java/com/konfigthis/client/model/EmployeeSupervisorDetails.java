/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeSupervisorDetails
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeSupervisorDetails {
  public static final String SERIALIZED_NAME_EMPLOYEE_I_D = "employeeID";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_I_D)
  private String employeeID;

  public static final String SERIALIZED_NAME_COMPANY_I_D = "companyID";
  @SerializedName(SERIALIZED_NAME_COMPANY_I_D)
  private String companyID;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_SUPERVISOR_EMPLOYEE_I_D = "supervisorEmployeeID";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_EMPLOYEE_I_D)
  private String supervisorEmployeeID;

  public static final String SERIALIZED_NAME_SUPERVISOR_FIRST_NAME = "supervisorFirstName";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_FIRST_NAME)
  private String supervisorFirstName;

  public static final String SERIALIZED_NAME_SUPERVISOR_LAST_NAME = "supervisorLastName";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_LAST_NAME)
  private String supervisorLastName;

  public static final String SERIALIZED_NAME_SUPERVISOR_EMPLOYEE_NUMBER = "supervisorEmployeeNumber";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_EMPLOYEE_NUMBER)
  private String supervisorEmployeeNumber;

  public static final String SERIALIZED_NAME_SUPERVISOR_COMPANY_I_D = "supervisorCompanyID";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_COMPANY_I_D)
  private String supervisorCompanyID;

  public static final String SERIALIZED_NAME_SUPERVISOR_COMPANY_CODE = "supervisorCompanyCode";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_COMPANY_CODE)
  private String supervisorCompanyCode;

  public static final String SERIALIZED_NAME_SUPERVISOR_STATUS_CODE = "supervisorStatusCode";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_STATUS_CODE)
  private String supervisorStatusCode;

  public static final String SERIALIZED_NAME_SUPERVISOR_JOB_CODE = "supervisorJobCode";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_JOB_CODE)
  private String supervisorJobCode;

  public static final String SERIALIZED_NAME_SUPERVISOR_POSITION_CODE = "supervisorPositionCode";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_POSITION_CODE)
  private String supervisorPositionCode;

  public static final String SERIALIZED_NAME_SUPERVISOR_EMAIL = "supervisorEmail";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_EMAIL)
  private String supervisorEmail;

  public static final String SERIALIZED_NAME_SUPERVISOR_WORK_PHONE = "supervisorWorkPhone";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_WORK_PHONE)
  private String supervisorWorkPhone;

  public static final String SERIALIZED_NAME_SUPERVISOR_PERSON_ID = "supervisorPersonId";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_PERSON_ID)
  private String supervisorPersonId;

  public EmployeeSupervisorDetails() {
  }

  public EmployeeSupervisorDetails employeeID(String employeeID) {
    
    
    
    
    this.employeeID = employeeID;
    return this;
  }

   /**
   * Get employeeID
   * @return employeeID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeID() {
    return employeeID;
  }


  public void setEmployeeID(String employeeID) {
    
    
    
    this.employeeID = employeeID;
  }


  public EmployeeSupervisorDetails companyID(String companyID) {
    
    
    
    
    this.companyID = companyID;
    return this;
  }

   /**
   * Get companyID
   * @return companyID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyID() {
    return companyID;
  }


  public void setCompanyID(String companyID) {
    
    
    
    this.companyID = companyID;
  }


  public EmployeeSupervisorDetails employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public EmployeeSupervisorDetails supervisorEmployeeID(String supervisorEmployeeID) {
    
    
    
    
    this.supervisorEmployeeID = supervisorEmployeeID;
    return this;
  }

   /**
   * Get supervisorEmployeeID
   * @return supervisorEmployeeID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorEmployeeID() {
    return supervisorEmployeeID;
  }


  public void setSupervisorEmployeeID(String supervisorEmployeeID) {
    
    
    
    this.supervisorEmployeeID = supervisorEmployeeID;
  }


  public EmployeeSupervisorDetails supervisorFirstName(String supervisorFirstName) {
    
    
    
    
    this.supervisorFirstName = supervisorFirstName;
    return this;
  }

   /**
   * Get supervisorFirstName
   * @return supervisorFirstName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorFirstName() {
    return supervisorFirstName;
  }


  public void setSupervisorFirstName(String supervisorFirstName) {
    
    
    
    this.supervisorFirstName = supervisorFirstName;
  }


  public EmployeeSupervisorDetails supervisorLastName(String supervisorLastName) {
    
    
    
    
    this.supervisorLastName = supervisorLastName;
    return this;
  }

   /**
   * Get supervisorLastName
   * @return supervisorLastName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorLastName() {
    return supervisorLastName;
  }


  public void setSupervisorLastName(String supervisorLastName) {
    
    
    
    this.supervisorLastName = supervisorLastName;
  }


  public EmployeeSupervisorDetails supervisorEmployeeNumber(String supervisorEmployeeNumber) {
    
    
    
    
    this.supervisorEmployeeNumber = supervisorEmployeeNumber;
    return this;
  }

   /**
   * Get supervisorEmployeeNumber
   * @return supervisorEmployeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorEmployeeNumber() {
    return supervisorEmployeeNumber;
  }


  public void setSupervisorEmployeeNumber(String supervisorEmployeeNumber) {
    
    
    
    this.supervisorEmployeeNumber = supervisorEmployeeNumber;
  }


  public EmployeeSupervisorDetails supervisorCompanyID(String supervisorCompanyID) {
    
    
    
    
    this.supervisorCompanyID = supervisorCompanyID;
    return this;
  }

   /**
   * Get supervisorCompanyID
   * @return supervisorCompanyID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorCompanyID() {
    return supervisorCompanyID;
  }


  public void setSupervisorCompanyID(String supervisorCompanyID) {
    
    
    
    this.supervisorCompanyID = supervisorCompanyID;
  }


  public EmployeeSupervisorDetails supervisorCompanyCode(String supervisorCompanyCode) {
    
    
    
    
    this.supervisorCompanyCode = supervisorCompanyCode;
    return this;
  }

   /**
   * Get supervisorCompanyCode
   * @return supervisorCompanyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorCompanyCode() {
    return supervisorCompanyCode;
  }


  public void setSupervisorCompanyCode(String supervisorCompanyCode) {
    
    
    
    this.supervisorCompanyCode = supervisorCompanyCode;
  }


  public EmployeeSupervisorDetails supervisorStatusCode(String supervisorStatusCode) {
    
    
    
    
    this.supervisorStatusCode = supervisorStatusCode;
    return this;
  }

   /**
   * Get supervisorStatusCode
   * @return supervisorStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorStatusCode() {
    return supervisorStatusCode;
  }


  public void setSupervisorStatusCode(String supervisorStatusCode) {
    
    
    
    this.supervisorStatusCode = supervisorStatusCode;
  }


  public EmployeeSupervisorDetails supervisorJobCode(String supervisorJobCode) {
    
    
    
    
    this.supervisorJobCode = supervisorJobCode;
    return this;
  }

   /**
   * Get supervisorJobCode
   * @return supervisorJobCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorJobCode() {
    return supervisorJobCode;
  }


  public void setSupervisorJobCode(String supervisorJobCode) {
    
    
    
    this.supervisorJobCode = supervisorJobCode;
  }


  public EmployeeSupervisorDetails supervisorPositionCode(String supervisorPositionCode) {
    
    
    
    
    this.supervisorPositionCode = supervisorPositionCode;
    return this;
  }

   /**
   * Get supervisorPositionCode
   * @return supervisorPositionCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorPositionCode() {
    return supervisorPositionCode;
  }


  public void setSupervisorPositionCode(String supervisorPositionCode) {
    
    
    
    this.supervisorPositionCode = supervisorPositionCode;
  }


  public EmployeeSupervisorDetails supervisorEmail(String supervisorEmail) {
    
    
    
    
    this.supervisorEmail = supervisorEmail;
    return this;
  }

   /**
   * Get supervisorEmail
   * @return supervisorEmail
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorEmail() {
    return supervisorEmail;
  }


  public void setSupervisorEmail(String supervisorEmail) {
    
    
    
    this.supervisorEmail = supervisorEmail;
  }


  public EmployeeSupervisorDetails supervisorWorkPhone(String supervisorWorkPhone) {
    
    
    
    
    this.supervisorWorkPhone = supervisorWorkPhone;
    return this;
  }

   /**
   * Get supervisorWorkPhone
   * @return supervisorWorkPhone
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorWorkPhone() {
    return supervisorWorkPhone;
  }


  public void setSupervisorWorkPhone(String supervisorWorkPhone) {
    
    
    
    this.supervisorWorkPhone = supervisorWorkPhone;
  }


  public EmployeeSupervisorDetails supervisorPersonId(String supervisorPersonId) {
    
    
    
    
    this.supervisorPersonId = supervisorPersonId;
    return this;
  }

   /**
   * Get supervisorPersonId
   * @return supervisorPersonId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorPersonId() {
    return supervisorPersonId;
  }


  public void setSupervisorPersonId(String supervisorPersonId) {
    
    
    
    this.supervisorPersonId = supervisorPersonId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeSupervisorDetails instance itself
   */
  public EmployeeSupervisorDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeSupervisorDetails employeeSupervisorDetails = (EmployeeSupervisorDetails) o;
    return Objects.equals(this.employeeID, employeeSupervisorDetails.employeeID) &&
        Objects.equals(this.companyID, employeeSupervisorDetails.companyID) &&
        Objects.equals(this.employeeNumber, employeeSupervisorDetails.employeeNumber) &&
        Objects.equals(this.supervisorEmployeeID, employeeSupervisorDetails.supervisorEmployeeID) &&
        Objects.equals(this.supervisorFirstName, employeeSupervisorDetails.supervisorFirstName) &&
        Objects.equals(this.supervisorLastName, employeeSupervisorDetails.supervisorLastName) &&
        Objects.equals(this.supervisorEmployeeNumber, employeeSupervisorDetails.supervisorEmployeeNumber) &&
        Objects.equals(this.supervisorCompanyID, employeeSupervisorDetails.supervisorCompanyID) &&
        Objects.equals(this.supervisorCompanyCode, employeeSupervisorDetails.supervisorCompanyCode) &&
        Objects.equals(this.supervisorStatusCode, employeeSupervisorDetails.supervisorStatusCode) &&
        Objects.equals(this.supervisorJobCode, employeeSupervisorDetails.supervisorJobCode) &&
        Objects.equals(this.supervisorPositionCode, employeeSupervisorDetails.supervisorPositionCode) &&
        Objects.equals(this.supervisorEmail, employeeSupervisorDetails.supervisorEmail) &&
        Objects.equals(this.supervisorWorkPhone, employeeSupervisorDetails.supervisorWorkPhone) &&
        Objects.equals(this.supervisorPersonId, employeeSupervisorDetails.supervisorPersonId)&&
        Objects.equals(this.additionalProperties, employeeSupervisorDetails.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeID, companyID, employeeNumber, supervisorEmployeeID, supervisorFirstName, supervisorLastName, supervisorEmployeeNumber, supervisorCompanyID, supervisorCompanyCode, supervisorStatusCode, supervisorJobCode, supervisorPositionCode, supervisorEmail, supervisorWorkPhone, supervisorPersonId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeSupervisorDetails {\n");
    sb.append("    employeeID: ").append(toIndentedString(employeeID)).append("\n");
    sb.append("    companyID: ").append(toIndentedString(companyID)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    supervisorEmployeeID: ").append(toIndentedString(supervisorEmployeeID)).append("\n");
    sb.append("    supervisorFirstName: ").append(toIndentedString(supervisorFirstName)).append("\n");
    sb.append("    supervisorLastName: ").append(toIndentedString(supervisorLastName)).append("\n");
    sb.append("    supervisorEmployeeNumber: ").append(toIndentedString(supervisorEmployeeNumber)).append("\n");
    sb.append("    supervisorCompanyID: ").append(toIndentedString(supervisorCompanyID)).append("\n");
    sb.append("    supervisorCompanyCode: ").append(toIndentedString(supervisorCompanyCode)).append("\n");
    sb.append("    supervisorStatusCode: ").append(toIndentedString(supervisorStatusCode)).append("\n");
    sb.append("    supervisorJobCode: ").append(toIndentedString(supervisorJobCode)).append("\n");
    sb.append("    supervisorPositionCode: ").append(toIndentedString(supervisorPositionCode)).append("\n");
    sb.append("    supervisorEmail: ").append(toIndentedString(supervisorEmail)).append("\n");
    sb.append("    supervisorWorkPhone: ").append(toIndentedString(supervisorWorkPhone)).append("\n");
    sb.append("    supervisorPersonId: ").append(toIndentedString(supervisorPersonId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeID");
    openapiFields.add("companyID");
    openapiFields.add("employeeNumber");
    openapiFields.add("supervisorEmployeeID");
    openapiFields.add("supervisorFirstName");
    openapiFields.add("supervisorLastName");
    openapiFields.add("supervisorEmployeeNumber");
    openapiFields.add("supervisorCompanyID");
    openapiFields.add("supervisorCompanyCode");
    openapiFields.add("supervisorStatusCode");
    openapiFields.add("supervisorJobCode");
    openapiFields.add("supervisorPositionCode");
    openapiFields.add("supervisorEmail");
    openapiFields.add("supervisorWorkPhone");
    openapiFields.add("supervisorPersonId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeSupervisorDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeSupervisorDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeSupervisorDetails is not found in the empty JSON string", EmployeeSupervisorDetails.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("employeeID") != null && !jsonObj.get("employeeID").isJsonNull()) && !jsonObj.get("employeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeID").toString()));
      }
      if ((jsonObj.get("companyID") != null && !jsonObj.get("companyID").isJsonNull()) && !jsonObj.get("companyID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyID").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("supervisorEmployeeID") != null && !jsonObj.get("supervisorEmployeeID").isJsonNull()) && !jsonObj.get("supervisorEmployeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorEmployeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorEmployeeID").toString()));
      }
      if ((jsonObj.get("supervisorFirstName") != null && !jsonObj.get("supervisorFirstName").isJsonNull()) && !jsonObj.get("supervisorFirstName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorFirstName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorFirstName").toString()));
      }
      if ((jsonObj.get("supervisorLastName") != null && !jsonObj.get("supervisorLastName").isJsonNull()) && !jsonObj.get("supervisorLastName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorLastName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorLastName").toString()));
      }
      if ((jsonObj.get("supervisorEmployeeNumber") != null && !jsonObj.get("supervisorEmployeeNumber").isJsonNull()) && !jsonObj.get("supervisorEmployeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorEmployeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorEmployeeNumber").toString()));
      }
      if ((jsonObj.get("supervisorCompanyID") != null && !jsonObj.get("supervisorCompanyID").isJsonNull()) && !jsonObj.get("supervisorCompanyID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorCompanyID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorCompanyID").toString()));
      }
      if ((jsonObj.get("supervisorCompanyCode") != null && !jsonObj.get("supervisorCompanyCode").isJsonNull()) && !jsonObj.get("supervisorCompanyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorCompanyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorCompanyCode").toString()));
      }
      if ((jsonObj.get("supervisorStatusCode") != null && !jsonObj.get("supervisorStatusCode").isJsonNull()) && !jsonObj.get("supervisorStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorStatusCode").toString()));
      }
      if ((jsonObj.get("supervisorJobCode") != null && !jsonObj.get("supervisorJobCode").isJsonNull()) && !jsonObj.get("supervisorJobCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorJobCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorJobCode").toString()));
      }
      if ((jsonObj.get("supervisorPositionCode") != null && !jsonObj.get("supervisorPositionCode").isJsonNull()) && !jsonObj.get("supervisorPositionCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorPositionCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorPositionCode").toString()));
      }
      if ((jsonObj.get("supervisorEmail") != null && !jsonObj.get("supervisorEmail").isJsonNull()) && !jsonObj.get("supervisorEmail").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorEmail` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorEmail").toString()));
      }
      if ((jsonObj.get("supervisorWorkPhone") != null && !jsonObj.get("supervisorWorkPhone").isJsonNull()) && !jsonObj.get("supervisorWorkPhone").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorWorkPhone` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorWorkPhone").toString()));
      }
      if ((jsonObj.get("supervisorPersonId") != null && !jsonObj.get("supervisorPersonId").isJsonNull()) && !jsonObj.get("supervisorPersonId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorPersonId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorPersonId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeSupervisorDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeSupervisorDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeSupervisorDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeSupervisorDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeSupervisorDetails>() {
           @Override
           public void write(JsonWriter out, EmployeeSupervisorDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeSupervisorDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeSupervisorDetails instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeSupervisorDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeSupervisorDetails
  * @throws IOException if the JSON string is invalid with respect to EmployeeSupervisorDetails
  */
  public static EmployeeSupervisorDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeSupervisorDetails.class);
  }

 /**
  * Convert an instance of EmployeeSupervisorDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

