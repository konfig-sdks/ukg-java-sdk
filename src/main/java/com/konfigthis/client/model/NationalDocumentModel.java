/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NationalDocumentModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NationalDocumentModel {
  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_NATIONAL_DOCUMENT_ID = "nationalDocumentId";
  @SerializedName(SERIALIZED_NAME_NATIONAL_DOCUMENT_ID)
  private String nationalDocumentId;

  public static final String SERIALIZED_NAME_CONTACT_ID = "contactId";
  @SerializedName(SERIALIZED_NAME_CONTACT_ID)
  private String contactId;

  public static final String SERIALIZED_NAME_NATIONAL_DOCUMENT_NUMBER = "nationalDocumentNumber";
  @SerializedName(SERIALIZED_NAME_NATIONAL_DOCUMENT_NUMBER)
  private String nationalDocumentNumber;

  public static final String SERIALIZED_NAME_NATIONAL_DOCUMENT_DESCRIPTION = "nationalDocumentDescription";
  @SerializedName(SERIALIZED_NAME_NATIONAL_DOCUMENT_DESCRIPTION)
  private String nationalDocumentDescription;

  public static final String SERIALIZED_NAME_NATIONAL_DOCUMENT_TYPE_CODE = "nationalDocumentTypeCode";
  @SerializedName(SERIALIZED_NAME_NATIONAL_DOCUMENT_TYPE_CODE)
  private String nationalDocumentTypeCode;

  public static final String SERIALIZED_NAME_NATIONAL_DOCUMENT_ISSUING_COUNTRY_CODE = "nationalDocumentIssuingCountryCode";
  @SerializedName(SERIALIZED_NAME_NATIONAL_DOCUMENT_ISSUING_COUNTRY_CODE)
  private String nationalDocumentIssuingCountryCode;

  public static final String SERIALIZED_NAME_NATIONAL_DOCUMENT_ISSUING_PLACE = "nationalDocumentIssuingPlace";
  @SerializedName(SERIALIZED_NAME_NATIONAL_DOCUMENT_ISSUING_PLACE)
  private String nationalDocumentIssuingPlace;

  public static final String SERIALIZED_NAME_NATIONAL_DOCUMENT_ISSUE_DATE = "nationalDocumentIssueDate";
  @SerializedName(SERIALIZED_NAME_NATIONAL_DOCUMENT_ISSUE_DATE)
  private OffsetDateTime nationalDocumentIssueDate;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public NationalDocumentModel() {
  }

  public NationalDocumentModel employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public NationalDocumentModel nationalDocumentId(String nationalDocumentId) {
    
    
    
    
    this.nationalDocumentId = nationalDocumentId;
    return this;
  }

   /**
   * Get nationalDocumentId
   * @return nationalDocumentId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNationalDocumentId() {
    return nationalDocumentId;
  }


  public void setNationalDocumentId(String nationalDocumentId) {
    
    
    
    this.nationalDocumentId = nationalDocumentId;
  }


  public NationalDocumentModel contactId(String contactId) {
    
    
    
    
    this.contactId = contactId;
    return this;
  }

   /**
   * Get contactId
   * @return contactId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getContactId() {
    return contactId;
  }


  public void setContactId(String contactId) {
    
    
    
    this.contactId = contactId;
  }


  public NationalDocumentModel nationalDocumentNumber(String nationalDocumentNumber) {
    
    
    
    
    this.nationalDocumentNumber = nationalDocumentNumber;
    return this;
  }

   /**
   * Get nationalDocumentNumber
   * @return nationalDocumentNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNationalDocumentNumber() {
    return nationalDocumentNumber;
  }


  public void setNationalDocumentNumber(String nationalDocumentNumber) {
    
    
    
    this.nationalDocumentNumber = nationalDocumentNumber;
  }


  public NationalDocumentModel nationalDocumentDescription(String nationalDocumentDescription) {
    
    
    
    
    this.nationalDocumentDescription = nationalDocumentDescription;
    return this;
  }

   /**
   * Get nationalDocumentDescription
   * @return nationalDocumentDescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNationalDocumentDescription() {
    return nationalDocumentDescription;
  }


  public void setNationalDocumentDescription(String nationalDocumentDescription) {
    
    
    
    this.nationalDocumentDescription = nationalDocumentDescription;
  }


  public NationalDocumentModel nationalDocumentTypeCode(String nationalDocumentTypeCode) {
    
    
    
    
    this.nationalDocumentTypeCode = nationalDocumentTypeCode;
    return this;
  }

   /**
   * Get nationalDocumentTypeCode
   * @return nationalDocumentTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNationalDocumentTypeCode() {
    return nationalDocumentTypeCode;
  }


  public void setNationalDocumentTypeCode(String nationalDocumentTypeCode) {
    
    
    
    this.nationalDocumentTypeCode = nationalDocumentTypeCode;
  }


  public NationalDocumentModel nationalDocumentIssuingCountryCode(String nationalDocumentIssuingCountryCode) {
    
    
    
    
    this.nationalDocumentIssuingCountryCode = nationalDocumentIssuingCountryCode;
    return this;
  }

   /**
   * Get nationalDocumentIssuingCountryCode
   * @return nationalDocumentIssuingCountryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNationalDocumentIssuingCountryCode() {
    return nationalDocumentIssuingCountryCode;
  }


  public void setNationalDocumentIssuingCountryCode(String nationalDocumentIssuingCountryCode) {
    
    
    
    this.nationalDocumentIssuingCountryCode = nationalDocumentIssuingCountryCode;
  }


  public NationalDocumentModel nationalDocumentIssuingPlace(String nationalDocumentIssuingPlace) {
    
    
    
    
    this.nationalDocumentIssuingPlace = nationalDocumentIssuingPlace;
    return this;
  }

   /**
   * Get nationalDocumentIssuingPlace
   * @return nationalDocumentIssuingPlace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getNationalDocumentIssuingPlace() {
    return nationalDocumentIssuingPlace;
  }


  public void setNationalDocumentIssuingPlace(String nationalDocumentIssuingPlace) {
    
    
    
    this.nationalDocumentIssuingPlace = nationalDocumentIssuingPlace;
  }


  public NationalDocumentModel nationalDocumentIssueDate(OffsetDateTime nationalDocumentIssueDate) {
    
    
    
    
    this.nationalDocumentIssueDate = nationalDocumentIssueDate;
    return this;
  }

   /**
   * Get nationalDocumentIssueDate
   * @return nationalDocumentIssueDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getNationalDocumentIssueDate() {
    return nationalDocumentIssueDate;
  }


  public void setNationalDocumentIssueDate(OffsetDateTime nationalDocumentIssueDate) {
    
    
    
    this.nationalDocumentIssueDate = nationalDocumentIssueDate;
  }


  public NationalDocumentModel employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NationalDocumentModel instance itself
   */
  public NationalDocumentModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NationalDocumentModel nationalDocumentModel = (NationalDocumentModel) o;
    return Objects.equals(this.employeeId, nationalDocumentModel.employeeId) &&
        Objects.equals(this.nationalDocumentId, nationalDocumentModel.nationalDocumentId) &&
        Objects.equals(this.contactId, nationalDocumentModel.contactId) &&
        Objects.equals(this.nationalDocumentNumber, nationalDocumentModel.nationalDocumentNumber) &&
        Objects.equals(this.nationalDocumentDescription, nationalDocumentModel.nationalDocumentDescription) &&
        Objects.equals(this.nationalDocumentTypeCode, nationalDocumentModel.nationalDocumentTypeCode) &&
        Objects.equals(this.nationalDocumentIssuingCountryCode, nationalDocumentModel.nationalDocumentIssuingCountryCode) &&
        Objects.equals(this.nationalDocumentIssuingPlace, nationalDocumentModel.nationalDocumentIssuingPlace) &&
        Objects.equals(this.nationalDocumentIssueDate, nationalDocumentModel.nationalDocumentIssueDate) &&
        Objects.equals(this.employeeNumber, nationalDocumentModel.employeeNumber)&&
        Objects.equals(this.additionalProperties, nationalDocumentModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeId, nationalDocumentId, contactId, nationalDocumentNumber, nationalDocumentDescription, nationalDocumentTypeCode, nationalDocumentIssuingCountryCode, nationalDocumentIssuingPlace, nationalDocumentIssueDate, employeeNumber, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NationalDocumentModel {\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    nationalDocumentId: ").append(toIndentedString(nationalDocumentId)).append("\n");
    sb.append("    contactId: ").append(toIndentedString(contactId)).append("\n");
    sb.append("    nationalDocumentNumber: ").append(toIndentedString(nationalDocumentNumber)).append("\n");
    sb.append("    nationalDocumentDescription: ").append(toIndentedString(nationalDocumentDescription)).append("\n");
    sb.append("    nationalDocumentTypeCode: ").append(toIndentedString(nationalDocumentTypeCode)).append("\n");
    sb.append("    nationalDocumentIssuingCountryCode: ").append(toIndentedString(nationalDocumentIssuingCountryCode)).append("\n");
    sb.append("    nationalDocumentIssuingPlace: ").append(toIndentedString(nationalDocumentIssuingPlace)).append("\n");
    sb.append("    nationalDocumentIssueDate: ").append(toIndentedString(nationalDocumentIssueDate)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeId");
    openapiFields.add("nationalDocumentId");
    openapiFields.add("contactId");
    openapiFields.add("nationalDocumentNumber");
    openapiFields.add("nationalDocumentDescription");
    openapiFields.add("nationalDocumentTypeCode");
    openapiFields.add("nationalDocumentIssuingCountryCode");
    openapiFields.add("nationalDocumentIssuingPlace");
    openapiFields.add("nationalDocumentIssueDate");
    openapiFields.add("employeeNumber");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NationalDocumentModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NationalDocumentModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NationalDocumentModel is not found in the empty JSON string", NationalDocumentModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("nationalDocumentId") != null && !jsonObj.get("nationalDocumentId").isJsonNull()) && !jsonObj.get("nationalDocumentId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalDocumentId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalDocumentId").toString()));
      }
      if ((jsonObj.get("contactId") != null && !jsonObj.get("contactId").isJsonNull()) && !jsonObj.get("contactId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `contactId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("contactId").toString()));
      }
      if ((jsonObj.get("nationalDocumentNumber") != null && !jsonObj.get("nationalDocumentNumber").isJsonNull()) && !jsonObj.get("nationalDocumentNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalDocumentNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalDocumentNumber").toString()));
      }
      if ((jsonObj.get("nationalDocumentDescription") != null && !jsonObj.get("nationalDocumentDescription").isJsonNull()) && !jsonObj.get("nationalDocumentDescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalDocumentDescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalDocumentDescription").toString()));
      }
      if ((jsonObj.get("nationalDocumentTypeCode") != null && !jsonObj.get("nationalDocumentTypeCode").isJsonNull()) && !jsonObj.get("nationalDocumentTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalDocumentTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalDocumentTypeCode").toString()));
      }
      if ((jsonObj.get("nationalDocumentIssuingCountryCode") != null && !jsonObj.get("nationalDocumentIssuingCountryCode").isJsonNull()) && !jsonObj.get("nationalDocumentIssuingCountryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalDocumentIssuingCountryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalDocumentIssuingCountryCode").toString()));
      }
      if ((jsonObj.get("nationalDocumentIssuingPlace") != null && !jsonObj.get("nationalDocumentIssuingPlace").isJsonNull()) && !jsonObj.get("nationalDocumentIssuingPlace").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `nationalDocumentIssuingPlace` to be a primitive type in the JSON string but got `%s`", jsonObj.get("nationalDocumentIssuingPlace").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NationalDocumentModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NationalDocumentModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NationalDocumentModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NationalDocumentModel.class));

       return (TypeAdapter<T>) new TypeAdapter<NationalDocumentModel>() {
           @Override
           public void write(JsonWriter out, NationalDocumentModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NationalDocumentModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NationalDocumentModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NationalDocumentModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NationalDocumentModel
  * @throws IOException if the JSON string is invalid with respect to NationalDocumentModel
  */
  public static NationalDocumentModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NationalDocumentModel.class);
  }

 /**
  * Convert an instance of NationalDocumentModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

