/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeePayStatementTaxesModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeePayStatementTaxesModel {
  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private Float amount;

  public static final String SERIALIZED_NAME_AMOUNTYTD = "amountytd";
  @SerializedName(SERIALIZED_NAME_AMOUNTYTD)
  private Float amountytd;

  public static final String SERIALIZED_NAME_BASISAMOUNT = "basisamount";
  @SerializedName(SERIALIZED_NAME_BASISAMOUNT)
  private Float basisamount;

  public static final String SERIALIZED_NAME_TAXDESCRIPTION = "taxdescription";
  @SerializedName(SERIALIZED_NAME_TAXDESCRIPTION)
  private String taxdescription;

  public static final String SERIALIZED_NAME_TAXCODE = "taxcode";
  @SerializedName(SERIALIZED_NAME_TAXCODE)
  private String taxcode;

  public EmployeePayStatementTaxesModel() {
  }

  public EmployeePayStatementTaxesModel amount(Float amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Get amount
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAmount() {
    return amount;
  }


  public void setAmount(Float amount) {
    
    
    
    this.amount = amount;
  }


  public EmployeePayStatementTaxesModel amountytd(Float amountytd) {
    
    
    
    
    this.amountytd = amountytd;
    return this;
  }

   /**
   * Get amountytd
   * @return amountytd
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getAmountytd() {
    return amountytd;
  }


  public void setAmountytd(Float amountytd) {
    
    
    
    this.amountytd = amountytd;
  }


  public EmployeePayStatementTaxesModel basisamount(Float basisamount) {
    
    
    
    
    this.basisamount = basisamount;
    return this;
  }

   /**
   * Get basisamount
   * @return basisamount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getBasisamount() {
    return basisamount;
  }


  public void setBasisamount(Float basisamount) {
    
    
    
    this.basisamount = basisamount;
  }


  public EmployeePayStatementTaxesModel taxdescription(String taxdescription) {
    
    
    
    
    this.taxdescription = taxdescription;
    return this;
  }

   /**
   * Get taxdescription
   * @return taxdescription
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxdescription() {
    return taxdescription;
  }


  public void setTaxdescription(String taxdescription) {
    
    
    
    this.taxdescription = taxdescription;
  }


  public EmployeePayStatementTaxesModel taxcode(String taxcode) {
    
    
    
    
    this.taxcode = taxcode;
    return this;
  }

   /**
   * Get taxcode
   * @return taxcode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getTaxcode() {
    return taxcode;
  }


  public void setTaxcode(String taxcode) {
    
    
    
    this.taxcode = taxcode;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeePayStatementTaxesModel instance itself
   */
  public EmployeePayStatementTaxesModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeePayStatementTaxesModel employeePayStatementTaxesModel = (EmployeePayStatementTaxesModel) o;
    return Objects.equals(this.amount, employeePayStatementTaxesModel.amount) &&
        Objects.equals(this.amountytd, employeePayStatementTaxesModel.amountytd) &&
        Objects.equals(this.basisamount, employeePayStatementTaxesModel.basisamount) &&
        Objects.equals(this.taxdescription, employeePayStatementTaxesModel.taxdescription) &&
        Objects.equals(this.taxcode, employeePayStatementTaxesModel.taxcode)&&
        Objects.equals(this.additionalProperties, employeePayStatementTaxesModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(amount, amountytd, basisamount, taxdescription, taxcode, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeePayStatementTaxesModel {\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    amountytd: ").append(toIndentedString(amountytd)).append("\n");
    sb.append("    basisamount: ").append(toIndentedString(basisamount)).append("\n");
    sb.append("    taxdescription: ").append(toIndentedString(taxdescription)).append("\n");
    sb.append("    taxcode: ").append(toIndentedString(taxcode)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("amount");
    openapiFields.add("amountytd");
    openapiFields.add("basisamount");
    openapiFields.add("taxdescription");
    openapiFields.add("taxcode");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeePayStatementTaxesModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeePayStatementTaxesModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeePayStatementTaxesModel is not found in the empty JSON string", EmployeePayStatementTaxesModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("taxdescription") != null && !jsonObj.get("taxdescription").isJsonNull()) && !jsonObj.get("taxdescription").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxdescription` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxdescription").toString()));
      }
      if ((jsonObj.get("taxcode") != null && !jsonObj.get("taxcode").isJsonNull()) && !jsonObj.get("taxcode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `taxcode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("taxcode").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeePayStatementTaxesModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeePayStatementTaxesModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeePayStatementTaxesModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeePayStatementTaxesModel.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeePayStatementTaxesModel>() {
           @Override
           public void write(JsonWriter out, EmployeePayStatementTaxesModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeePayStatementTaxesModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeePayStatementTaxesModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeePayStatementTaxesModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeePayStatementTaxesModel
  * @throws IOException if the JSON string is invalid with respect to EmployeePayStatementTaxesModel
  */
  public static EmployeePayStatementTaxesModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeePayStatementTaxesModel.class);
  }

 /**
  * Convert an instance of EmployeePayStatementTaxesModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

