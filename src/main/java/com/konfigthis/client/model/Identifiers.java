/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Identifiers
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Identifiers {
  /**
   * Employee Identifier Type
   */
  @JsonAdapter(EmployeeIdentifierTypeEnum.Adapter.class)
 public enum EmployeeIdentifierTypeEnum {
    EMAILADDRESS("EmailAddress"),
    
    EMPLOYEENUMBER("EmployeeNumber"),
    
    NATIONALID("NationalID"),
    
    SIN("SIN"),
    
    PERSONID("PersonID"),
    
    SSN("SSN"),
    
    EMPLOYEEID("EmployeeID"),
    
    USERINTEGRATIONKEY("UserIntegrationKey");

    private String value;

    EmployeeIdentifierTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static EmployeeIdentifierTypeEnum fromValue(String value) {
      for (EmployeeIdentifierTypeEnum b : EmployeeIdentifierTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<EmployeeIdentifierTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final EmployeeIdentifierTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public EmployeeIdentifierTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return EmployeeIdentifierTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_EMPLOYEE_IDENTIFIER_TYPE = "employeeIdentifierType";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDENTIFIER_TYPE)
  private EmployeeIdentifierTypeEnum employeeIdentifierType;

  public static final String SERIALIZED_NAME_EMPLOYEE_IDENTIFIER_VALUE = "employeeIdentifierValue";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDENTIFIER_VALUE)
  private String employeeIdentifierValue;

  /**
   * Gets or Sets companyIdentifierType
   */
  @JsonAdapter(CompanyIdentifierTypeEnum.Adapter.class)
 public enum CompanyIdentifierTypeEnum {
    COMPANY_ID("Company ID"),
    
    COMPANY_CODE("Company Code"),
    
    FEDERAL_ID("Federal ID");

    private String value;

    CompanyIdentifierTypeEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static CompanyIdentifierTypeEnum fromValue(String value) {
      for (CompanyIdentifierTypeEnum b : CompanyIdentifierTypeEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<CompanyIdentifierTypeEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final CompanyIdentifierTypeEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public CompanyIdentifierTypeEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return CompanyIdentifierTypeEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_COMPANY_IDENTIFIER_TYPE = "companyIdentifierType";
  @SerializedName(SERIALIZED_NAME_COMPANY_IDENTIFIER_TYPE)
  private CompanyIdentifierTypeEnum companyIdentifierType;

  public static final String SERIALIZED_NAME_COMPANY_IDENTIFIER_VALUE = "companyIdentifierValue";
  @SerializedName(SERIALIZED_NAME_COMPANY_IDENTIFIER_VALUE)
  private String companyIdentifierValue;

  public Identifiers() {
  }

  public Identifiers employeeIdentifierType(EmployeeIdentifierTypeEnum employeeIdentifierType) {
    
    
    
    
    this.employeeIdentifierType = employeeIdentifierType;
    return this;
  }

   /**
   * Employee Identifier Type
   * @return employeeIdentifierType
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee Identifier Type")

  public EmployeeIdentifierTypeEnum getEmployeeIdentifierType() {
    return employeeIdentifierType;
  }


  public void setEmployeeIdentifierType(EmployeeIdentifierTypeEnum employeeIdentifierType) {
    
    
    
    this.employeeIdentifierType = employeeIdentifierType;
  }


  public Identifiers employeeIdentifierValue(String employeeIdentifierValue) {
    
    
    
    
    this.employeeIdentifierValue = employeeIdentifierValue;
    return this;
  }

   /**
   * Employee Identifier Value (specific to Employee Identifer Type)
   * @return employeeIdentifierValue
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee Identifier Value (specific to Employee Identifer Type)")

  public String getEmployeeIdentifierValue() {
    return employeeIdentifierValue;
  }


  public void setEmployeeIdentifierValue(String employeeIdentifierValue) {
    
    
    
    this.employeeIdentifierValue = employeeIdentifierValue;
  }


  public Identifiers companyIdentifierType(CompanyIdentifierTypeEnum companyIdentifierType) {
    
    
    
    
    this.companyIdentifierType = companyIdentifierType;
    return this;
  }

   /**
   * Get companyIdentifierType
   * @return companyIdentifierType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CompanyIdentifierTypeEnum getCompanyIdentifierType() {
    return companyIdentifierType;
  }


  public void setCompanyIdentifierType(CompanyIdentifierTypeEnum companyIdentifierType) {
    
    
    
    this.companyIdentifierType = companyIdentifierType;
  }


  public Identifiers companyIdentifierValue(String companyIdentifierValue) {
    
    
    
    
    this.companyIdentifierValue = companyIdentifierValue;
    return this;
  }

   /**
   * Company Identifier Value (specific to Company Identifer Type)
   * @return companyIdentifierValue
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Company Identifier Value (specific to Company Identifer Type)")

  public String getCompanyIdentifierValue() {
    return companyIdentifierValue;
  }


  public void setCompanyIdentifierValue(String companyIdentifierValue) {
    
    
    
    this.companyIdentifierValue = companyIdentifierValue;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Identifiers instance itself
   */
  public Identifiers putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Identifiers identifiers = (Identifiers) o;
    return Objects.equals(this.employeeIdentifierType, identifiers.employeeIdentifierType) &&
        Objects.equals(this.employeeIdentifierValue, identifiers.employeeIdentifierValue) &&
        Objects.equals(this.companyIdentifierType, identifiers.companyIdentifierType) &&
        Objects.equals(this.companyIdentifierValue, identifiers.companyIdentifierValue)&&
        Objects.equals(this.additionalProperties, identifiers.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeIdentifierType, employeeIdentifierValue, companyIdentifierType, companyIdentifierValue, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Identifiers {\n");
    sb.append("    employeeIdentifierType: ").append(toIndentedString(employeeIdentifierType)).append("\n");
    sb.append("    employeeIdentifierValue: ").append(toIndentedString(employeeIdentifierValue)).append("\n");
    sb.append("    companyIdentifierType: ").append(toIndentedString(companyIdentifierType)).append("\n");
    sb.append("    companyIdentifierValue: ").append(toIndentedString(companyIdentifierValue)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeIdentifierType");
    openapiFields.add("employeeIdentifierValue");
    openapiFields.add("companyIdentifierType");
    openapiFields.add("companyIdentifierValue");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("employeeIdentifierType");
    openapiRequiredFields.add("employeeIdentifierValue");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Identifiers
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Identifiers.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Identifiers is not found in the empty JSON string", Identifiers.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Identifiers.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("employeeIdentifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeIdentifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeIdentifierType").toString()));
      }
      if (!jsonObj.get("employeeIdentifierValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeIdentifierValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeIdentifierValue").toString()));
      }
      if ((jsonObj.get("companyIdentifierType") != null && !jsonObj.get("companyIdentifierType").isJsonNull()) && !jsonObj.get("companyIdentifierType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyIdentifierType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyIdentifierType").toString()));
      }
      if ((jsonObj.get("companyIdentifierValue") != null && !jsonObj.get("companyIdentifierValue").isJsonNull()) && !jsonObj.get("companyIdentifierValue").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyIdentifierValue` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyIdentifierValue").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Identifiers.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Identifiers' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Identifiers> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Identifiers.class));

       return (TypeAdapter<T>) new TypeAdapter<Identifiers>() {
           @Override
           public void write(JsonWriter out, Identifiers value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Identifiers read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Identifiers instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Identifiers given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Identifiers
  * @throws IOException if the JSON string is invalid with respect to Identifiers
  */
  public static Identifiers fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Identifiers.class);
  }

 /**
  * Convert an instance of Identifiers to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

