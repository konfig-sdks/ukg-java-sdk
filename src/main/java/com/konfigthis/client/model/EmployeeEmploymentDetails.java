/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeEmploymentDetails
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeEmploymentDetails {
  public static final String SERIALIZED_NAME_COMPANY_I_D = "companyID";
  @SerializedName(SERIALIZED_NAME_COMPANY_I_D)
  private String companyID;

  public static final String SERIALIZED_NAME_EMPLOYEE_I_D = "employeeID";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_I_D)
  private String employeeID;

  public static final String SERIALIZED_NAME_PRIMARY_JOB_CODE = "primaryJobCode";
  @SerializedName(SERIALIZED_NAME_PRIMARY_JOB_CODE)
  private String primaryJobCode;

  public static final String SERIALIZED_NAME_JOB_TITLE = "jobTitle";
  @SerializedName(SERIALIZED_NAME_JOB_TITLE)
  private String jobTitle;

  public static final String SERIALIZED_NAME_FULL_TIME_OR_PART_TIME_CODE = "fullTimeOrPartTimeCode";
  @SerializedName(SERIALIZED_NAME_FULL_TIME_OR_PART_TIME_CODE)
  private String fullTimeOrPartTimeCode;

  public static final String SERIALIZED_NAME_PRIMARY_WORK_LOCATION_CODE = "primaryWorkLocationCode";
  @SerializedName(SERIALIZED_NAME_PRIMARY_WORK_LOCATION_CODE)
  private String primaryWorkLocationCode;

  public static final String SERIALIZED_NAME_PRIMARY_PROJECT_CODE = "primaryProjectCode";
  @SerializedName(SERIALIZED_NAME_PRIMARY_PROJECT_CODE)
  private String primaryProjectCode;

  public static final String SERIALIZED_NAME_DEDUCTION_GROUP_CODE = "deductionGroupCode";
  @SerializedName(SERIALIZED_NAME_DEDUCTION_GROUP_CODE)
  private String deductionGroupCode;

  public static final String SERIALIZED_NAME_EARNING_GROUP_CODE = "earningGroupCode";
  @SerializedName(SERIALIZED_NAME_EARNING_GROUP_CODE)
  private String earningGroupCode;

  public static final String SERIALIZED_NAME_EMPLOYEE_TYPE_CODE = "employeeTypeCode";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_TYPE_CODE)
  private String employeeTypeCode;

  public static final String SERIALIZED_NAME_EMPLOYEE_STATUS_CODE = "employeeStatusCode";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_STATUS_CODE)
  private String employeeStatusCode;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_SUPERVISOR_ID = "supervisorId";
  @SerializedName(SERIALIZED_NAME_SUPERVISOR_ID)
  private String supervisorId;

  public static final String SERIALIZED_NAME_ORIGINAL_HIRE_DATE = "originalHireDate";
  @SerializedName(SERIALIZED_NAME_ORIGINAL_HIRE_DATE)
  private String originalHireDate;

  public static final String SERIALIZED_NAME_LAST_HIRE_DATE = "lastHireDate";
  @SerializedName(SERIALIZED_NAME_LAST_HIRE_DATE)
  private String lastHireDate;

  public static final String SERIALIZED_NAME_DATE_OF_TERMINATION = "dateOfTermination";
  @SerializedName(SERIALIZED_NAME_DATE_OF_TERMINATION)
  private String dateOfTermination;

  public static final String SERIALIZED_NAME_DATE_OF_RETIREMENT = "dateOfRetirement";
  @SerializedName(SERIALIZED_NAME_DATE_OF_RETIREMENT)
  private String dateOfRetirement;

  public static final String SERIALIZED_NAME_DATE_TIME_CREATED = "dateTimeCreated";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_CREATED)
  private String dateTimeCreated;

  public static final String SERIALIZED_NAME_DATE_TIME_CHANGED = "dateTimeChanged";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_CHANGED)
  private String dateTimeChanged;

  public static final String SERIALIZED_NAME_DATE_LAST_PAY_DATE_PAID = "dateLastPayDatePaid";
  @SerializedName(SERIALIZED_NAME_DATE_LAST_PAY_DATE_PAID)
  private String dateLastPayDatePaid;

  public static final String SERIALIZED_NAME_PAY_GROUP = "payGroup";
  @SerializedName(SERIALIZED_NAME_PAY_GROUP)
  private String payGroup;

  public static final String SERIALIZED_NAME_IS_HOME_COMPANY = "isHomeCompany";
  @SerializedName(SERIALIZED_NAME_IS_HOME_COMPANY)
  private String isHomeCompany;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_Page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private Integer perPage;

  public EmployeeEmploymentDetails() {
  }

  public EmployeeEmploymentDetails companyID(String companyID) {
    
    
    
    
    this.companyID = companyID;
    return this;
  }

   /**
   * Get companyID
   * @return companyID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyID() {
    return companyID;
  }


  public void setCompanyID(String companyID) {
    
    
    
    this.companyID = companyID;
  }


  public EmployeeEmploymentDetails employeeID(String employeeID) {
    
    
    
    
    this.employeeID = employeeID;
    return this;
  }

   /**
   * Get employeeID
   * @return employeeID
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeID() {
    return employeeID;
  }


  public void setEmployeeID(String employeeID) {
    
    
    
    this.employeeID = employeeID;
  }


  public EmployeeEmploymentDetails primaryJobCode(String primaryJobCode) {
    
    
    
    
    this.primaryJobCode = primaryJobCode;
    return this;
  }

   /**
   * Get primaryJobCode
   * @return primaryJobCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrimaryJobCode() {
    return primaryJobCode;
  }


  public void setPrimaryJobCode(String primaryJobCode) {
    
    
    
    this.primaryJobCode = primaryJobCode;
  }


  public EmployeeEmploymentDetails jobTitle(String jobTitle) {
    
    
    
    
    this.jobTitle = jobTitle;
    return this;
  }

   /**
   * Get jobTitle
   * @return jobTitle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getJobTitle() {
    return jobTitle;
  }


  public void setJobTitle(String jobTitle) {
    
    
    
    this.jobTitle = jobTitle;
  }


  public EmployeeEmploymentDetails fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
    
    
    
    
    this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
    return this;
  }

   /**
   * Get fullTimeOrPartTimeCode
   * @return fullTimeOrPartTimeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getFullTimeOrPartTimeCode() {
    return fullTimeOrPartTimeCode;
  }


  public void setFullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
    
    
    
    this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
  }


  public EmployeeEmploymentDetails primaryWorkLocationCode(String primaryWorkLocationCode) {
    
    
    
    
    this.primaryWorkLocationCode = primaryWorkLocationCode;
    return this;
  }

   /**
   * Get primaryWorkLocationCode
   * @return primaryWorkLocationCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrimaryWorkLocationCode() {
    return primaryWorkLocationCode;
  }


  public void setPrimaryWorkLocationCode(String primaryWorkLocationCode) {
    
    
    
    this.primaryWorkLocationCode = primaryWorkLocationCode;
  }


  public EmployeeEmploymentDetails primaryProjectCode(String primaryProjectCode) {
    
    
    
    
    this.primaryProjectCode = primaryProjectCode;
    return this;
  }

   /**
   * Get primaryProjectCode
   * @return primaryProjectCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPrimaryProjectCode() {
    return primaryProjectCode;
  }


  public void setPrimaryProjectCode(String primaryProjectCode) {
    
    
    
    this.primaryProjectCode = primaryProjectCode;
  }


  public EmployeeEmploymentDetails deductionGroupCode(String deductionGroupCode) {
    
    
    
    
    this.deductionGroupCode = deductionGroupCode;
    return this;
  }

   /**
   * Get deductionGroupCode
   * @return deductionGroupCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDeductionGroupCode() {
    return deductionGroupCode;
  }


  public void setDeductionGroupCode(String deductionGroupCode) {
    
    
    
    this.deductionGroupCode = deductionGroupCode;
  }


  public EmployeeEmploymentDetails earningGroupCode(String earningGroupCode) {
    
    
    
    
    this.earningGroupCode = earningGroupCode;
    return this;
  }

   /**
   * Get earningGroupCode
   * @return earningGroupCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEarningGroupCode() {
    return earningGroupCode;
  }


  public void setEarningGroupCode(String earningGroupCode) {
    
    
    
    this.earningGroupCode = earningGroupCode;
  }


  public EmployeeEmploymentDetails employeeTypeCode(String employeeTypeCode) {
    
    
    
    
    this.employeeTypeCode = employeeTypeCode;
    return this;
  }

   /**
   * Get employeeTypeCode
   * @return employeeTypeCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeTypeCode() {
    return employeeTypeCode;
  }


  public void setEmployeeTypeCode(String employeeTypeCode) {
    
    
    
    this.employeeTypeCode = employeeTypeCode;
  }


  public EmployeeEmploymentDetails employeeStatusCode(String employeeStatusCode) {
    
    
    
    
    this.employeeStatusCode = employeeStatusCode;
    return this;
  }

   /**
   * Get employeeStatusCode
   * @return employeeStatusCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeStatusCode() {
    return employeeStatusCode;
  }


  public void setEmployeeStatusCode(String employeeStatusCode) {
    
    
    
    this.employeeStatusCode = employeeStatusCode;
  }


  public EmployeeEmploymentDetails employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public EmployeeEmploymentDetails supervisorId(String supervisorId) {
    
    
    
    
    this.supervisorId = supervisorId;
    return this;
  }

   /**
   * Get supervisorId
   * @return supervisorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSupervisorId() {
    return supervisorId;
  }


  public void setSupervisorId(String supervisorId) {
    
    
    
    this.supervisorId = supervisorId;
  }


  public EmployeeEmploymentDetails originalHireDate(String originalHireDate) {
    
    
    
    
    this.originalHireDate = originalHireDate;
    return this;
  }

   /**
   * Get originalHireDate
   * @return originalHireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getOriginalHireDate() {
    return originalHireDate;
  }


  public void setOriginalHireDate(String originalHireDate) {
    
    
    
    this.originalHireDate = originalHireDate;
  }


  public EmployeeEmploymentDetails lastHireDate(String lastHireDate) {
    
    
    
    
    this.lastHireDate = lastHireDate;
    return this;
  }

   /**
   * Get lastHireDate
   * @return lastHireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getLastHireDate() {
    return lastHireDate;
  }


  public void setLastHireDate(String lastHireDate) {
    
    
    
    this.lastHireDate = lastHireDate;
  }


  public EmployeeEmploymentDetails dateOfTermination(String dateOfTermination) {
    
    
    
    
    this.dateOfTermination = dateOfTermination;
    return this;
  }

   /**
   * Get dateOfTermination
   * @return dateOfTermination
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateOfTermination() {
    return dateOfTermination;
  }


  public void setDateOfTermination(String dateOfTermination) {
    
    
    
    this.dateOfTermination = dateOfTermination;
  }


  public EmployeeEmploymentDetails dateOfRetirement(String dateOfRetirement) {
    
    
    
    
    this.dateOfRetirement = dateOfRetirement;
    return this;
  }

   /**
   * Get dateOfRetirement
   * @return dateOfRetirement
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateOfRetirement() {
    return dateOfRetirement;
  }


  public void setDateOfRetirement(String dateOfRetirement) {
    
    
    
    this.dateOfRetirement = dateOfRetirement;
  }


  public EmployeeEmploymentDetails dateTimeCreated(String dateTimeCreated) {
    
    
    
    
    this.dateTimeCreated = dateTimeCreated;
    return this;
  }

   /**
   * Get dateTimeCreated
   * @return dateTimeCreated
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateTimeCreated() {
    return dateTimeCreated;
  }


  public void setDateTimeCreated(String dateTimeCreated) {
    
    
    
    this.dateTimeCreated = dateTimeCreated;
  }


  public EmployeeEmploymentDetails dateTimeChanged(String dateTimeChanged) {
    
    
    
    
    this.dateTimeChanged = dateTimeChanged;
    return this;
  }

   /**
   * Get dateTimeChanged
   * @return dateTimeChanged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateTimeChanged() {
    return dateTimeChanged;
  }


  public void setDateTimeChanged(String dateTimeChanged) {
    
    
    
    this.dateTimeChanged = dateTimeChanged;
  }


  public EmployeeEmploymentDetails dateLastPayDatePaid(String dateLastPayDatePaid) {
    
    
    
    
    this.dateLastPayDatePaid = dateLastPayDatePaid;
    return this;
  }

   /**
   * Get dateLastPayDatePaid
   * @return dateLastPayDatePaid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDateLastPayDatePaid() {
    return dateLastPayDatePaid;
  }


  public void setDateLastPayDatePaid(String dateLastPayDatePaid) {
    
    
    
    this.dateLastPayDatePaid = dateLastPayDatePaid;
  }


  public EmployeeEmploymentDetails payGroup(String payGroup) {
    
    
    
    
    this.payGroup = payGroup;
    return this;
  }

   /**
   * Get payGroup
   * @return payGroup
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayGroup() {
    return payGroup;
  }


  public void setPayGroup(String payGroup) {
    
    
    
    this.payGroup = payGroup;
  }


  public EmployeeEmploymentDetails isHomeCompany(String isHomeCompany) {
    
    
    
    
    this.isHomeCompany = isHomeCompany;
    return this;
  }

   /**
   * Get isHomeCompany
   * @return isHomeCompany
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getIsHomeCompany() {
    return isHomeCompany;
  }


  public void setIsHomeCompany(String isHomeCompany) {
    
    
    
    this.isHomeCompany = isHomeCompany;
  }


  public EmployeeEmploymentDetails page(Integer page) {
    
    
    
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    
    
    
    this.page = page;
  }


  public EmployeeEmploymentDetails perPage(Integer perPage) {
    
    
    
    
    this.perPage = perPage;
    return this;
  }

   /**
   * Get perPage
   * @return perPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPerPage() {
    return perPage;
  }


  public void setPerPage(Integer perPage) {
    
    
    
    this.perPage = perPage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeEmploymentDetails instance itself
   */
  public EmployeeEmploymentDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeEmploymentDetails employeeEmploymentDetails = (EmployeeEmploymentDetails) o;
    return Objects.equals(this.companyID, employeeEmploymentDetails.companyID) &&
        Objects.equals(this.employeeID, employeeEmploymentDetails.employeeID) &&
        Objects.equals(this.primaryJobCode, employeeEmploymentDetails.primaryJobCode) &&
        Objects.equals(this.jobTitle, employeeEmploymentDetails.jobTitle) &&
        Objects.equals(this.fullTimeOrPartTimeCode, employeeEmploymentDetails.fullTimeOrPartTimeCode) &&
        Objects.equals(this.primaryWorkLocationCode, employeeEmploymentDetails.primaryWorkLocationCode) &&
        Objects.equals(this.primaryProjectCode, employeeEmploymentDetails.primaryProjectCode) &&
        Objects.equals(this.deductionGroupCode, employeeEmploymentDetails.deductionGroupCode) &&
        Objects.equals(this.earningGroupCode, employeeEmploymentDetails.earningGroupCode) &&
        Objects.equals(this.employeeTypeCode, employeeEmploymentDetails.employeeTypeCode) &&
        Objects.equals(this.employeeStatusCode, employeeEmploymentDetails.employeeStatusCode) &&
        Objects.equals(this.employeeNumber, employeeEmploymentDetails.employeeNumber) &&
        Objects.equals(this.supervisorId, employeeEmploymentDetails.supervisorId) &&
        Objects.equals(this.originalHireDate, employeeEmploymentDetails.originalHireDate) &&
        Objects.equals(this.lastHireDate, employeeEmploymentDetails.lastHireDate) &&
        Objects.equals(this.dateOfTermination, employeeEmploymentDetails.dateOfTermination) &&
        Objects.equals(this.dateOfRetirement, employeeEmploymentDetails.dateOfRetirement) &&
        Objects.equals(this.dateTimeCreated, employeeEmploymentDetails.dateTimeCreated) &&
        Objects.equals(this.dateTimeChanged, employeeEmploymentDetails.dateTimeChanged) &&
        Objects.equals(this.dateLastPayDatePaid, employeeEmploymentDetails.dateLastPayDatePaid) &&
        Objects.equals(this.payGroup, employeeEmploymentDetails.payGroup) &&
        Objects.equals(this.isHomeCompany, employeeEmploymentDetails.isHomeCompany) &&
        Objects.equals(this.page, employeeEmploymentDetails.page) &&
        Objects.equals(this.perPage, employeeEmploymentDetails.perPage)&&
        Objects.equals(this.additionalProperties, employeeEmploymentDetails.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeEmploymentDetails {\n");
    sb.append("    companyID: ").append(toIndentedString(companyID)).append("\n");
    sb.append("    employeeID: ").append(toIndentedString(employeeID)).append("\n");
    sb.append("    primaryJobCode: ").append(toIndentedString(primaryJobCode)).append("\n");
    sb.append("    jobTitle: ").append(toIndentedString(jobTitle)).append("\n");
    sb.append("    fullTimeOrPartTimeCode: ").append(toIndentedString(fullTimeOrPartTimeCode)).append("\n");
    sb.append("    primaryWorkLocationCode: ").append(toIndentedString(primaryWorkLocationCode)).append("\n");
    sb.append("    primaryProjectCode: ").append(toIndentedString(primaryProjectCode)).append("\n");
    sb.append("    deductionGroupCode: ").append(toIndentedString(deductionGroupCode)).append("\n");
    sb.append("    earningGroupCode: ").append(toIndentedString(earningGroupCode)).append("\n");
    sb.append("    employeeTypeCode: ").append(toIndentedString(employeeTypeCode)).append("\n");
    sb.append("    employeeStatusCode: ").append(toIndentedString(employeeStatusCode)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    supervisorId: ").append(toIndentedString(supervisorId)).append("\n");
    sb.append("    originalHireDate: ").append(toIndentedString(originalHireDate)).append("\n");
    sb.append("    lastHireDate: ").append(toIndentedString(lastHireDate)).append("\n");
    sb.append("    dateOfTermination: ").append(toIndentedString(dateOfTermination)).append("\n");
    sb.append("    dateOfRetirement: ").append(toIndentedString(dateOfRetirement)).append("\n");
    sb.append("    dateTimeCreated: ").append(toIndentedString(dateTimeCreated)).append("\n");
    sb.append("    dateTimeChanged: ").append(toIndentedString(dateTimeChanged)).append("\n");
    sb.append("    dateLastPayDatePaid: ").append(toIndentedString(dateLastPayDatePaid)).append("\n");
    sb.append("    payGroup: ").append(toIndentedString(payGroup)).append("\n");
    sb.append("    isHomeCompany: ").append(toIndentedString(isHomeCompany)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyID");
    openapiFields.add("employeeID");
    openapiFields.add("primaryJobCode");
    openapiFields.add("jobTitle");
    openapiFields.add("fullTimeOrPartTimeCode");
    openapiFields.add("primaryWorkLocationCode");
    openapiFields.add("primaryProjectCode");
    openapiFields.add("deductionGroupCode");
    openapiFields.add("earningGroupCode");
    openapiFields.add("employeeTypeCode");
    openapiFields.add("employeeStatusCode");
    openapiFields.add("employeeNumber");
    openapiFields.add("supervisorId");
    openapiFields.add("originalHireDate");
    openapiFields.add("lastHireDate");
    openapiFields.add("dateOfTermination");
    openapiFields.add("dateOfRetirement");
    openapiFields.add("dateTimeCreated");
    openapiFields.add("dateTimeChanged");
    openapiFields.add("dateLastPayDatePaid");
    openapiFields.add("payGroup");
    openapiFields.add("isHomeCompany");
    openapiFields.add("page");
    openapiFields.add("per_Page");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeEmploymentDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeEmploymentDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeEmploymentDetails is not found in the empty JSON string", EmployeeEmploymentDetails.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("companyID") != null && !jsonObj.get("companyID").isJsonNull()) && !jsonObj.get("companyID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyID").toString()));
      }
      if ((jsonObj.get("employeeID") != null && !jsonObj.get("employeeID").isJsonNull()) && !jsonObj.get("employeeID").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeID` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeID").toString()));
      }
      if ((jsonObj.get("primaryJobCode") != null && !jsonObj.get("primaryJobCode").isJsonNull()) && !jsonObj.get("primaryJobCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryJobCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryJobCode").toString()));
      }
      if ((jsonObj.get("jobTitle") != null && !jsonObj.get("jobTitle").isJsonNull()) && !jsonObj.get("jobTitle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `jobTitle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("jobTitle").toString()));
      }
      if ((jsonObj.get("fullTimeOrPartTimeCode") != null && !jsonObj.get("fullTimeOrPartTimeCode").isJsonNull()) && !jsonObj.get("fullTimeOrPartTimeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `fullTimeOrPartTimeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("fullTimeOrPartTimeCode").toString()));
      }
      if ((jsonObj.get("primaryWorkLocationCode") != null && !jsonObj.get("primaryWorkLocationCode").isJsonNull()) && !jsonObj.get("primaryWorkLocationCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryWorkLocationCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryWorkLocationCode").toString()));
      }
      if ((jsonObj.get("primaryProjectCode") != null && !jsonObj.get("primaryProjectCode").isJsonNull()) && !jsonObj.get("primaryProjectCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `primaryProjectCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("primaryProjectCode").toString()));
      }
      if ((jsonObj.get("deductionGroupCode") != null && !jsonObj.get("deductionGroupCode").isJsonNull()) && !jsonObj.get("deductionGroupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `deductionGroupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("deductionGroupCode").toString()));
      }
      if ((jsonObj.get("earningGroupCode") != null && !jsonObj.get("earningGroupCode").isJsonNull()) && !jsonObj.get("earningGroupCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `earningGroupCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("earningGroupCode").toString()));
      }
      if ((jsonObj.get("employeeTypeCode") != null && !jsonObj.get("employeeTypeCode").isJsonNull()) && !jsonObj.get("employeeTypeCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeTypeCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeTypeCode").toString()));
      }
      if ((jsonObj.get("employeeStatusCode") != null && !jsonObj.get("employeeStatusCode").isJsonNull()) && !jsonObj.get("employeeStatusCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeStatusCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeStatusCode").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("supervisorId") != null && !jsonObj.get("supervisorId").isJsonNull()) && !jsonObj.get("supervisorId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `supervisorId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("supervisorId").toString()));
      }
      if ((jsonObj.get("originalHireDate") != null && !jsonObj.get("originalHireDate").isJsonNull()) && !jsonObj.get("originalHireDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `originalHireDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("originalHireDate").toString()));
      }
      if ((jsonObj.get("lastHireDate") != null && !jsonObj.get("lastHireDate").isJsonNull()) && !jsonObj.get("lastHireDate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `lastHireDate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("lastHireDate").toString()));
      }
      if ((jsonObj.get("dateOfTermination") != null && !jsonObj.get("dateOfTermination").isJsonNull()) && !jsonObj.get("dateOfTermination").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfTermination` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfTermination").toString()));
      }
      if ((jsonObj.get("dateOfRetirement") != null && !jsonObj.get("dateOfRetirement").isJsonNull()) && !jsonObj.get("dateOfRetirement").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateOfRetirement` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateOfRetirement").toString()));
      }
      if ((jsonObj.get("dateTimeCreated") != null && !jsonObj.get("dateTimeCreated").isJsonNull()) && !jsonObj.get("dateTimeCreated").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTimeCreated` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTimeCreated").toString()));
      }
      if ((jsonObj.get("dateTimeChanged") != null && !jsonObj.get("dateTimeChanged").isJsonNull()) && !jsonObj.get("dateTimeChanged").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateTimeChanged` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateTimeChanged").toString()));
      }
      if ((jsonObj.get("dateLastPayDatePaid") != null && !jsonObj.get("dateLastPayDatePaid").isJsonNull()) && !jsonObj.get("dateLastPayDatePaid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `dateLastPayDatePaid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("dateLastPayDatePaid").toString()));
      }
      if ((jsonObj.get("payGroup") != null && !jsonObj.get("payGroup").isJsonNull()) && !jsonObj.get("payGroup").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payGroup` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payGroup").toString()));
      }
      if ((jsonObj.get("isHomeCompany") != null && !jsonObj.get("isHomeCompany").isJsonNull()) && !jsonObj.get("isHomeCompany").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `isHomeCompany` to be a primitive type in the JSON string but got `%s`", jsonObj.get("isHomeCompany").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeEmploymentDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeEmploymentDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeEmploymentDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeEmploymentDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeEmploymentDetails>() {
           @Override
           public void write(JsonWriter out, EmployeeEmploymentDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeEmploymentDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeEmploymentDetails instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeEmploymentDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeEmploymentDetails
  * @throws IOException if the JSON string is invalid with respect to EmployeeEmploymentDetails
  */
  public static EmployeeEmploymentDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeEmploymentDetails.class);
  }

 /**
  * Convert an instance of EmployeeEmploymentDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

