/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EducationsDegree;
import com.konfigthis.client.model.EducationsFrom;
import com.konfigthis.client.model.EducationsMajor;
import com.konfigthis.client.model.EducationsMinor;
import com.konfigthis.client.model.EducationsSchool;
import com.konfigthis.client.model.EducationsTo;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * An array containing candidate’s educations.
 */
@ApiModel(description = "An array containing candidate’s educations.")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Educations {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_DEGREE = "degree";
  @SerializedName(SERIALIZED_NAME_DEGREE)
  private EducationsDegree degree;

  public static final String SERIALIZED_NAME_SCHOOL = "school";
  @SerializedName(SERIALIZED_NAME_SCHOOL)
  private EducationsSchool school;

  public static final String SERIALIZED_NAME_MAJOR = "major";
  @SerializedName(SERIALIZED_NAME_MAJOR)
  private EducationsMajor major;

  public static final String SERIALIZED_NAME_MINOR = "minor";
  @SerializedName(SERIALIZED_NAME_MINOR)
  private EducationsMinor minor;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private EducationsFrom from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private EducationsTo to;

  public Educations() {
  }

  public Educations description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * The education description. Maximum of 1500 characters.
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The education description. Maximum of 1500 characters.")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public Educations id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The id of the candidate’s education record.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the candidate’s education record.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Educations degree(EducationsDegree degree) {
    
    
    
    
    this.degree = degree;
    return this;
  }

   /**
   * Get degree
   * @return degree
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EducationsDegree getDegree() {
    return degree;
  }


  public void setDegree(EducationsDegree degree) {
    
    
    
    this.degree = degree;
  }


  public Educations school(EducationsSchool school) {
    
    
    
    
    this.school = school;
    return this;
  }

   /**
   * Get school
   * @return school
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EducationsSchool getSchool() {
    return school;
  }


  public void setSchool(EducationsSchool school) {
    
    
    
    this.school = school;
  }


  public Educations major(EducationsMajor major) {
    
    
    
    
    this.major = major;
    return this;
  }

   /**
   * Get major
   * @return major
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EducationsMajor getMajor() {
    return major;
  }


  public void setMajor(EducationsMajor major) {
    
    
    
    this.major = major;
  }


  public Educations minor(EducationsMinor minor) {
    
    
    
    
    this.minor = minor;
    return this;
  }

   /**
   * Get minor
   * @return minor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EducationsMinor getMinor() {
    return minor;
  }


  public void setMinor(EducationsMinor minor) {
    
    
    
    this.minor = minor;
  }


  public Educations from(EducationsFrom from) {
    
    
    
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EducationsFrom getFrom() {
    return from;
  }


  public void setFrom(EducationsFrom from) {
    
    
    
    this.from = from;
  }


  public Educations to(EducationsTo to) {
    
    
    
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EducationsTo getTo() {
    return to;
  }


  public void setTo(EducationsTo to) {
    
    
    
    this.to = to;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Educations instance itself
   */
  public Educations putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Educations educations = (Educations) o;
    return Objects.equals(this.description, educations.description) &&
        Objects.equals(this.id, educations.id) &&
        Objects.equals(this.degree, educations.degree) &&
        Objects.equals(this.school, educations.school) &&
        Objects.equals(this.major, educations.major) &&
        Objects.equals(this.minor, educations.minor) &&
        Objects.equals(this.from, educations.from) &&
        Objects.equals(this.to, educations.to)&&
        Objects.equals(this.additionalProperties, educations.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, id, degree, school, major, minor, from, to, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Educations {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    degree: ").append(toIndentedString(degree)).append("\n");
    sb.append("    school: ").append(toIndentedString(school)).append("\n");
    sb.append("    major: ").append(toIndentedString(major)).append("\n");
    sb.append("    minor: ").append(toIndentedString(minor)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("id");
    openapiFields.add("degree");
    openapiFields.add("school");
    openapiFields.add("major");
    openapiFields.add("minor");
    openapiFields.add("from");
    openapiFields.add("to");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Educations
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Educations.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Educations is not found in the empty JSON string", Educations.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      // validate the optional field `degree`
      if (jsonObj.get("degree") != null && !jsonObj.get("degree").isJsonNull()) {
        EducationsDegree.validateJsonObject(jsonObj.getAsJsonObject("degree"));
      }
      // validate the optional field `school`
      if (jsonObj.get("school") != null && !jsonObj.get("school").isJsonNull()) {
        EducationsSchool.validateJsonObject(jsonObj.getAsJsonObject("school"));
      }
      // validate the optional field `major`
      if (jsonObj.get("major") != null && !jsonObj.get("major").isJsonNull()) {
        EducationsMajor.validateJsonObject(jsonObj.getAsJsonObject("major"));
      }
      // validate the optional field `minor`
      if (jsonObj.get("minor") != null && !jsonObj.get("minor").isJsonNull()) {
        EducationsMinor.validateJsonObject(jsonObj.getAsJsonObject("minor"));
      }
      // validate the optional field `from`
      if (jsonObj.get("from") != null && !jsonObj.get("from").isJsonNull()) {
        EducationsFrom.validateJsonObject(jsonObj.getAsJsonObject("from"));
      }
      // validate the optional field `to`
      if (jsonObj.get("to") != null && !jsonObj.get("to").isJsonNull()) {
        EducationsTo.validateJsonObject(jsonObj.getAsJsonObject("to"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Educations.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Educations' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Educations> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Educations.class));

       return (TypeAdapter<T>) new TypeAdapter<Educations>() {
           @Override
           public void write(JsonWriter out, Educations value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Educations read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Educations instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Educations given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Educations
  * @throws IOException if the JSON string is invalid with respect to Educations
  */
  public static Educations fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Educations.class);
  }

 /**
  * Convert an instance of Educations to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

