/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NewHirePostModelCompensation;
import com.konfigthis.client.model.NewHirePostModelContactInformation;
import com.konfigthis.client.model.NewHirePostModelJob;
import com.konfigthis.client.model.NewHirePostModelMentor;
import com.konfigthis.client.model.NewHirePostModelOrganizationLevelsInner;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * NewHirePostModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NewHirePostModel {
  public static final String SERIALIZED_NAME_CONTACT_INFORMATION = "contactInformation";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFORMATION)
  private NewHirePostModelContactInformation contactInformation;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private NewHirePostModelJob job;

  public static final String SERIALIZED_NAME_ORGANIZATION_LEVELS = "organizationLevels";
  @SerializedName(SERIALIZED_NAME_ORGANIZATION_LEVELS)
  private List<NewHirePostModelOrganizationLevelsInner> organizationLevels = null;

  public static final String SERIALIZED_NAME_COMPENSATION = "compensation";
  @SerializedName(SERIALIZED_NAME_COMPENSATION)
  private NewHirePostModelCompensation compensation;

  public static final String SERIALIZED_NAME_ONBOARDING_OWNER_ID = "onboardingOwnerId";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_OWNER_ID)
  private String onboardingOwnerId;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hireDate";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private OffsetDateTime hireDate;

  public static final String SERIALIZED_NAME_ORIENTATION_DATE = "orientationDate";
  @SerializedName(SERIALIZED_NAME_ORIENTATION_DATE)
  private OffsetDateTime orientationDate;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_PAST_START_DATE_REASON = "pastStartDateReason";
  @SerializedName(SERIALIZED_NAME_PAST_START_DATE_REASON)
  private String pastStartDateReason;

  public static final String SERIALIZED_NAME_MENTOR = "mentor";
  @SerializedName(SERIALIZED_NAME_MENTOR)
  private NewHirePostModelMentor mentor;

  public static final String SERIALIZED_NAME_PERSONAL_MESSAGE = "personalMessage";
  @SerializedName(SERIALIZED_NAME_PERSONAL_MESSAGE)
  private String personalMessage;

  public NewHirePostModel() {
  }

  public NewHirePostModel contactInformation(NewHirePostModelContactInformation contactInformation) {
    
    
    
    
    this.contactInformation = contactInformation;
    return this;
  }

   /**
   * Get contactInformation
   * @return contactInformation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NewHirePostModelContactInformation getContactInformation() {
    return contactInformation;
  }


  public void setContactInformation(NewHirePostModelContactInformation contactInformation) {
    
    
    
    this.contactInformation = contactInformation;
  }


  public NewHirePostModel job(NewHirePostModelJob job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Get job
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NewHirePostModelJob getJob() {
    return job;
  }


  public void setJob(NewHirePostModelJob job) {
    
    
    
    this.job = job;
  }


  public NewHirePostModel organizationLevels(List<NewHirePostModelOrganizationLevelsInner> organizationLevels) {
    
    
    
    
    this.organizationLevels = organizationLevels;
    return this;
  }

  public NewHirePostModel addOrganizationLevelsItem(NewHirePostModelOrganizationLevelsInner organizationLevelsItem) {
    if (this.organizationLevels == null) {
      this.organizationLevels = new ArrayList<>();
    }
    this.organizationLevels.add(organizationLevelsItem);
    return this;
  }

   /**
   * Get organizationLevels
   * @return organizationLevels
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<NewHirePostModelOrganizationLevelsInner> getOrganizationLevels() {
    return organizationLevels;
  }


  public void setOrganizationLevels(List<NewHirePostModelOrganizationLevelsInner> organizationLevels) {
    
    
    
    this.organizationLevels = organizationLevels;
  }


  public NewHirePostModel compensation(NewHirePostModelCompensation compensation) {
    
    
    
    
    this.compensation = compensation;
    return this;
  }

   /**
   * Get compensation
   * @return compensation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NewHirePostModelCompensation getCompensation() {
    return compensation;
  }


  public void setCompensation(NewHirePostModelCompensation compensation) {
    
    
    
    this.compensation = compensation;
  }


  public NewHirePostModel onboardingOwnerId(String onboardingOwnerId) {
    
    
    
    
    this.onboardingOwnerId = onboardingOwnerId;
    return this;
  }

   /**
   * External user identifier of the onboarding owner
   * @return onboardingOwnerId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "74A3D0C8-FF2A-4EC9-9263-F515B000A0C5", value = "External user identifier of the onboarding owner")

  public String getOnboardingOwnerId() {
    return onboardingOwnerId;
  }


  public void setOnboardingOwnerId(String onboardingOwnerId) {
    
    
    
    this.onboardingOwnerId = onboardingOwnerId;
  }


  public NewHirePostModel hireDate(OffsetDateTime hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * Hire date of the new hire
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Hire date of the new hire")

  public OffsetDateTime getHireDate() {
    return hireDate;
  }


  public void setHireDate(OffsetDateTime hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public NewHirePostModel orientationDate(OffsetDateTime orientationDate) {
    
    
    
    
    this.orientationDate = orientationDate;
    return this;
  }

   /**
   * Orientation date of the new hire
   * @return orientationDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Orientation date of the new hire")

  public OffsetDateTime getOrientationDate() {
    return orientationDate;
  }


  public void setOrientationDate(OffsetDateTime orientationDate) {
    
    
    
    this.orientationDate = orientationDate;
  }


  public NewHirePostModel startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Start date of the new hire
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Start date of the new hire")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public NewHirePostModel pastStartDateReason(String pastStartDateReason) {
    
    
    
    
    this.pastStartDateReason = pastStartDateReason;
    return this;
  }

   /**
   * Reason why the new hire start date is 4 or more business days in the past
   * @return pastStartDateReason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "An internal audit revealed that the new hire was not initiated", value = "Reason why the new hire start date is 4 or more business days in the past")

  public String getPastStartDateReason() {
    return pastStartDateReason;
  }


  public void setPastStartDateReason(String pastStartDateReason) {
    
    
    
    this.pastStartDateReason = pastStartDateReason;
  }


  public NewHirePostModel mentor(NewHirePostModelMentor mentor) {
    
    
    
    
    this.mentor = mentor;
    return this;
  }

   /**
   * Get mentor
   * @return mentor
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NewHirePostModelMentor getMentor() {
    return mentor;
  }


  public void setMentor(NewHirePostModelMentor mentor) {
    
    
    
    this.mentor = mentor;
  }


  public NewHirePostModel personalMessage(String personalMessage) {
    
    
    
    
    this.personalMessage = personalMessage;
    return this;
  }

   /**
   * Personal message for the new hire
   * @return personalMessage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Hugo, I was very impressed with your passion. I am looking forward to working with you and I know your expertise in this space will help our team get to the next level.", value = "Personal message for the new hire")

  public String getPersonalMessage() {
    return personalMessage;
  }


  public void setPersonalMessage(String personalMessage) {
    
    
    
    this.personalMessage = personalMessage;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NewHirePostModel instance itself
   */
  public NewHirePostModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewHirePostModel newHirePostModel = (NewHirePostModel) o;
    return Objects.equals(this.contactInformation, newHirePostModel.contactInformation) &&
        Objects.equals(this.job, newHirePostModel.job) &&
        Objects.equals(this.organizationLevels, newHirePostModel.organizationLevels) &&
        Objects.equals(this.compensation, newHirePostModel.compensation) &&
        Objects.equals(this.onboardingOwnerId, newHirePostModel.onboardingOwnerId) &&
        Objects.equals(this.hireDate, newHirePostModel.hireDate) &&
        Objects.equals(this.orientationDate, newHirePostModel.orientationDate) &&
        Objects.equals(this.startDate, newHirePostModel.startDate) &&
        Objects.equals(this.pastStartDateReason, newHirePostModel.pastStartDateReason) &&
        Objects.equals(this.mentor, newHirePostModel.mentor) &&
        Objects.equals(this.personalMessage, newHirePostModel.personalMessage)&&
        Objects.equals(this.additionalProperties, newHirePostModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(contactInformation, job, organizationLevels, compensation, onboardingOwnerId, hireDate, orientationDate, startDate, pastStartDateReason, mentor, personalMessage, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewHirePostModel {\n");
    sb.append("    contactInformation: ").append(toIndentedString(contactInformation)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    organizationLevels: ").append(toIndentedString(organizationLevels)).append("\n");
    sb.append("    compensation: ").append(toIndentedString(compensation)).append("\n");
    sb.append("    onboardingOwnerId: ").append(toIndentedString(onboardingOwnerId)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    orientationDate: ").append(toIndentedString(orientationDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    pastStartDateReason: ").append(toIndentedString(pastStartDateReason)).append("\n");
    sb.append("    mentor: ").append(toIndentedString(mentor)).append("\n");
    sb.append("    personalMessage: ").append(toIndentedString(personalMessage)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("contactInformation");
    openapiFields.add("job");
    openapiFields.add("organizationLevels");
    openapiFields.add("compensation");
    openapiFields.add("onboardingOwnerId");
    openapiFields.add("hireDate");
    openapiFields.add("orientationDate");
    openapiFields.add("startDate");
    openapiFields.add("pastStartDateReason");
    openapiFields.add("mentor");
    openapiFields.add("personalMessage");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewHirePostModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewHirePostModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewHirePostModel is not found in the empty JSON string", NewHirePostModel.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `contactInformation`
      if (jsonObj.get("contactInformation") != null && !jsonObj.get("contactInformation").isJsonNull()) {
        NewHirePostModelContactInformation.validateJsonObject(jsonObj.getAsJsonObject("contactInformation"));
      }
      // validate the optional field `job`
      if (jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) {
        NewHirePostModelJob.validateJsonObject(jsonObj.getAsJsonObject("job"));
      }
      if (jsonObj.get("organizationLevels") != null && !jsonObj.get("organizationLevels").isJsonNull()) {
        JsonArray jsonArrayorganizationLevels = jsonObj.getAsJsonArray("organizationLevels");
        if (jsonArrayorganizationLevels != null) {
          // ensure the json data is an array
          if (!jsonObj.get("organizationLevels").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `organizationLevels` to be an array in the JSON string but got `%s`", jsonObj.get("organizationLevels").toString()));
          }

          // validate the optional field `organizationLevels` (array)
          for (int i = 0; i < jsonArrayorganizationLevels.size(); i++) {
            NewHirePostModelOrganizationLevelsInner.validateJsonObject(jsonArrayorganizationLevels.get(i).getAsJsonObject());
          };
        }
      }
      // validate the optional field `compensation`
      if (jsonObj.get("compensation") != null && !jsonObj.get("compensation").isJsonNull()) {
        NewHirePostModelCompensation.validateJsonObject(jsonObj.getAsJsonObject("compensation"));
      }
      if ((jsonObj.get("onboardingOwnerId") != null && !jsonObj.get("onboardingOwnerId").isJsonNull()) && !jsonObj.get("onboardingOwnerId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `onboardingOwnerId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("onboardingOwnerId").toString()));
      }
      if ((jsonObj.get("pastStartDateReason") != null && !jsonObj.get("pastStartDateReason").isJsonNull()) && !jsonObj.get("pastStartDateReason").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `pastStartDateReason` to be a primitive type in the JSON string but got `%s`", jsonObj.get("pastStartDateReason").toString()));
      }
      // validate the optional field `mentor`
      if (jsonObj.get("mentor") != null && !jsonObj.get("mentor").isJsonNull()) {
        NewHirePostModelMentor.validateJsonObject(jsonObj.getAsJsonObject("mentor"));
      }
      if ((jsonObj.get("personalMessage") != null && !jsonObj.get("personalMessage").isJsonNull()) && !jsonObj.get("personalMessage").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `personalMessage` to be a primitive type in the JSON string but got `%s`", jsonObj.get("personalMessage").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewHirePostModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewHirePostModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewHirePostModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewHirePostModel.class));

       return (TypeAdapter<T>) new TypeAdapter<NewHirePostModel>() {
           @Override
           public void write(JsonWriter out, NewHirePostModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NewHirePostModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NewHirePostModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewHirePostModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewHirePostModel
  * @throws IOException if the JSON string is invalid with respect to NewHirePostModel
  */
  public static NewHirePostModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewHirePostModel.class);
  }

 /**
  * Convert an instance of NewHirePostModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

