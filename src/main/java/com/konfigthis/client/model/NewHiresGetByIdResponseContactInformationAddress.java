/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NewHiresGetByIdResponseContactInformationAddressCountry;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Address of the new hire
 */
@ApiModel(description = "Address of the new hire")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NewHiresGetByIdResponseContactInformationAddress {
  public static final String SERIALIZED_NAME_LINE1 = "line1";
  @SerializedName(SERIALIZED_NAME_LINE1)
  private String line1;

  public static final String SERIALIZED_NAME_LINE2 = "line2";
  @SerializedName(SERIALIZED_NAME_LINE2)
  private String line2;

  public static final String SERIALIZED_NAME_CITY = "city";
  @SerializedName(SERIALIZED_NAME_CITY)
  private String city;

  public static final String SERIALIZED_NAME_POSTAL_CODE = "postalCode";
  @SerializedName(SERIALIZED_NAME_POSTAL_CODE)
  private String postalCode;

  public static final String SERIALIZED_NAME_COUNTY = "county";
  @SerializedName(SERIALIZED_NAME_COUNTY)
  private String county;

  public static final String SERIALIZED_NAME_STATE_CODE = "stateCode";
  @SerializedName(SERIALIZED_NAME_STATE_CODE)
  private String stateCode;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_COUNTRY = "country";
  @SerializedName(SERIALIZED_NAME_COUNTRY)
  private NewHiresGetByIdResponseContactInformationAddressCountry country;

  public NewHiresGetByIdResponseContactInformationAddress() {
  }

  public NewHiresGetByIdResponseContactInformationAddress line1(String line1) {
    
    
    
    
    this.line1 = line1;
    return this;
  }

   /**
   * Line 1 of the address
   * @return line1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "123 Main St", value = "Line 1 of the address")

  public String getLine1() {
    return line1;
  }


  public void setLine1(String line1) {
    
    
    
    this.line1 = line1;
  }


  public NewHiresGetByIdResponseContactInformationAddress line2(String line2) {
    
    
    
    
    this.line2 = line2;
    return this;
  }

   /**
   * Line 2 of the address
   * @return line2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "APT. 101", value = "Line 2 of the address")

  public String getLine2() {
    return line2;
  }


  public void setLine2(String line2) {
    
    
    
    this.line2 = line2;
  }


  public NewHiresGetByIdResponseContactInformationAddress city(String city) {
    
    
    
    
    this.city = city;
    return this;
  }

   /**
   * City of the address
   * @return city
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Toronto", value = "City of the address")

  public String getCity() {
    return city;
  }


  public void setCity(String city) {
    
    
    
    this.city = city;
  }


  public NewHiresGetByIdResponseContactInformationAddress postalCode(String postalCode) {
    
    
    
    
    this.postalCode = postalCode;
    return this;
  }

   /**
   * Zip/postal code of the address
   * @return postalCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "M1R0E9", value = "Zip/postal code of the address")

  public String getPostalCode() {
    return postalCode;
  }


  public void setPostalCode(String postalCode) {
    
    
    
    this.postalCode = postalCode;
  }


  public NewHiresGetByIdResponseContactInformationAddress county(String county) {
    
    
    
    
    this.county = county;
    return this;
  }

   /**
   * County of the address
   * @return county
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "County of Canada", value = "County of the address")

  public String getCounty() {
    return county;
  }


  public void setCounty(String county) {
    
    
    
    this.county = county;
  }


  public NewHiresGetByIdResponseContactInformationAddress stateCode(String stateCode) {
    
    
    
    
    this.stateCode = stateCode;
    return this;
  }

   /**
   * State code of the address
   * @return stateCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "true", value = "State code of the address")

  public String getStateCode() {
    return stateCode;
  }


  public void setStateCode(String stateCode) {
    
    
    
    this.stateCode = stateCode;
  }


  public NewHiresGetByIdResponseContactInformationAddress countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Country code of the address
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "CAN", value = "Country code of the address")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public NewHiresGetByIdResponseContactInformationAddress country(NewHiresGetByIdResponseContactInformationAddressCountry country) {
    
    
    
    
    this.country = country;
    return this;
  }

   /**
   * Get country
   * @return country
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NewHiresGetByIdResponseContactInformationAddressCountry getCountry() {
    return country;
  }


  public void setCountry(NewHiresGetByIdResponseContactInformationAddressCountry country) {
    
    
    
    this.country = country;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NewHiresGetByIdResponseContactInformationAddress instance itself
   */
  public NewHiresGetByIdResponseContactInformationAddress putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewHiresGetByIdResponseContactInformationAddress newHiresGetByIdResponseContactInformationAddress = (NewHiresGetByIdResponseContactInformationAddress) o;
    return Objects.equals(this.line1, newHiresGetByIdResponseContactInformationAddress.line1) &&
        Objects.equals(this.line2, newHiresGetByIdResponseContactInformationAddress.line2) &&
        Objects.equals(this.city, newHiresGetByIdResponseContactInformationAddress.city) &&
        Objects.equals(this.postalCode, newHiresGetByIdResponseContactInformationAddress.postalCode) &&
        Objects.equals(this.county, newHiresGetByIdResponseContactInformationAddress.county) &&
        Objects.equals(this.stateCode, newHiresGetByIdResponseContactInformationAddress.stateCode) &&
        Objects.equals(this.countryCode, newHiresGetByIdResponseContactInformationAddress.countryCode) &&
        Objects.equals(this.country, newHiresGetByIdResponseContactInformationAddress.country)&&
        Objects.equals(this.additionalProperties, newHiresGetByIdResponseContactInformationAddress.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(line1, line2, city, postalCode, county, stateCode, countryCode, country, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewHiresGetByIdResponseContactInformationAddress {\n");
    sb.append("    line1: ").append(toIndentedString(line1)).append("\n");
    sb.append("    line2: ").append(toIndentedString(line2)).append("\n");
    sb.append("    city: ").append(toIndentedString(city)).append("\n");
    sb.append("    postalCode: ").append(toIndentedString(postalCode)).append("\n");
    sb.append("    county: ").append(toIndentedString(county)).append("\n");
    sb.append("    stateCode: ").append(toIndentedString(stateCode)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    country: ").append(toIndentedString(country)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("line1");
    openapiFields.add("line2");
    openapiFields.add("city");
    openapiFields.add("postalCode");
    openapiFields.add("county");
    openapiFields.add("stateCode");
    openapiFields.add("countryCode");
    openapiFields.add("country");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewHiresGetByIdResponseContactInformationAddress
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewHiresGetByIdResponseContactInformationAddress.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewHiresGetByIdResponseContactInformationAddress is not found in the empty JSON string", NewHiresGetByIdResponseContactInformationAddress.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("line1") != null && !jsonObj.get("line1").isJsonNull()) && !jsonObj.get("line1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line1").toString()));
      }
      if ((jsonObj.get("line2") != null && !jsonObj.get("line2").isJsonNull()) && !jsonObj.get("line2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `line2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("line2").toString()));
      }
      if ((jsonObj.get("city") != null && !jsonObj.get("city").isJsonNull()) && !jsonObj.get("city").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `city` to be a primitive type in the JSON string but got `%s`", jsonObj.get("city").toString()));
      }
      if ((jsonObj.get("postalCode") != null && !jsonObj.get("postalCode").isJsonNull()) && !jsonObj.get("postalCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `postalCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("postalCode").toString()));
      }
      if ((jsonObj.get("county") != null && !jsonObj.get("county").isJsonNull()) && !jsonObj.get("county").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `county` to be a primitive type in the JSON string but got `%s`", jsonObj.get("county").toString()));
      }
      if ((jsonObj.get("stateCode") != null && !jsonObj.get("stateCode").isJsonNull()) && !jsonObj.get("stateCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `stateCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("stateCode").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      // validate the optional field `country`
      if (jsonObj.get("country") != null && !jsonObj.get("country").isJsonNull()) {
        NewHiresGetByIdResponseContactInformationAddressCountry.validateJsonObject(jsonObj.getAsJsonObject("country"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewHiresGetByIdResponseContactInformationAddress.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewHiresGetByIdResponseContactInformationAddress' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewHiresGetByIdResponseContactInformationAddress> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewHiresGetByIdResponseContactInformationAddress.class));

       return (TypeAdapter<T>) new TypeAdapter<NewHiresGetByIdResponseContactInformationAddress>() {
           @Override
           public void write(JsonWriter out, NewHiresGetByIdResponseContactInformationAddress value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NewHiresGetByIdResponseContactInformationAddress read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NewHiresGetByIdResponseContactInformationAddress instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewHiresGetByIdResponseContactInformationAddress given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewHiresGetByIdResponseContactInformationAddress
  * @throws IOException if the JSON string is invalid with respect to NewHiresGetByIdResponseContactInformationAddress
  */
  public static NewHiresGetByIdResponseContactInformationAddress fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewHiresGetByIdResponseContactInformationAddress.class);
  }

 /**
  * Convert an instance of NewHiresGetByIdResponseContactInformationAddress to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

