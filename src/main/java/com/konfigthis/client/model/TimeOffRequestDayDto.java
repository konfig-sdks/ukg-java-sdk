/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.TimeOffReasonDto;
import com.konfigthis.client.model.TimeOffTypeDto;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * TimeOffRequestDayDto
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class TimeOffRequestDayDto {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private Long id;

  public static final String SERIALIZED_NAME_REQUEST_ID = "requestId";
  @SerializedName(SERIALIZED_NAME_REQUEST_ID)
  private Long requestId;

  public static final String SERIALIZED_NAME_DATE = "date";
  @SerializedName(SERIALIZED_NAME_DATE)
  private OffsetDateTime date;

  public static final String SERIALIZED_NAME_FROM = "from";
  @SerializedName(SERIALIZED_NAME_FROM)
  private Integer from;

  public static final String SERIALIZED_NAME_TO = "to";
  @SerializedName(SERIALIZED_NAME_TO)
  private Integer to;

  public static final String SERIALIZED_NAME_FULL_DAY = "fullDay";
  @SerializedName(SERIALIZED_NAME_FULL_DAY)
  private Boolean fullDay = false;

  public static final String SERIALIZED_NAME_STATUS = "status";
  @SerializedName(SERIALIZED_NAME_STATUS)
  private String status;

  public static final String SERIALIZED_NAME_TYPE = "type";
  @SerializedName(SERIALIZED_NAME_TYPE)
  private TimeOffTypeDto type;

  public static final String SERIALIZED_NAME_REASON = "reason";
  @SerializedName(SERIALIZED_NAME_REASON)
  private TimeOffReasonDto reason;

  public static final String SERIALIZED_NAME_EMP_COMMENT = "empComment";
  @SerializedName(SERIALIZED_NAME_EMP_COMMENT)
  private String empComment;

  public static final String SERIALIZED_NAME_CONCLUSION_DATE = "conclusionDate";
  @SerializedName(SERIALIZED_NAME_CONCLUSION_DATE)
  private OffsetDateTime conclusionDate;

  public static final String SERIALIZED_NAME_CONCLUSION_COMMENT = "conclusionComment";
  @SerializedName(SERIALIZED_NAME_CONCLUSION_COMMENT)
  private String conclusionComment;

  public static final String SERIALIZED_NAME_PAY_IN_ADV = "payInAdv";
  @SerializedName(SERIALIZED_NAME_PAY_IN_ADV)
  private Boolean payInAdv = false;

  public static final String SERIALIZED_NAME_SUBMITTED_DATE = "submittedDate";
  @SerializedName(SERIALIZED_NAME_SUBMITTED_DATE)
  private OffsetDateTime submittedDate;

  public static final String SERIALIZED_NAME_EMP_ID = "empId";
  @SerializedName(SERIALIZED_NAME_EMP_ID)
  private Long empId;

  public TimeOffRequestDayDto() {
  }

  public TimeOffRequestDayDto id(Long id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * Get id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getId() {
    return id;
  }


  public void setId(Long id) {
    
    
    
    this.id = id;
  }


  public TimeOffRequestDayDto requestId(Long requestId) {
    
    
    
    
    this.requestId = requestId;
    return this;
  }

   /**
   * Get requestId
   * @return requestId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getRequestId() {
    return requestId;
  }


  public void setRequestId(Long requestId) {
    
    
    
    this.requestId = requestId;
  }


  public TimeOffRequestDayDto date(OffsetDateTime date) {
    
    
    
    
    this.date = date;
    return this;
  }

   /**
   * Get date
   * @return date
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDate() {
    return date;
  }


  public void setDate(OffsetDateTime date) {
    
    
    
    this.date = date;
  }


  public TimeOffRequestDayDto from(Integer from) {
    
    
    
    
    this.from = from;
    return this;
  }

   /**
   * Get from
   * @return from
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getFrom() {
    return from;
  }


  public void setFrom(Integer from) {
    
    
    
    this.from = from;
  }


  public TimeOffRequestDayDto to(Integer to) {
    
    
    
    
    this.to = to;
    return this;
  }

   /**
   * Get to
   * @return to
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getTo() {
    return to;
  }


  public void setTo(Integer to) {
    
    
    
    this.to = to;
  }


  public TimeOffRequestDayDto fullDay(Boolean fullDay) {
    
    
    
    
    this.fullDay = fullDay;
    return this;
  }

   /**
   * Get fullDay
   * @return fullDay
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getFullDay() {
    return fullDay;
  }


  public void setFullDay(Boolean fullDay) {
    
    
    
    this.fullDay = fullDay;
  }


  public TimeOffRequestDayDto status(String status) {
    
    
    
    
    this.status = status;
    return this;
  }

   /**
   * Get status
   * @return status
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getStatus() {
    return status;
  }


  public void setStatus(String status) {
    
    
    
    this.status = status;
  }


  public TimeOffRequestDayDto type(TimeOffTypeDto type) {
    
    
    
    
    this.type = type;
    return this;
  }

   /**
   * Get type
   * @return type
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeOffTypeDto getType() {
    return type;
  }


  public void setType(TimeOffTypeDto type) {
    
    
    
    this.type = type;
  }


  public TimeOffRequestDayDto reason(TimeOffReasonDto reason) {
    
    
    
    
    this.reason = reason;
    return this;
  }

   /**
   * Get reason
   * @return reason
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public TimeOffReasonDto getReason() {
    return reason;
  }


  public void setReason(TimeOffReasonDto reason) {
    
    
    
    this.reason = reason;
  }


  public TimeOffRequestDayDto empComment(String empComment) {
    
    
    
    
    this.empComment = empComment;
    return this;
  }

   /**
   * Get empComment
   * @return empComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmpComment() {
    return empComment;
  }


  public void setEmpComment(String empComment) {
    
    
    
    this.empComment = empComment;
  }


  public TimeOffRequestDayDto conclusionDate(OffsetDateTime conclusionDate) {
    
    
    
    
    this.conclusionDate = conclusionDate;
    return this;
  }

   /**
   * Get conclusionDate
   * @return conclusionDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getConclusionDate() {
    return conclusionDate;
  }


  public void setConclusionDate(OffsetDateTime conclusionDate) {
    
    
    
    this.conclusionDate = conclusionDate;
  }


  public TimeOffRequestDayDto conclusionComment(String conclusionComment) {
    
    
    
    
    this.conclusionComment = conclusionComment;
    return this;
  }

   /**
   * Get conclusionComment
   * @return conclusionComment
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getConclusionComment() {
    return conclusionComment;
  }


  public void setConclusionComment(String conclusionComment) {
    
    
    
    this.conclusionComment = conclusionComment;
  }


  public TimeOffRequestDayDto payInAdv(Boolean payInAdv) {
    
    
    
    
    this.payInAdv = payInAdv;
    return this;
  }

   /**
   * Get payInAdv
   * @return payInAdv
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "false", value = "")

  public Boolean getPayInAdv() {
    return payInAdv;
  }


  public void setPayInAdv(Boolean payInAdv) {
    
    
    
    this.payInAdv = payInAdv;
  }


  public TimeOffRequestDayDto submittedDate(OffsetDateTime submittedDate) {
    
    
    
    
    this.submittedDate = submittedDate;
    return this;
  }

   /**
   * Get submittedDate
   * @return submittedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getSubmittedDate() {
    return submittedDate;
  }


  public void setSubmittedDate(OffsetDateTime submittedDate) {
    
    
    
    this.submittedDate = submittedDate;
  }


  public TimeOffRequestDayDto empId(Long empId) {
    
    
    
    
    this.empId = empId;
    return this;
  }

   /**
   * Get empId
   * @return empId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Long getEmpId() {
    return empId;
  }


  public void setEmpId(Long empId) {
    
    
    
    this.empId = empId;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the TimeOffRequestDayDto instance itself
   */
  public TimeOffRequestDayDto putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    TimeOffRequestDayDto timeOffRequestDayDto = (TimeOffRequestDayDto) o;
    return Objects.equals(this.id, timeOffRequestDayDto.id) &&
        Objects.equals(this.requestId, timeOffRequestDayDto.requestId) &&
        Objects.equals(this.date, timeOffRequestDayDto.date) &&
        Objects.equals(this.from, timeOffRequestDayDto.from) &&
        Objects.equals(this.to, timeOffRequestDayDto.to) &&
        Objects.equals(this.fullDay, timeOffRequestDayDto.fullDay) &&
        Objects.equals(this.status, timeOffRequestDayDto.status) &&
        Objects.equals(this.type, timeOffRequestDayDto.type) &&
        Objects.equals(this.reason, timeOffRequestDayDto.reason) &&
        Objects.equals(this.empComment, timeOffRequestDayDto.empComment) &&
        Objects.equals(this.conclusionDate, timeOffRequestDayDto.conclusionDate) &&
        Objects.equals(this.conclusionComment, timeOffRequestDayDto.conclusionComment) &&
        Objects.equals(this.payInAdv, timeOffRequestDayDto.payInAdv) &&
        Objects.equals(this.submittedDate, timeOffRequestDayDto.submittedDate) &&
        Objects.equals(this.empId, timeOffRequestDayDto.empId)&&
        Objects.equals(this.additionalProperties, timeOffRequestDayDto.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, requestId, date, from, to, fullDay, status, type, reason, empComment, conclusionDate, conclusionComment, payInAdv, submittedDate, empId, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class TimeOffRequestDayDto {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    requestId: ").append(toIndentedString(requestId)).append("\n");
    sb.append("    date: ").append(toIndentedString(date)).append("\n");
    sb.append("    from: ").append(toIndentedString(from)).append("\n");
    sb.append("    to: ").append(toIndentedString(to)).append("\n");
    sb.append("    fullDay: ").append(toIndentedString(fullDay)).append("\n");
    sb.append("    status: ").append(toIndentedString(status)).append("\n");
    sb.append("    type: ").append(toIndentedString(type)).append("\n");
    sb.append("    reason: ").append(toIndentedString(reason)).append("\n");
    sb.append("    empComment: ").append(toIndentedString(empComment)).append("\n");
    sb.append("    conclusionDate: ").append(toIndentedString(conclusionDate)).append("\n");
    sb.append("    conclusionComment: ").append(toIndentedString(conclusionComment)).append("\n");
    sb.append("    payInAdv: ").append(toIndentedString(payInAdv)).append("\n");
    sb.append("    submittedDate: ").append(toIndentedString(submittedDate)).append("\n");
    sb.append("    empId: ").append(toIndentedString(empId)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("requestId");
    openapiFields.add("date");
    openapiFields.add("from");
    openapiFields.add("to");
    openapiFields.add("fullDay");
    openapiFields.add("status");
    openapiFields.add("type");
    openapiFields.add("reason");
    openapiFields.add("empComment");
    openapiFields.add("conclusionDate");
    openapiFields.add("conclusionComment");
    openapiFields.add("payInAdv");
    openapiFields.add("submittedDate");
    openapiFields.add("empId");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to TimeOffRequestDayDto
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!TimeOffRequestDayDto.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in TimeOffRequestDayDto is not found in the empty JSON string", TimeOffRequestDayDto.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("status") != null && !jsonObj.get("status").isJsonNull()) && !jsonObj.get("status").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `status` to be a primitive type in the JSON string but got `%s`", jsonObj.get("status").toString()));
      }
      // validate the optional field `type`
      if (jsonObj.get("type") != null && !jsonObj.get("type").isJsonNull()) {
        TimeOffTypeDto.validateJsonObject(jsonObj.getAsJsonObject("type"));
      }
      // validate the optional field `reason`
      if (jsonObj.get("reason") != null && !jsonObj.get("reason").isJsonNull()) {
        TimeOffReasonDto.validateJsonObject(jsonObj.getAsJsonObject("reason"));
      }
      if ((jsonObj.get("empComment") != null && !jsonObj.get("empComment").isJsonNull()) && !jsonObj.get("empComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `empComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("empComment").toString()));
      }
      if ((jsonObj.get("conclusionComment") != null && !jsonObj.get("conclusionComment").isJsonNull()) && !jsonObj.get("conclusionComment").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `conclusionComment` to be a primitive type in the JSON string but got `%s`", jsonObj.get("conclusionComment").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!TimeOffRequestDayDto.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'TimeOffRequestDayDto' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<TimeOffRequestDayDto> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(TimeOffRequestDayDto.class));

       return (TypeAdapter<T>) new TypeAdapter<TimeOffRequestDayDto>() {
           @Override
           public void write(JsonWriter out, TimeOffRequestDayDto value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public TimeOffRequestDayDto read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             TimeOffRequestDayDto instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of TimeOffRequestDayDto given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of TimeOffRequestDayDto
  * @throws IOException if the JSON string is invalid with respect to TimeOffRequestDayDto
  */
  public static TimeOffRequestDayDto fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, TimeOffRequestDayDto.class);
  }

 /**
  * Convert an instance of TimeOffRequestDayDto to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

