/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireResponseMentorNamePrefix;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireResponseMentorNameSuffix;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Name of the mentor
 */
@ApiModel(description = "Name of the mentor")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class NewHiresCreateSingleNewHireResponseMentorName {
  public static final String SERIALIZED_NAME_PREFIX = "prefix";
  @SerializedName(SERIALIZED_NAME_PREFIX)
  private NewHiresCreateSingleNewHireResponseMentorNamePrefix prefix;

  public static final String SERIALIZED_NAME_FIRST = "first";
  @SerializedName(SERIALIZED_NAME_FIRST)
  private String first;

  public static final String SERIALIZED_NAME_MIDDLE = "middle";
  @SerializedName(SERIALIZED_NAME_MIDDLE)
  private String middle;

  public static final String SERIALIZED_NAME_LAST = "last";
  @SerializedName(SERIALIZED_NAME_LAST)
  private String last;

  public static final String SERIALIZED_NAME_FORMER_LAST = "formerLast";
  @SerializedName(SERIALIZED_NAME_FORMER_LAST)
  private String formerLast;

  public static final String SERIALIZED_NAME_SUFFIX = "suffix";
  @SerializedName(SERIALIZED_NAME_SUFFIX)
  private NewHiresCreateSingleNewHireResponseMentorNameSuffix suffix;

  public static final String SERIALIZED_NAME_PREFERRED_FIRST = "preferredFirst";
  @SerializedName(SERIALIZED_NAME_PREFERRED_FIRST)
  private String preferredFirst;

  public NewHiresCreateSingleNewHireResponseMentorName() {
  }

  public NewHiresCreateSingleNewHireResponseMentorName prefix(NewHiresCreateSingleNewHireResponseMentorNamePrefix prefix) {
    
    
    
    
    this.prefix = prefix;
    return this;
  }

   /**
   * Get prefix
   * @return prefix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NewHiresCreateSingleNewHireResponseMentorNamePrefix getPrefix() {
    return prefix;
  }


  public void setPrefix(NewHiresCreateSingleNewHireResponseMentorNamePrefix prefix) {
    
    
    
    this.prefix = prefix;
  }


  public NewHiresCreateSingleNewHireResponseMentorName first(String first) {
    
    
    
    
    this.first = first;
    return this;
  }

   /**
   * First name
   * @return first
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Oden", value = "First name")

  public String getFirst() {
    return first;
  }


  public void setFirst(String first) {
    
    
    
    this.first = first;
  }


  public NewHiresCreateSingleNewHireResponseMentorName middle(String middle) {
    
    
    
    
    this.middle = middle;
    return this;
  }

   /**
   * Middle name
   * @return middle
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Joe", value = "Middle name")

  public String getMiddle() {
    return middle;
  }


  public void setMiddle(String middle) {
    
    
    
    this.middle = middle;
  }


  public NewHiresCreateSingleNewHireResponseMentorName last(String last) {
    
    
    
    
    this.last = last;
    return this;
  }

   /**
   * Last name
   * @return last
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Leonerd", value = "Last name")

  public String getLast() {
    return last;
  }


  public void setLast(String last) {
    
    
    
    this.last = last;
  }


  public NewHiresCreateSingleNewHireResponseMentorName formerLast(String formerLast) {
    
    
    
    
    this.formerLast = formerLast;
    return this;
  }

   /**
   * Former last name
   * @return formerLast
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Former last name")

  public String getFormerLast() {
    return formerLast;
  }


  public void setFormerLast(String formerLast) {
    
    
    
    this.formerLast = formerLast;
  }


  public NewHiresCreateSingleNewHireResponseMentorName suffix(NewHiresCreateSingleNewHireResponseMentorNameSuffix suffix) {
    
    
    
    
    this.suffix = suffix;
    return this;
  }

   /**
   * Get suffix
   * @return suffix
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public NewHiresCreateSingleNewHireResponseMentorNameSuffix getSuffix() {
    return suffix;
  }


  public void setSuffix(NewHiresCreateSingleNewHireResponseMentorNameSuffix suffix) {
    
    
    
    this.suffix = suffix;
  }


  public NewHiresCreateSingleNewHireResponseMentorName preferredFirst(String preferredFirst) {
    
    
    
    
    this.preferredFirst = preferredFirst;
    return this;
  }

   /**
   * Preferred first name
   * @return preferredFirst
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "Kevin", value = "Preferred first name")

  public String getPreferredFirst() {
    return preferredFirst;
  }


  public void setPreferredFirst(String preferredFirst) {
    
    
    
    this.preferredFirst = preferredFirst;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the NewHiresCreateSingleNewHireResponseMentorName instance itself
   */
  public NewHiresCreateSingleNewHireResponseMentorName putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    NewHiresCreateSingleNewHireResponseMentorName newHiresCreateSingleNewHireResponseMentorName = (NewHiresCreateSingleNewHireResponseMentorName) o;
    return Objects.equals(this.prefix, newHiresCreateSingleNewHireResponseMentorName.prefix) &&
        Objects.equals(this.first, newHiresCreateSingleNewHireResponseMentorName.first) &&
        Objects.equals(this.middle, newHiresCreateSingleNewHireResponseMentorName.middle) &&
        Objects.equals(this.last, newHiresCreateSingleNewHireResponseMentorName.last) &&
        Objects.equals(this.formerLast, newHiresCreateSingleNewHireResponseMentorName.formerLast) &&
        Objects.equals(this.suffix, newHiresCreateSingleNewHireResponseMentorName.suffix) &&
        Objects.equals(this.preferredFirst, newHiresCreateSingleNewHireResponseMentorName.preferredFirst)&&
        Objects.equals(this.additionalProperties, newHiresCreateSingleNewHireResponseMentorName.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(prefix, first, middle, last, formerLast, suffix, preferredFirst, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class NewHiresCreateSingleNewHireResponseMentorName {\n");
    sb.append("    prefix: ").append(toIndentedString(prefix)).append("\n");
    sb.append("    first: ").append(toIndentedString(first)).append("\n");
    sb.append("    middle: ").append(toIndentedString(middle)).append("\n");
    sb.append("    last: ").append(toIndentedString(last)).append("\n");
    sb.append("    formerLast: ").append(toIndentedString(formerLast)).append("\n");
    sb.append("    suffix: ").append(toIndentedString(suffix)).append("\n");
    sb.append("    preferredFirst: ").append(toIndentedString(preferredFirst)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("prefix");
    openapiFields.add("first");
    openapiFields.add("middle");
    openapiFields.add("last");
    openapiFields.add("formerLast");
    openapiFields.add("suffix");
    openapiFields.add("preferredFirst");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to NewHiresCreateSingleNewHireResponseMentorName
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!NewHiresCreateSingleNewHireResponseMentorName.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in NewHiresCreateSingleNewHireResponseMentorName is not found in the empty JSON string", NewHiresCreateSingleNewHireResponseMentorName.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `prefix`
      if (jsonObj.get("prefix") != null && !jsonObj.get("prefix").isJsonNull()) {
        NewHiresCreateSingleNewHireResponseMentorNamePrefix.validateJsonObject(jsonObj.getAsJsonObject("prefix"));
      }
      if ((jsonObj.get("first") != null && !jsonObj.get("first").isJsonNull()) && !jsonObj.get("first").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `first` to be a primitive type in the JSON string but got `%s`", jsonObj.get("first").toString()));
      }
      if ((jsonObj.get("middle") != null && !jsonObj.get("middle").isJsonNull()) && !jsonObj.get("middle").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `middle` to be a primitive type in the JSON string but got `%s`", jsonObj.get("middle").toString()));
      }
      if ((jsonObj.get("last") != null && !jsonObj.get("last").isJsonNull()) && !jsonObj.get("last").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `last` to be a primitive type in the JSON string but got `%s`", jsonObj.get("last").toString()));
      }
      if ((jsonObj.get("formerLast") != null && !jsonObj.get("formerLast").isJsonNull()) && !jsonObj.get("formerLast").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `formerLast` to be a primitive type in the JSON string but got `%s`", jsonObj.get("formerLast").toString()));
      }
      // validate the optional field `suffix`
      if (jsonObj.get("suffix") != null && !jsonObj.get("suffix").isJsonNull()) {
        NewHiresCreateSingleNewHireResponseMentorNameSuffix.validateJsonObject(jsonObj.getAsJsonObject("suffix"));
      }
      if ((jsonObj.get("preferredFirst") != null && !jsonObj.get("preferredFirst").isJsonNull()) && !jsonObj.get("preferredFirst").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `preferredFirst` to be a primitive type in the JSON string but got `%s`", jsonObj.get("preferredFirst").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!NewHiresCreateSingleNewHireResponseMentorName.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'NewHiresCreateSingleNewHireResponseMentorName' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<NewHiresCreateSingleNewHireResponseMentorName> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(NewHiresCreateSingleNewHireResponseMentorName.class));

       return (TypeAdapter<T>) new TypeAdapter<NewHiresCreateSingleNewHireResponseMentorName>() {
           @Override
           public void write(JsonWriter out, NewHiresCreateSingleNewHireResponseMentorName value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public NewHiresCreateSingleNewHireResponseMentorName read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             NewHiresCreateSingleNewHireResponseMentorName instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of NewHiresCreateSingleNewHireResponseMentorName given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of NewHiresCreateSingleNewHireResponseMentorName
  * @throws IOException if the JSON string is invalid with respect to NewHiresCreateSingleNewHireResponseMentorName
  */
  public static NewHiresCreateSingleNewHireResponseMentorName fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, NewHiresCreateSingleNewHireResponseMentorName.class);
  }

 /**
  * Convert an instance of NewHiresCreateSingleNewHireResponseMentorName to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

