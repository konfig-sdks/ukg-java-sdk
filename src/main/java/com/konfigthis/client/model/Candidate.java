/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Behaviors;
import com.konfigthis.client.model.CandidatePreferredLocale;
import com.konfigthis.client.model.ContactInfo;
import com.konfigthis.client.model.Educations;
import com.konfigthis.client.model.Hyperlinks;
import com.konfigthis.client.model.Licenses;
import com.konfigthis.client.model.Links;
import com.konfigthis.client.model.Motivations;
import com.konfigthis.client.model.Name;
import com.konfigthis.client.model.Skill;
import com.konfigthis.client.model.Workexperience;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import org.openapitools.jackson.nullable.JsonNullable;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The section with details of a candidate whom the background check order is requested for
 */
@ApiModel(description = "The section with details of a candidate whom the background check order is requested for")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Candidate {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_CREATED_AT = "created_at";
  @SerializedName(SERIALIZED_NAME_CREATED_AT)
  private String createdAt;

  public static final String SERIALIZED_NAME_CREATOR_ID = "creator.id";
  @SerializedName(SERIALIZED_NAME_CREATOR_ID)
  private String creatorId;

  public static final String SERIALIZED_NAME_PERSON_ID = "person_id";
  @SerializedName(SERIALIZED_NAME_PERSON_ID)
  private String personId;

  public static final String SERIALIZED_NAME_INTEGRATION = "integration";
  @SerializedName(SERIALIZED_NAME_INTEGRATION)
  private String integration;

  public static final String SERIALIZED_NAME_IS_INTERNAL = "is_internal";
  @SerializedName(SERIALIZED_NAME_IS_INTERNAL)
  private String isInternal;

  public static final String SERIALIZED_NAME_IS_ACTIVE = "is_active";
  @SerializedName(SERIALIZED_NAME_IS_ACTIVE)
  private String isActive;

  public static final String SERIALIZED_NAME_IS_WILLING_TO_RELOCATE = "is_willing_to_relocate";
  @SerializedName(SERIALIZED_NAME_IS_WILLING_TO_RELOCATE)
  private String isWillingToRelocate;

  public static final String SERIALIZED_NAME_PREFERRED_LOCALE = "preferred_locale";
  @SerializedName(SERIALIZED_NAME_PREFERRED_LOCALE)
  private CandidatePreferredLocale preferredLocale;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private List<Name> name = null;

  public static final String SERIALIZED_NAME_CONTACT_INFO = "contact_info";
  @SerializedName(SERIALIZED_NAME_CONTACT_INFO)
  private List<ContactInfo> contactInfo = null;

  public static final String SERIALIZED_NAME_SKILLS = "skills";
  @SerializedName(SERIALIZED_NAME_SKILLS)
  private List<Skill> skills = null;

  public static final String SERIALIZED_NAME_WORK_EXPERIENCE = "work_experience";
  @SerializedName(SERIALIZED_NAME_WORK_EXPERIENCE)
  private List<Workexperience> workExperience = null;

  public static final String SERIALIZED_NAME_EDUCATIONS = "educations";
  @SerializedName(SERIALIZED_NAME_EDUCATIONS)
  private List<Educations> educations = null;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<Licenses> licenses = null;

  public static final String SERIALIZED_NAME_BEHAVIORS = "behaviors";
  @SerializedName(SERIALIZED_NAME_BEHAVIORS)
  private List<Behaviors> behaviors = null;

  public static final String SERIALIZED_NAME_MOTIVATIONS = "motivations";
  @SerializedName(SERIALIZED_NAME_MOTIVATIONS)
  private List<Motivations> motivations = null;

  public static final String SERIALIZED_NAME_ROLES = "roles";
  @SerializedName(SERIALIZED_NAME_ROLES)
  private List<Object> roles = null;

  public static final String SERIALIZED_NAME_HYPERLINKS = "hyperlinks";
  @SerializedName(SERIALIZED_NAME_HYPERLINKS)
  private List<Hyperlinks> hyperlinks = null;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_ORG_UNITS = "org_units";
  @SerializedName(SERIALIZED_NAME_ORG_UNITS)
  private Object orgUnits = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Links> links = null;

  public Candidate() {
  }

  public Candidate id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The id of the candidate for whom the background check order has been requested.
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the candidate for whom the background check order has been requested.")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Candidate createdAt(String createdAt) {
    
    
    
    
    this.createdAt = createdAt;
    return this;
  }

   /**
   * The candidate creation date.
   * @return createdAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The candidate creation date.")

  public String getCreatedAt() {
    return createdAt;
  }


  public void setCreatedAt(String createdAt) {
    
    
    
    this.createdAt = createdAt;
  }


  public Candidate creatorId(String creatorId) {
    
    
    
    
    this.creatorId = creatorId;
    return this;
  }

   /**
   * The id of the person who has created the application.
   * @return creatorId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The id of the person who has created the application.")

  public String getCreatorId() {
    return creatorId;
  }


  public void setCreatorId(String creatorId) {
    
    
    
    this.creatorId = creatorId;
  }


  public Candidate personId(String personId) {
    
    
    
    
    this.personId = personId;
    return this;
  }

   /**
   * The candidate id in the core HR system.
   * @return personId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The candidate id in the core HR system.")

  public String getPersonId() {
    return personId;
  }


  public void setPersonId(String personId) {
    
    
    
    this.personId = personId;
  }


  public Candidate integration(String integration) {
    
    
    
    
    this.integration = integration;
    return this;
  }

   /**
   * The alternative user id that can be used in third-party vendors’ integrations. Returned only for users with the “recruiter”, “hiring-manager”, or “recruiting-administrator” role.
   * @return integration
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The alternative user id that can be used in third-party vendors’ integrations. Returned only for users with the “recruiter”, “hiring-manager”, or “recruiting-administrator” role.")

  public String getIntegration() {
    return integration;
  }


  public void setIntegration(String integration) {
    
    
    
    this.integration = integration;
  }


  public Candidate isInternal(String isInternal) {
    
    
    
    
    this.isInternal = isInternal;
    return this;
  }

   /**
   * A flag indicating whether the candidate is an internal employee. 
   * @return isInternal
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A flag indicating whether the candidate is an internal employee. ")

  public String getIsInternal() {
    return isInternal;
  }


  public void setIsInternal(String isInternal) {
    
    
    
    this.isInternal = isInternal;
  }


  public Candidate isActive(String isActive) {
    
    
    
    
    this.isActive = isActive;
    return this;
  }

   /**
   * A flag indicating whether the candidate is an active employee. Can only be specified when is_internal is true.
   * @return isActive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A flag indicating whether the candidate is an active employee. Can only be specified when is_internal is true.")

  public String getIsActive() {
    return isActive;
  }


  public void setIsActive(String isActive) {
    
    
    
    this.isActive = isActive;
  }


  public Candidate isWillingToRelocate(String isWillingToRelocate) {
    
    
    
    
    this.isWillingToRelocate = isWillingToRelocate;
    return this;
  }

   /**
   * A flag indicating whether the candidate is willing to relocate. 
   * @return isWillingToRelocate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "A flag indicating whether the candidate is willing to relocate. ")

  public String getIsWillingToRelocate() {
    return isWillingToRelocate;
  }


  public void setIsWillingToRelocate(String isWillingToRelocate) {
    
    
    
    this.isWillingToRelocate = isWillingToRelocate;
  }


  public Candidate preferredLocale(CandidatePreferredLocale preferredLocale) {
    
    
    
    
    this.preferredLocale = preferredLocale;
    return this;
  }

   /**
   * Get preferredLocale
   * @return preferredLocale
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public CandidatePreferredLocale getPreferredLocale() {
    return preferredLocale;
  }


  public void setPreferredLocale(CandidatePreferredLocale preferredLocale) {
    
    
    
    this.preferredLocale = preferredLocale;
  }


  public Candidate name(List<Name> name) {
    
    
    
    
    this.name = name;
    return this;
  }

  public Candidate addNameItem(Name nameItem) {
    if (this.name == null) {
      this.name = new ArrayList<>();
    }
    this.name.add(nameItem);
    return this;
  }

   /**
   * 
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Name> getName() {
    return name;
  }


  public void setName(List<Name> name) {
    
    
    
    this.name = name;
  }


  public Candidate contactInfo(List<ContactInfo> contactInfo) {
    
    
    
    
    this.contactInfo = contactInfo;
    return this;
  }

  public Candidate addContactInfoItem(ContactInfo contactInfoItem) {
    if (this.contactInfo == null) {
      this.contactInfo = new ArrayList<>();
    }
    this.contactInfo.add(contactInfoItem);
    return this;
  }

   /**
   * Get contactInfo
   * @return contactInfo
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ContactInfo> getContactInfo() {
    return contactInfo;
  }


  public void setContactInfo(List<ContactInfo> contactInfo) {
    
    
    
    this.contactInfo = contactInfo;
  }


  public Candidate skills(List<Skill> skills) {
    
    
    
    
    this.skills = skills;
    return this;
  }

  public Candidate addSkillsItem(Skill skillsItem) {
    if (this.skills == null) {
      this.skills = new ArrayList<>();
    }
    this.skills.add(skillsItem);
    return this;
  }

   /**
   * An array containing candidate’s skills.
   * @return skills
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array containing candidate’s skills.")

  public List<Skill> getSkills() {
    return skills;
  }


  public void setSkills(List<Skill> skills) {
    
    
    
    this.skills = skills;
  }


  public Candidate workExperience(List<Workexperience> workExperience) {
    
    
    
    
    this.workExperience = workExperience;
    return this;
  }

  public Candidate addWorkExperienceItem(Workexperience workExperienceItem) {
    if (this.workExperience == null) {
      this.workExperience = new ArrayList<>();
    }
    this.workExperience.add(workExperienceItem);
    return this;
  }

   /**
   * Get workExperience
   * @return workExperience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Workexperience> getWorkExperience() {
    return workExperience;
  }


  public void setWorkExperience(List<Workexperience> workExperience) {
    
    
    
    this.workExperience = workExperience;
  }


  public Candidate educations(List<Educations> educations) {
    
    
    
    
    this.educations = educations;
    return this;
  }

  public Candidate addEducationsItem(Educations educationsItem) {
    if (this.educations == null) {
      this.educations = new ArrayList<>();
    }
    this.educations.add(educationsItem);
    return this;
  }

   /**
   * Get educations
   * @return educations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Educations> getEducations() {
    return educations;
  }


  public void setEducations(List<Educations> educations) {
    
    
    
    this.educations = educations;
  }


  public Candidate licenses(List<Licenses> licenses) {
    
    
    
    
    this.licenses = licenses;
    return this;
  }

  public Candidate addLicensesItem(Licenses licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

   /**
   * Get licenses
   * @return licenses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Licenses> getLicenses() {
    return licenses;
  }


  public void setLicenses(List<Licenses> licenses) {
    
    
    
    this.licenses = licenses;
  }


  public Candidate behaviors(List<Behaviors> behaviors) {
    
    
    
    
    this.behaviors = behaviors;
    return this;
  }

  public Candidate addBehaviorsItem(Behaviors behaviorsItem) {
    if (this.behaviors == null) {
      this.behaviors = new ArrayList<>();
    }
    this.behaviors.add(behaviorsItem);
    return this;
  }

   /**
   * Get behaviors
   * @return behaviors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Behaviors> getBehaviors() {
    return behaviors;
  }


  public void setBehaviors(List<Behaviors> behaviors) {
    
    
    
    this.behaviors = behaviors;
  }


  public Candidate motivations(List<Motivations> motivations) {
    
    
    
    
    this.motivations = motivations;
    return this;
  }

  public Candidate addMotivationsItem(Motivations motivationsItem) {
    if (this.motivations == null) {
      this.motivations = new ArrayList<>();
    }
    this.motivations.add(motivationsItem);
    return this;
  }

   /**
   * Get motivations
   * @return motivations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Motivations> getMotivations() {
    return motivations;
  }


  public void setMotivations(List<Motivations> motivations) {
    
    
    
    this.motivations = motivations;
  }


  public Candidate roles(List<Object> roles) {
    
    
    
    
    this.roles = roles;
    return this;
  }

  public Candidate addRolesItem(Object rolesItem) {
    if (this.roles == null) {
      this.roles = new ArrayList<>();
    }
    this.roles.add(rolesItem);
    return this;
  }

   /**
   * An array of  user roles associated with this candidate:  recruiter  hiring-manager  onboarding-owner  recruiting-administrator 
   * @return roles
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "An array of  user roles associated with this candidate:  recruiter  hiring-manager  onboarding-owner  recruiting-administrator ")

  public List<Object> getRoles() {
    return roles;
  }


  public void setRoles(List<Object> roles) {
    
    
    
    this.roles = roles;
  }


  public Candidate hyperlinks(List<Hyperlinks> hyperlinks) {
    
    
    
    
    this.hyperlinks = hyperlinks;
    return this;
  }

  public Candidate addHyperlinksItem(Hyperlinks hyperlinksItem) {
    if (this.hyperlinks == null) {
      this.hyperlinks = new ArrayList<>();
    }
    this.hyperlinks.add(hyperlinksItem);
    return this;
  }

   /**
   * Get hyperlinks
   * @return hyperlinks
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Hyperlinks> getHyperlinks() {
    return hyperlinks;
  }


  public void setHyperlinks(List<Hyperlinks> hyperlinks) {
    
    
    
    this.hyperlinks = hyperlinks;
  }


  public Candidate updatedAt(String updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The last updated date.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The last updated date.")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public Candidate orgUnits(Object orgUnits) {
    
    
    
    
    this.orgUnits = orgUnits;
    return this;
  }

   /**
   * Get orgUnits
   * @return orgUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Object getOrgUnits() {
    return orgUnits;
  }


  public void setOrgUnits(Object orgUnits) {
    
    
    
    this.orgUnits = orgUnits;
  }


  public Candidate links(List<Links> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public Candidate addLinksItem(Links linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Links> getLinks() {
    return links;
  }


  public void setLinks(List<Links> links) {
    
    
    
    this.links = links;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Candidate instance itself
   */
  public Candidate putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Candidate candidate = (Candidate) o;
    return Objects.equals(this.id, candidate.id) &&
        Objects.equals(this.createdAt, candidate.createdAt) &&
        Objects.equals(this.creatorId, candidate.creatorId) &&
        Objects.equals(this.personId, candidate.personId) &&
        Objects.equals(this.integration, candidate.integration) &&
        Objects.equals(this.isInternal, candidate.isInternal) &&
        Objects.equals(this.isActive, candidate.isActive) &&
        Objects.equals(this.isWillingToRelocate, candidate.isWillingToRelocate) &&
        Objects.equals(this.preferredLocale, candidate.preferredLocale) &&
        Objects.equals(this.name, candidate.name) &&
        Objects.equals(this.contactInfo, candidate.contactInfo) &&
        Objects.equals(this.skills, candidate.skills) &&
        Objects.equals(this.workExperience, candidate.workExperience) &&
        Objects.equals(this.educations, candidate.educations) &&
        Objects.equals(this.licenses, candidate.licenses) &&
        Objects.equals(this.behaviors, candidate.behaviors) &&
        Objects.equals(this.motivations, candidate.motivations) &&
        Objects.equals(this.roles, candidate.roles) &&
        Objects.equals(this.hyperlinks, candidate.hyperlinks) &&
        Objects.equals(this.updatedAt, candidate.updatedAt) &&
        Objects.equals(this.orgUnits, candidate.orgUnits) &&
        Objects.equals(this.links, candidate.links)&&
        Objects.equals(this.additionalProperties, candidate.additionalProperties);
  }

  private static <T> boolean equalsNullable(JsonNullable<T> a, JsonNullable<T> b) {
    return a == b || (a != null && b != null && a.isPresent() && b.isPresent() && Objects.deepEquals(a.get(), b.get()));
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, createdAt, creatorId, personId, integration, isInternal, isActive, isWillingToRelocate, preferredLocale, name, contactInfo, skills, workExperience, educations, licenses, behaviors, motivations, roles, hyperlinks, updatedAt, orgUnits, links, additionalProperties);
  }

  private static <T> int hashCodeNullable(JsonNullable<T> a) {
    if (a == null) {
      return 1;
    }
    return a.isPresent() ? Arrays.deepHashCode(new Object[]{a.get()}) : 31;
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Candidate {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    createdAt: ").append(toIndentedString(createdAt)).append("\n");
    sb.append("    creatorId: ").append(toIndentedString(creatorId)).append("\n");
    sb.append("    personId: ").append(toIndentedString(personId)).append("\n");
    sb.append("    integration: ").append(toIndentedString(integration)).append("\n");
    sb.append("    isInternal: ").append(toIndentedString(isInternal)).append("\n");
    sb.append("    isActive: ").append(toIndentedString(isActive)).append("\n");
    sb.append("    isWillingToRelocate: ").append(toIndentedString(isWillingToRelocate)).append("\n");
    sb.append("    preferredLocale: ").append(toIndentedString(preferredLocale)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    contactInfo: ").append(toIndentedString(contactInfo)).append("\n");
    sb.append("    skills: ").append(toIndentedString(skills)).append("\n");
    sb.append("    workExperience: ").append(toIndentedString(workExperience)).append("\n");
    sb.append("    educations: ").append(toIndentedString(educations)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    behaviors: ").append(toIndentedString(behaviors)).append("\n");
    sb.append("    motivations: ").append(toIndentedString(motivations)).append("\n");
    sb.append("    roles: ").append(toIndentedString(roles)).append("\n");
    sb.append("    hyperlinks: ").append(toIndentedString(hyperlinks)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    orgUnits: ").append(toIndentedString(orgUnits)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("created_at");
    openapiFields.add("creator.id");
    openapiFields.add("person_id");
    openapiFields.add("integration");
    openapiFields.add("is_internal");
    openapiFields.add("is_active");
    openapiFields.add("is_willing_to_relocate");
    openapiFields.add("preferred_locale");
    openapiFields.add("name");
    openapiFields.add("contact_info");
    openapiFields.add("skills");
    openapiFields.add("work_experience");
    openapiFields.add("educations");
    openapiFields.add("licenses");
    openapiFields.add("behaviors");
    openapiFields.add("motivations");
    openapiFields.add("roles");
    openapiFields.add("hyperlinks");
    openapiFields.add("updated_at");
    openapiFields.add("org_units");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Candidate
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Candidate.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Candidate is not found in the empty JSON string", Candidate.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("created_at") != null && !jsonObj.get("created_at").isJsonNull()) && !jsonObj.get("created_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `created_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("created_at").toString()));
      }
      if ((jsonObj.get("creator.id") != null && !jsonObj.get("creator.id").isJsonNull()) && !jsonObj.get("creator.id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `creator.id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("creator.id").toString()));
      }
      if ((jsonObj.get("person_id") != null && !jsonObj.get("person_id").isJsonNull()) && !jsonObj.get("person_id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `person_id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("person_id").toString()));
      }
      if ((jsonObj.get("integration") != null && !jsonObj.get("integration").isJsonNull()) && !jsonObj.get("integration").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `integration` to be a primitive type in the JSON string but got `%s`", jsonObj.get("integration").toString()));
      }
      if ((jsonObj.get("is_internal") != null && !jsonObj.get("is_internal").isJsonNull()) && !jsonObj.get("is_internal").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_internal` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_internal").toString()));
      }
      if ((jsonObj.get("is_active") != null && !jsonObj.get("is_active").isJsonNull()) && !jsonObj.get("is_active").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_active` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_active").toString()));
      }
      if ((jsonObj.get("is_willing_to_relocate") != null && !jsonObj.get("is_willing_to_relocate").isJsonNull()) && !jsonObj.get("is_willing_to_relocate").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `is_willing_to_relocate` to be a primitive type in the JSON string but got `%s`", jsonObj.get("is_willing_to_relocate").toString()));
      }
      // validate the optional field `preferred_locale`
      if (jsonObj.get("preferred_locale") != null && !jsonObj.get("preferred_locale").isJsonNull()) {
        CandidatePreferredLocale.validateJsonObject(jsonObj.getAsJsonObject("preferred_locale"));
      }
      if (jsonObj.get("name") != null && !jsonObj.get("name").isJsonNull()) {
        JsonArray jsonArrayname = jsonObj.getAsJsonArray("name");
        if (jsonArrayname != null) {
          // ensure the json data is an array
          if (!jsonObj.get("name").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `name` to be an array in the JSON string but got `%s`", jsonObj.get("name").toString()));
          }

          // validate the optional field `name` (array)
          for (int i = 0; i < jsonArrayname.size(); i++) {
            Name.validateJsonObject(jsonArrayname.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("contact_info") != null && !jsonObj.get("contact_info").isJsonNull()) {
        JsonArray jsonArraycontactInfo = jsonObj.getAsJsonArray("contact_info");
        if (jsonArraycontactInfo != null) {
          // ensure the json data is an array
          if (!jsonObj.get("contact_info").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `contact_info` to be an array in the JSON string but got `%s`", jsonObj.get("contact_info").toString()));
          }

          // validate the optional field `contact_info` (array)
          for (int i = 0; i < jsonArraycontactInfo.size(); i++) {
            ContactInfo.validateJsonObject(jsonArraycontactInfo.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("skills") != null && !jsonObj.get("skills").isJsonNull()) {
        JsonArray jsonArrayskills = jsonObj.getAsJsonArray("skills");
        if (jsonArrayskills != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skills").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skills` to be an array in the JSON string but got `%s`", jsonObj.get("skills").toString()));
          }

          // validate the optional field `skills` (array)
          for (int i = 0; i < jsonArrayskills.size(); i++) {
            Skill.validateJsonObject(jsonArrayskills.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("work_experience") != null && !jsonObj.get("work_experience").isJsonNull()) {
        JsonArray jsonArrayworkExperience = jsonObj.getAsJsonArray("work_experience");
        if (jsonArrayworkExperience != null) {
          // ensure the json data is an array
          if (!jsonObj.get("work_experience").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `work_experience` to be an array in the JSON string but got `%s`", jsonObj.get("work_experience").toString()));
          }

          // validate the optional field `work_experience` (array)
          for (int i = 0; i < jsonArrayworkExperience.size(); i++) {
            Workexperience.validateJsonObject(jsonArrayworkExperience.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("educations") != null && !jsonObj.get("educations").isJsonNull()) {
        JsonArray jsonArrayeducations = jsonObj.getAsJsonArray("educations");
        if (jsonArrayeducations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("educations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `educations` to be an array in the JSON string but got `%s`", jsonObj.get("educations").toString()));
          }

          // validate the optional field `educations` (array)
          for (int i = 0; i < jsonArrayeducations.size(); i++) {
            Educations.validateJsonObject(jsonArrayeducations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull()) {
        JsonArray jsonArraylicenses = jsonObj.getAsJsonArray("licenses");
        if (jsonArraylicenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("licenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `licenses` to be an array in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
          }

          // validate the optional field `licenses` (array)
          for (int i = 0; i < jsonArraylicenses.size(); i++) {
            Licenses.validateJsonObject(jsonArraylicenses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("behaviors") != null && !jsonObj.get("behaviors").isJsonNull()) {
        JsonArray jsonArraybehaviors = jsonObj.getAsJsonArray("behaviors");
        if (jsonArraybehaviors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("behaviors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `behaviors` to be an array in the JSON string but got `%s`", jsonObj.get("behaviors").toString()));
          }

          // validate the optional field `behaviors` (array)
          for (int i = 0; i < jsonArraybehaviors.size(); i++) {
            Behaviors.validateJsonObject(jsonArraybehaviors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("motivations") != null && !jsonObj.get("motivations").isJsonNull()) {
        JsonArray jsonArraymotivations = jsonObj.getAsJsonArray("motivations");
        if (jsonArraymotivations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("motivations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `motivations` to be an array in the JSON string but got `%s`", jsonObj.get("motivations").toString()));
          }

          // validate the optional field `motivations` (array)
          for (int i = 0; i < jsonArraymotivations.size(); i++) {
            Motivations.validateJsonObject(jsonArraymotivations.get(i).getAsJsonObject());
          };
        }
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("roles") != null && !jsonObj.get("roles").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `roles` to be an array in the JSON string but got `%s`", jsonObj.get("roles").toString()));
      }
      if (jsonObj.get("hyperlinks") != null && !jsonObj.get("hyperlinks").isJsonNull()) {
        JsonArray jsonArrayhyperlinks = jsonObj.getAsJsonArray("hyperlinks");
        if (jsonArrayhyperlinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("hyperlinks").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `hyperlinks` to be an array in the JSON string but got `%s`", jsonObj.get("hyperlinks").toString()));
          }

          // validate the optional field `hyperlinks` (array)
          for (int i = 0; i < jsonArrayhyperlinks.size(); i++) {
            Hyperlinks.validateJsonObject(jsonArrayhyperlinks.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Links.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Candidate.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Candidate' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Candidate> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Candidate.class));

       return (TypeAdapter<T>) new TypeAdapter<Candidate>() {
           @Override
           public void write(JsonWriter out, Candidate value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Candidate read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Candidate instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Candidate given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Candidate
  * @throws IOException if the JSON string is invalid with respect to Candidate
  */
  public static Candidate fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Candidate.class);
  }

 /**
  * Convert an instance of Candidate to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

