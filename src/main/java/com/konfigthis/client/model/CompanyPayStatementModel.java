/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeePayStatementIdentifierModel;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * CompanyPayStatementModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class CompanyPayStatementModel {
  public static final String SERIALIZED_NAME_EMPLOYEEIDENTIFIER = "employeeidentifier";
  @SerializedName(SERIALIZED_NAME_EMPLOYEEIDENTIFIER)
  private EmployeePayStatementIdentifierModel employeeidentifier;

  public static final String SERIALIZED_NAME_PAYIDENTIFIER = "payidentifier";
  @SerializedName(SERIALIZED_NAME_PAYIDENTIFIER)
  private String payidentifier;

  public static final String SERIALIZED_NAME_PAYDATE = "paydate";
  @SerializedName(SERIALIZED_NAME_PAYDATE)
  private OffsetDateTime paydate;

  public static final String SERIALIZED_NAME_DOCUMENT = "document";
  @SerializedName(SERIALIZED_NAME_DOCUMENT)
  private String document;

  public static final String SERIALIZED_NAME_TOTALEARNINGS = "totalearnings";
  @SerializedName(SERIALIZED_NAME_TOTALEARNINGS)
  private Float totalearnings;

  public static final String SERIALIZED_NAME_TOTALDEDUCTIONS = "totaldeductions";
  @SerializedName(SERIALIZED_NAME_TOTALDEDUCTIONS)
  private Float totaldeductions;

  public static final String SERIALIZED_NAME_TOTALTAXES = "totaltaxes";
  @SerializedName(SERIALIZED_NAME_TOTALTAXES)
  private Float totaltaxes;

  public CompanyPayStatementModel() {
  }

  public CompanyPayStatementModel employeeidentifier(EmployeePayStatementIdentifierModel employeeidentifier) {
    
    
    
    
    this.employeeidentifier = employeeidentifier;
    return this;
  }

   /**
   * Get employeeidentifier
   * @return employeeidentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeePayStatementIdentifierModel getEmployeeidentifier() {
    return employeeidentifier;
  }


  public void setEmployeeidentifier(EmployeePayStatementIdentifierModel employeeidentifier) {
    
    
    
    this.employeeidentifier = employeeidentifier;
  }


  public CompanyPayStatementModel payidentifier(String payidentifier) {
    
    
    
    
    this.payidentifier = payidentifier;
    return this;
  }

   /**
   * Get payidentifier
   * @return payidentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getPayidentifier() {
    return payidentifier;
  }


  public void setPayidentifier(String payidentifier) {
    
    
    
    this.payidentifier = payidentifier;
  }


  public CompanyPayStatementModel paydate(OffsetDateTime paydate) {
    
    
    
    
    this.paydate = paydate;
    return this;
  }

   /**
   * Get paydate
   * @return paydate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getPaydate() {
    return paydate;
  }


  public void setPaydate(OffsetDateTime paydate) {
    
    
    
    this.paydate = paydate;
  }


  public CompanyPayStatementModel document(String document) {
    
    
    
    
    this.document = document;
    return this;
  }

   /**
   * Get document
   * @return document
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDocument() {
    return document;
  }


  public void setDocument(String document) {
    
    
    
    this.document = document;
  }


  public CompanyPayStatementModel totalearnings(Float totalearnings) {
    
    
    
    
    this.totalearnings = totalearnings;
    return this;
  }

   /**
   * Get totalearnings
   * @return totalearnings
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getTotalearnings() {
    return totalearnings;
  }


  public void setTotalearnings(Float totalearnings) {
    
    
    
    this.totalearnings = totalearnings;
  }


  public CompanyPayStatementModel totaldeductions(Float totaldeductions) {
    
    
    
    
    this.totaldeductions = totaldeductions;
    return this;
  }

   /**
   * Get totaldeductions
   * @return totaldeductions
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getTotaldeductions() {
    return totaldeductions;
  }


  public void setTotaldeductions(Float totaldeductions) {
    
    
    
    this.totaldeductions = totaldeductions;
  }


  public CompanyPayStatementModel totaltaxes(Float totaltaxes) {
    
    
    
    
    this.totaltaxes = totaltaxes;
    return this;
  }

   /**
   * Get totaltaxes
   * @return totaltaxes
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Float getTotaltaxes() {
    return totaltaxes;
  }


  public void setTotaltaxes(Float totaltaxes) {
    
    
    
    this.totaltaxes = totaltaxes;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the CompanyPayStatementModel instance itself
   */
  public CompanyPayStatementModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    CompanyPayStatementModel companyPayStatementModel = (CompanyPayStatementModel) o;
    return Objects.equals(this.employeeidentifier, companyPayStatementModel.employeeidentifier) &&
        Objects.equals(this.payidentifier, companyPayStatementModel.payidentifier) &&
        Objects.equals(this.paydate, companyPayStatementModel.paydate) &&
        Objects.equals(this.document, companyPayStatementModel.document) &&
        Objects.equals(this.totalearnings, companyPayStatementModel.totalearnings) &&
        Objects.equals(this.totaldeductions, companyPayStatementModel.totaldeductions) &&
        Objects.equals(this.totaltaxes, companyPayStatementModel.totaltaxes)&&
        Objects.equals(this.additionalProperties, companyPayStatementModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeidentifier, payidentifier, paydate, document, totalearnings, totaldeductions, totaltaxes, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class CompanyPayStatementModel {\n");
    sb.append("    employeeidentifier: ").append(toIndentedString(employeeidentifier)).append("\n");
    sb.append("    payidentifier: ").append(toIndentedString(payidentifier)).append("\n");
    sb.append("    paydate: ").append(toIndentedString(paydate)).append("\n");
    sb.append("    document: ").append(toIndentedString(document)).append("\n");
    sb.append("    totalearnings: ").append(toIndentedString(totalearnings)).append("\n");
    sb.append("    totaldeductions: ").append(toIndentedString(totaldeductions)).append("\n");
    sb.append("    totaltaxes: ").append(toIndentedString(totaltaxes)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeidentifier");
    openapiFields.add("payidentifier");
    openapiFields.add("paydate");
    openapiFields.add("document");
    openapiFields.add("totalearnings");
    openapiFields.add("totaldeductions");
    openapiFields.add("totaltaxes");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to CompanyPayStatementModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!CompanyPayStatementModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in CompanyPayStatementModel is not found in the empty JSON string", CompanyPayStatementModel.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `employeeidentifier`
      if (jsonObj.get("employeeidentifier") != null && !jsonObj.get("employeeidentifier").isJsonNull()) {
        EmployeePayStatementIdentifierModel.validateJsonObject(jsonObj.getAsJsonObject("employeeidentifier"));
      }
      if ((jsonObj.get("payidentifier") != null && !jsonObj.get("payidentifier").isJsonNull()) && !jsonObj.get("payidentifier").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `payidentifier` to be a primitive type in the JSON string but got `%s`", jsonObj.get("payidentifier").toString()));
      }
      if ((jsonObj.get("document") != null && !jsonObj.get("document").isJsonNull()) && !jsonObj.get("document").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `document` to be a primitive type in the JSON string but got `%s`", jsonObj.get("document").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!CompanyPayStatementModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'CompanyPayStatementModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<CompanyPayStatementModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(CompanyPayStatementModel.class));

       return (TypeAdapter<T>) new TypeAdapter<CompanyPayStatementModel>() {
           @Override
           public void write(JsonWriter out, CompanyPayStatementModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public CompanyPayStatementModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             CompanyPayStatementModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of CompanyPayStatementModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of CompanyPayStatementModel
  * @throws IOException if the JSON string is invalid with respect to CompanyPayStatementModel
  */
  public static CompanyPayStatementModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, CompanyPayStatementModel.class);
  }

 /**
  * Convert an instance of CompanyPayStatementModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

