/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.Application;
import com.konfigthis.client.model.Candidate;
import com.konfigthis.client.model.Creator;
import com.konfigthis.client.model.Opportunity;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Output
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Output {
  public static final String SERIALIZED_NAME_CANDIDATE = "candidate";
  @SerializedName(SERIALIZED_NAME_CANDIDATE)
  private List<Candidate> candidate = null;

  public static final String SERIALIZED_NAME_APPLICATION = "application";
  @SerializedName(SERIALIZED_NAME_APPLICATION)
  private List<Application> application = null;

  public static final String SERIALIZED_NAME_OPPORTUNITY = "opportunity";
  @SerializedName(SERIALIZED_NAME_OPPORTUNITY)
  private List<Opportunity> opportunity = null;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private List<Creator> creator = null;

  public Output() {
  }

  public Output candidate(List<Candidate> candidate) {
    
    
    
    
    this.candidate = candidate;
    return this;
  }

  public Output addCandidateItem(Candidate candidateItem) {
    if (this.candidate == null) {
      this.candidate = new ArrayList<>();
    }
    this.candidate.add(candidateItem);
    return this;
  }

   /**
   * Get candidate
   * @return candidate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Candidate> getCandidate() {
    return candidate;
  }


  public void setCandidate(List<Candidate> candidate) {
    
    
    
    this.candidate = candidate;
  }


  public Output application(List<Application> application) {
    
    
    
    
    this.application = application;
    return this;
  }

  public Output addApplicationItem(Application applicationItem) {
    if (this.application == null) {
      this.application = new ArrayList<>();
    }
    this.application.add(applicationItem);
    return this;
  }

   /**
   * Get application
   * @return application
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Application> getApplication() {
    return application;
  }


  public void setApplication(List<Application> application) {
    
    
    
    this.application = application;
  }


  public Output opportunity(List<Opportunity> opportunity) {
    
    
    
    
    this.opportunity = opportunity;
    return this;
  }

  public Output addOpportunityItem(Opportunity opportunityItem) {
    if (this.opportunity == null) {
      this.opportunity = new ArrayList<>();
    }
    this.opportunity.add(opportunityItem);
    return this;
  }

   /**
   * Get opportunity
   * @return opportunity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Opportunity> getOpportunity() {
    return opportunity;
  }


  public void setOpportunity(List<Opportunity> opportunity) {
    
    
    
    this.opportunity = opportunity;
  }


  public Output creator(List<Creator> creator) {
    
    
    
    
    this.creator = creator;
    return this;
  }

  public Output addCreatorItem(Creator creatorItem) {
    if (this.creator == null) {
      this.creator = new ArrayList<>();
    }
    this.creator.add(creatorItem);
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Creator> getCreator() {
    return creator;
  }


  public void setCreator(List<Creator> creator) {
    
    
    
    this.creator = creator;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Output instance itself
   */
  public Output putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Output output = (Output) o;
    return Objects.equals(this.candidate, output.candidate) &&
        Objects.equals(this.application, output.application) &&
        Objects.equals(this.opportunity, output.opportunity) &&
        Objects.equals(this.creator, output.creator)&&
        Objects.equals(this.additionalProperties, output.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(candidate, application, opportunity, creator, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Output {\n");
    sb.append("    candidate: ").append(toIndentedString(candidate)).append("\n");
    sb.append("    application: ").append(toIndentedString(application)).append("\n");
    sb.append("    opportunity: ").append(toIndentedString(opportunity)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("candidate");
    openapiFields.add("application");
    openapiFields.add("opportunity");
    openapiFields.add("creator");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Output
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Output.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Output is not found in the empty JSON string", Output.openapiRequiredFields.toString()));
        }
      }
      if (jsonObj.get("candidate") != null && !jsonObj.get("candidate").isJsonNull()) {
        JsonArray jsonArraycandidate = jsonObj.getAsJsonArray("candidate");
        if (jsonArraycandidate != null) {
          // ensure the json data is an array
          if (!jsonObj.get("candidate").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `candidate` to be an array in the JSON string but got `%s`", jsonObj.get("candidate").toString()));
          }

          // validate the optional field `candidate` (array)
          for (int i = 0; i < jsonArraycandidate.size(); i++) {
            Candidate.validateJsonObject(jsonArraycandidate.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("application") != null && !jsonObj.get("application").isJsonNull()) {
        JsonArray jsonArrayapplication = jsonObj.getAsJsonArray("application");
        if (jsonArrayapplication != null) {
          // ensure the json data is an array
          if (!jsonObj.get("application").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `application` to be an array in the JSON string but got `%s`", jsonObj.get("application").toString()));
          }

          // validate the optional field `application` (array)
          for (int i = 0; i < jsonArrayapplication.size(); i++) {
            Application.validateJsonObject(jsonArrayapplication.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("opportunity") != null && !jsonObj.get("opportunity").isJsonNull()) {
        JsonArray jsonArrayopportunity = jsonObj.getAsJsonArray("opportunity");
        if (jsonArrayopportunity != null) {
          // ensure the json data is an array
          if (!jsonObj.get("opportunity").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `opportunity` to be an array in the JSON string but got `%s`", jsonObj.get("opportunity").toString()));
          }

          // validate the optional field `opportunity` (array)
          for (int i = 0; i < jsonArrayopportunity.size(); i++) {
            Opportunity.validateJsonObject(jsonArrayopportunity.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) {
        JsonArray jsonArraycreator = jsonObj.getAsJsonArray("creator");
        if (jsonArraycreator != null) {
          // ensure the json data is an array
          if (!jsonObj.get("creator").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `creator` to be an array in the JSON string but got `%s`", jsonObj.get("creator").toString()));
          }

          // validate the optional field `creator` (array)
          for (int i = 0; i < jsonArraycreator.size(); i++) {
            Creator.validateJsonObject(jsonArraycreator.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Output.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Output' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Output> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Output.class));

       return (TypeAdapter<T>) new TypeAdapter<Output>() {
           @Override
           public void write(JsonWriter out, Output value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Output read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Output instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Output given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Output
  * @throws IOException if the JSON string is invalid with respect to Output
  */
  public static Output fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Output.class);
  }

 /**
  * Convert an instance of Output to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

