/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApplicationHireDetailsCompany;
import com.konfigthis.client.model.ApplicationHireDetailsCompensation;
import com.konfigthis.client.model.ApplicationHireDetailsHiringManager;
import com.konfigthis.client.model.ApplicationHireDetailsOnboardingOwner;
import com.konfigthis.client.model.ApplicationHireDetailsTaxLocation;
import com.konfigthis.client.model.OrgUnits;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * 
 */
@ApiModel(description = "")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class ApplicationHireDetails {
  public static final String SERIALIZED_NAME_OFFER_DATE = "offer_date";
  @SerializedName(SERIALIZED_NAME_OFFER_DATE)
  private String offerDate;

  public static final String SERIALIZED_NAME_ACCEPT_DATE = "accept_date";
  @SerializedName(SERIALIZED_NAME_ACCEPT_DATE)
  private String acceptDate;

  public static final String SERIALIZED_NAME_HIRE_DATE = "hire_date";
  @SerializedName(SERIALIZED_NAME_HIRE_DATE)
  private String hireDate;

  public static final String SERIALIZED_NAME_START_DATE = "start_date";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private String startDate;

  public static final String SERIALIZED_NAME_FULL_TIME_EQUIVALENT = "full_time_equivalent";
  @SerializedName(SERIALIZED_NAME_FULL_TIME_EQUIVALENT)
  private String fullTimeEquivalent;

  public static final String SERIALIZED_NAME_COMPENSATION = "compensation";
  @SerializedName(SERIALIZED_NAME_COMPENSATION)
  private ApplicationHireDetailsCompensation compensation;

  public static final String SERIALIZED_NAME_COMPANY = "company";
  @SerializedName(SERIALIZED_NAME_COMPANY)
  private ApplicationHireDetailsCompany company;

  public static final String SERIALIZED_NAME_TAX_LOCATION = "tax_location";
  @SerializedName(SERIALIZED_NAME_TAX_LOCATION)
  private ApplicationHireDetailsTaxLocation taxLocation;

  public static final String SERIALIZED_NAME_HIRING_MANAGER = "hiring_manager";
  @SerializedName(SERIALIZED_NAME_HIRING_MANAGER)
  private ApplicationHireDetailsHiringManager hiringManager;

  public static final String SERIALIZED_NAME_ONBOARDING_OWNER = "onboarding_owner";
  @SerializedName(SERIALIZED_NAME_ONBOARDING_OWNER)
  private ApplicationHireDetailsOnboardingOwner onboardingOwner;

  public static final String SERIALIZED_NAME_ORG_UNITS = "org_units";
  @SerializedName(SERIALIZED_NAME_ORG_UNITS)
  private List<OrgUnits> orgUnits = null;

  public ApplicationHireDetails() {
  }

  public ApplicationHireDetails offerDate(String offerDate) {
    
    
    
    
    this.offerDate = offerDate;
    return this;
  }

   /**
   * The date on which the offer was presented to a candidate for the specified application Must not be before 1/1/1881 or after 12/31/2199 
   * @return offerDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date on which the offer was presented to a candidate for the specified application Must not be before 1/1/1881 or after 12/31/2199 ")

  public String getOfferDate() {
    return offerDate;
  }


  public void setOfferDate(String offerDate) {
    
    
    
    this.offerDate = offerDate;
  }


  public ApplicationHireDetails acceptDate(String acceptDate) {
    
    
    
    
    this.acceptDate = acceptDate;
    return this;
  }

   /**
   * The date on which the offer was accepted by a candidate for the specified application Must not be before 1/1/1881 or after 12/31/2199 
   * @return acceptDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date on which the offer was accepted by a candidate for the specified application Must not be before 1/1/1881 or after 12/31/2199 ")

  public String getAcceptDate() {
    return acceptDate;
  }


  public void setAcceptDate(String acceptDate) {
    
    
    
    this.acceptDate = acceptDate;
  }


  public ApplicationHireDetails hireDate(String hireDate) {
    
    
    
    
    this.hireDate = hireDate;
    return this;
  }

   /**
   * The date on which the candidate is hired for the opportunity associated with the specified application Must not be before 1/1/1881 or after 12/31/2199 
   * @return hireDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date on which the candidate is hired for the opportunity associated with the specified application Must not be before 1/1/1881 or after 12/31/2199 ")

  public String getHireDate() {
    return hireDate;
  }


  public void setHireDate(String hireDate) {
    
    
    
    this.hireDate = hireDate;
  }


  public ApplicationHireDetails startDate(String startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * The date on which the candidate is set to start working Must not be before 1/1/1881 or after 12/31/2199 
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date on which the candidate is set to start working Must not be before 1/1/1881 or after 12/31/2199 ")

  public String getStartDate() {
    return startDate;
  }


  public void setStartDate(String startDate) {
    
    
    
    this.startDate = startDate;
  }


  public ApplicationHireDetails fullTimeEquivalent(String fullTimeEquivalent) {
    
    
    
    
    this.fullTimeEquivalent = fullTimeEquivalent;
    return this;
  }

   /**
   * The full time equivalent of the hire (decimal) Must be greater than 0 and no more than 9999999999.9999
   * @return fullTimeEquivalent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The full time equivalent of the hire (decimal) Must be greater than 0 and no more than 9999999999.9999")

  public String getFullTimeEquivalent() {
    return fullTimeEquivalent;
  }


  public void setFullTimeEquivalent(String fullTimeEquivalent) {
    
    
    
    this.fullTimeEquivalent = fullTimeEquivalent;
  }


  public ApplicationHireDetails compensation(ApplicationHireDetailsCompensation compensation) {
    
    
    
    
    this.compensation = compensation;
    return this;
  }

   /**
   * Get compensation
   * @return compensation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationHireDetailsCompensation getCompensation() {
    return compensation;
  }


  public void setCompensation(ApplicationHireDetailsCompensation compensation) {
    
    
    
    this.compensation = compensation;
  }


  public ApplicationHireDetails company(ApplicationHireDetailsCompany company) {
    
    
    
    
    this.company = company;
    return this;
  }

   /**
   * Get company
   * @return company
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationHireDetailsCompany getCompany() {
    return company;
  }


  public void setCompany(ApplicationHireDetailsCompany company) {
    
    
    
    this.company = company;
  }


  public ApplicationHireDetails taxLocation(ApplicationHireDetailsTaxLocation taxLocation) {
    
    
    
    
    this.taxLocation = taxLocation;
    return this;
  }

   /**
   * Get taxLocation
   * @return taxLocation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationHireDetailsTaxLocation getTaxLocation() {
    return taxLocation;
  }


  public void setTaxLocation(ApplicationHireDetailsTaxLocation taxLocation) {
    
    
    
    this.taxLocation = taxLocation;
  }


  public ApplicationHireDetails hiringManager(ApplicationHireDetailsHiringManager hiringManager) {
    
    
    
    
    this.hiringManager = hiringManager;
    return this;
  }

   /**
   * Get hiringManager
   * @return hiringManager
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationHireDetailsHiringManager getHiringManager() {
    return hiringManager;
  }


  public void setHiringManager(ApplicationHireDetailsHiringManager hiringManager) {
    
    
    
    this.hiringManager = hiringManager;
  }


  public ApplicationHireDetails onboardingOwner(ApplicationHireDetailsOnboardingOwner onboardingOwner) {
    
    
    
    
    this.onboardingOwner = onboardingOwner;
    return this;
  }

   /**
   * Get onboardingOwner
   * @return onboardingOwner
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationHireDetailsOnboardingOwner getOnboardingOwner() {
    return onboardingOwner;
  }


  public void setOnboardingOwner(ApplicationHireDetailsOnboardingOwner onboardingOwner) {
    
    
    
    this.onboardingOwner = onboardingOwner;
  }


  public ApplicationHireDetails orgUnits(List<OrgUnits> orgUnits) {
    
    
    
    
    this.orgUnits = orgUnits;
    return this;
  }

  public ApplicationHireDetails addOrgUnitsItem(OrgUnits orgUnitsItem) {
    if (this.orgUnits == null) {
      this.orgUnits = new ArrayList<>();
    }
    this.orgUnits.add(orgUnitsItem);
    return this;
  }

   /**
   * 
   * @return orgUnits
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<OrgUnits> getOrgUnits() {
    return orgUnits;
  }


  public void setOrgUnits(List<OrgUnits> orgUnits) {
    
    
    
    this.orgUnits = orgUnits;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the ApplicationHireDetails instance itself
   */
  public ApplicationHireDetails putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    ApplicationHireDetails applicationHireDetails = (ApplicationHireDetails) o;
    return Objects.equals(this.offerDate, applicationHireDetails.offerDate) &&
        Objects.equals(this.acceptDate, applicationHireDetails.acceptDate) &&
        Objects.equals(this.hireDate, applicationHireDetails.hireDate) &&
        Objects.equals(this.startDate, applicationHireDetails.startDate) &&
        Objects.equals(this.fullTimeEquivalent, applicationHireDetails.fullTimeEquivalent) &&
        Objects.equals(this.compensation, applicationHireDetails.compensation) &&
        Objects.equals(this.company, applicationHireDetails.company) &&
        Objects.equals(this.taxLocation, applicationHireDetails.taxLocation) &&
        Objects.equals(this.hiringManager, applicationHireDetails.hiringManager) &&
        Objects.equals(this.onboardingOwner, applicationHireDetails.onboardingOwner) &&
        Objects.equals(this.orgUnits, applicationHireDetails.orgUnits)&&
        Objects.equals(this.additionalProperties, applicationHireDetails.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(offerDate, acceptDate, hireDate, startDate, fullTimeEquivalent, compensation, company, taxLocation, hiringManager, onboardingOwner, orgUnits, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class ApplicationHireDetails {\n");
    sb.append("    offerDate: ").append(toIndentedString(offerDate)).append("\n");
    sb.append("    acceptDate: ").append(toIndentedString(acceptDate)).append("\n");
    sb.append("    hireDate: ").append(toIndentedString(hireDate)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    fullTimeEquivalent: ").append(toIndentedString(fullTimeEquivalent)).append("\n");
    sb.append("    compensation: ").append(toIndentedString(compensation)).append("\n");
    sb.append("    company: ").append(toIndentedString(company)).append("\n");
    sb.append("    taxLocation: ").append(toIndentedString(taxLocation)).append("\n");
    sb.append("    hiringManager: ").append(toIndentedString(hiringManager)).append("\n");
    sb.append("    onboardingOwner: ").append(toIndentedString(onboardingOwner)).append("\n");
    sb.append("    orgUnits: ").append(toIndentedString(orgUnits)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("offer_date");
    openapiFields.add("accept_date");
    openapiFields.add("hire_date");
    openapiFields.add("start_date");
    openapiFields.add("full_time_equivalent");
    openapiFields.add("compensation");
    openapiFields.add("company");
    openapiFields.add("tax_location");
    openapiFields.add("hiring_manager");
    openapiFields.add("onboarding_owner");
    openapiFields.add("org_units");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to ApplicationHireDetails
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!ApplicationHireDetails.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in ApplicationHireDetails is not found in the empty JSON string", ApplicationHireDetails.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("offer_date") != null && !jsonObj.get("offer_date").isJsonNull()) && !jsonObj.get("offer_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `offer_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("offer_date").toString()));
      }
      if ((jsonObj.get("accept_date") != null && !jsonObj.get("accept_date").isJsonNull()) && !jsonObj.get("accept_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accept_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accept_date").toString()));
      }
      if ((jsonObj.get("hire_date") != null && !jsonObj.get("hire_date").isJsonNull()) && !jsonObj.get("hire_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `hire_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("hire_date").toString()));
      }
      if ((jsonObj.get("start_date") != null && !jsonObj.get("start_date").isJsonNull()) && !jsonObj.get("start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("start_date").toString()));
      }
      if ((jsonObj.get("full_time_equivalent") != null && !jsonObj.get("full_time_equivalent").isJsonNull()) && !jsonObj.get("full_time_equivalent").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `full_time_equivalent` to be a primitive type in the JSON string but got `%s`", jsonObj.get("full_time_equivalent").toString()));
      }
      // validate the optional field `compensation`
      if (jsonObj.get("compensation") != null && !jsonObj.get("compensation").isJsonNull()) {
        ApplicationHireDetailsCompensation.validateJsonObject(jsonObj.getAsJsonObject("compensation"));
      }
      // validate the optional field `company`
      if (jsonObj.get("company") != null && !jsonObj.get("company").isJsonNull()) {
        ApplicationHireDetailsCompany.validateJsonObject(jsonObj.getAsJsonObject("company"));
      }
      // validate the optional field `tax_location`
      if (jsonObj.get("tax_location") != null && !jsonObj.get("tax_location").isJsonNull()) {
        ApplicationHireDetailsTaxLocation.validateJsonObject(jsonObj.getAsJsonObject("tax_location"));
      }
      // validate the optional field `hiring_manager`
      if (jsonObj.get("hiring_manager") != null && !jsonObj.get("hiring_manager").isJsonNull()) {
        ApplicationHireDetailsHiringManager.validateJsonObject(jsonObj.getAsJsonObject("hiring_manager"));
      }
      // validate the optional field `onboarding_owner`
      if (jsonObj.get("onboarding_owner") != null && !jsonObj.get("onboarding_owner").isJsonNull()) {
        ApplicationHireDetailsOnboardingOwner.validateJsonObject(jsonObj.getAsJsonObject("onboarding_owner"));
      }
      if (jsonObj.get("org_units") != null && !jsonObj.get("org_units").isJsonNull()) {
        JsonArray jsonArrayorgUnits = jsonObj.getAsJsonArray("org_units");
        if (jsonArrayorgUnits != null) {
          // ensure the json data is an array
          if (!jsonObj.get("org_units").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `org_units` to be an array in the JSON string but got `%s`", jsonObj.get("org_units").toString()));
          }

          // validate the optional field `org_units` (array)
          for (int i = 0; i < jsonArrayorgUnits.size(); i++) {
            OrgUnits.validateJsonObject(jsonArrayorgUnits.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!ApplicationHireDetails.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'ApplicationHireDetails' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<ApplicationHireDetails> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(ApplicationHireDetails.class));

       return (TypeAdapter<T>) new TypeAdapter<ApplicationHireDetails>() {
           @Override
           public void write(JsonWriter out, ApplicationHireDetails value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public ApplicationHireDetails read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             ApplicationHireDetails instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of ApplicationHireDetails given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of ApplicationHireDetails
  * @throws IOException if the JSON string is invalid with respect to ApplicationHireDetails
  */
  public static ApplicationHireDetails fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, ApplicationHireDetails.class);
  }

 /**
  * Convert an instance of ApplicationHireDetails to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

