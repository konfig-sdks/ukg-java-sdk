/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.EmployeeIdentifier;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeePayStatementRangeFilter
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeePayStatementRangeFilter {
  public static final String SERIALIZED_NAME_EMPLOYEE_IDENTIFIER = "employeeIdentifier";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_IDENTIFIER)
  private EmployeeIdentifier employeeIdentifier;

  public static final String SERIALIZED_NAME_START_DATE = "startDate";
  @SerializedName(SERIALIZED_NAME_START_DATE)
  private OffsetDateTime startDate;

  public static final String SERIALIZED_NAME_END_DATE = "endDate";
  @SerializedName(SERIALIZED_NAME_END_DATE)
  private OffsetDateTime endDate;

  public static final String SERIALIZED_NAME_PAGE = "page";
  @SerializedName(SERIALIZED_NAME_PAGE)
  private Integer page;

  public static final String SERIALIZED_NAME_PER_PAGE = "per_Page";
  @SerializedName(SERIALIZED_NAME_PER_PAGE)
  private Integer perPage;

  public static final String SERIALIZED_NAME_PAGES_COUNT = "pagesCount";
  @SerializedName(SERIALIZED_NAME_PAGES_COUNT)
  private Integer pagesCount;

  public EmployeePayStatementRangeFilter() {
  }

  public EmployeePayStatementRangeFilter employeeIdentifier(EmployeeIdentifier employeeIdentifier) {
    
    
    
    
    this.employeeIdentifier = employeeIdentifier;
    return this;
  }

   /**
   * Get employeeIdentifier
   * @return employeeIdentifier
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public EmployeeIdentifier getEmployeeIdentifier() {
    return employeeIdentifier;
  }


  public void setEmployeeIdentifier(EmployeeIdentifier employeeIdentifier) {
    
    
    
    this.employeeIdentifier = employeeIdentifier;
  }


  public EmployeePayStatementRangeFilter startDate(OffsetDateTime startDate) {
    
    
    
    
    this.startDate = startDate;
    return this;
  }

   /**
   * Get startDate
   * @return startDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getStartDate() {
    return startDate;
  }


  public void setStartDate(OffsetDateTime startDate) {
    
    
    
    this.startDate = startDate;
  }


  public EmployeePayStatementRangeFilter endDate(OffsetDateTime endDate) {
    
    
    
    
    this.endDate = endDate;
    return this;
  }

   /**
   * Get endDate
   * @return endDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getEndDate() {
    return endDate;
  }


  public void setEndDate(OffsetDateTime endDate) {
    
    
    
    this.endDate = endDate;
  }


  public EmployeePayStatementRangeFilter page(Integer page) {
    if (page != null && page < 1) {
      throw new IllegalArgumentException("Invalid value for page. Must be greater than or equal to 1.");
    }
    
    
    
    this.page = page;
    return this;
  }

   /**
   * Get page
   * minimum: 1
   * @return page
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPage() {
    return page;
  }


  public void setPage(Integer page) {
    if (page != null && page < 1) {
      throw new IllegalArgumentException("Invalid value for page. Must be greater than or equal to 1.");
    }
    
    
    this.page = page;
  }


  public EmployeePayStatementRangeFilter perPage(Integer perPage) {
    if (perPage != null && perPage < 1) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be greater than or equal to 1.");
    }
    
    
    
    this.perPage = perPage;
    return this;
  }

   /**
   * Get perPage
   * minimum: 1
   * @return perPage
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPerPage() {
    return perPage;
  }


  public void setPerPage(Integer perPage) {
    if (perPage != null && perPage < 1) {
      throw new IllegalArgumentException("Invalid value for perPage. Must be greater than or equal to 1.");
    }
    
    
    this.perPage = perPage;
  }


  public EmployeePayStatementRangeFilter pagesCount(Integer pagesCount) {
    
    
    
    
    this.pagesCount = pagesCount;
    return this;
  }

   /**
   * Get pagesCount
   * @return pagesCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Integer getPagesCount() {
    return pagesCount;
  }


  public void setPagesCount(Integer pagesCount) {
    
    
    
    this.pagesCount = pagesCount;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeePayStatementRangeFilter instance itself
   */
  public EmployeePayStatementRangeFilter putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeePayStatementRangeFilter employeePayStatementRangeFilter = (EmployeePayStatementRangeFilter) o;
    return Objects.equals(this.employeeIdentifier, employeePayStatementRangeFilter.employeeIdentifier) &&
        Objects.equals(this.startDate, employeePayStatementRangeFilter.startDate) &&
        Objects.equals(this.endDate, employeePayStatementRangeFilter.endDate) &&
        Objects.equals(this.page, employeePayStatementRangeFilter.page) &&
        Objects.equals(this.perPage, employeePayStatementRangeFilter.perPage) &&
        Objects.equals(this.pagesCount, employeePayStatementRangeFilter.pagesCount)&&
        Objects.equals(this.additionalProperties, employeePayStatementRangeFilter.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(employeeIdentifier, startDate, endDate, page, perPage, pagesCount, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeePayStatementRangeFilter {\n");
    sb.append("    employeeIdentifier: ").append(toIndentedString(employeeIdentifier)).append("\n");
    sb.append("    startDate: ").append(toIndentedString(startDate)).append("\n");
    sb.append("    endDate: ").append(toIndentedString(endDate)).append("\n");
    sb.append("    page: ").append(toIndentedString(page)).append("\n");
    sb.append("    perPage: ").append(toIndentedString(perPage)).append("\n");
    sb.append("    pagesCount: ").append(toIndentedString(pagesCount)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("employeeIdentifier");
    openapiFields.add("startDate");
    openapiFields.add("endDate");
    openapiFields.add("page");
    openapiFields.add("per_Page");
    openapiFields.add("pagesCount");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeePayStatementRangeFilter
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeePayStatementRangeFilter.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeePayStatementRangeFilter is not found in the empty JSON string", EmployeePayStatementRangeFilter.openapiRequiredFields.toString()));
        }
      }
      // validate the optional field `employeeIdentifier`
      if (jsonObj.get("employeeIdentifier") != null && !jsonObj.get("employeeIdentifier").isJsonNull()) {
        EmployeeIdentifier.validateJsonObject(jsonObj.getAsJsonObject("employeeIdentifier"));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeePayStatementRangeFilter.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeePayStatementRangeFilter' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeePayStatementRangeFilter> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeePayStatementRangeFilter.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeePayStatementRangeFilter>() {
           @Override
           public void write(JsonWriter out, EmployeePayStatementRangeFilter value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeePayStatementRangeFilter read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeePayStatementRangeFilter instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeePayStatementRangeFilter given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeePayStatementRangeFilter
  * @throws IOException if the JSON string is invalid with respect to EmployeePayStatementRangeFilter
  */
  public static EmployeePayStatementRangeFilter fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeePayStatementRangeFilter.class);
  }

 /**
  * Convert an instance of EmployeePayStatementRangeFilter to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

