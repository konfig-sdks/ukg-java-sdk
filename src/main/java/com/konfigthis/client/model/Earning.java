/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * Earning
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Earning {
  public static final String SERIALIZED_NAME_REF_ID = "refId";
  @SerializedName(SERIALIZED_NAME_REF_ID)
  private UUID refId;

  public static final String SERIALIZED_NAME_COMPANY_CODE = "companyCode";
  @SerializedName(SERIALIZED_NAME_COMPANY_CODE)
  private String companyCode;

  public static final String SERIALIZED_NAME_EMP_NO = "empNo";
  @SerializedName(SERIALIZED_NAME_EMP_NO)
  private String empNo;

  public static final String SERIALIZED_NAME_CHARGE_DATE = "chargeDate";
  @SerializedName(SERIALIZED_NAME_CHARGE_DATE)
  private OffsetDateTime chargeDate;

  public static final String SERIALIZED_NAME_CODE = "code";
  @SerializedName(SERIALIZED_NAME_CODE)
  private String code;

  public static final String SERIALIZED_NAME_HOURS = "hours";
  @SerializedName(SERIALIZED_NAME_HOURS)
  private BigDecimal hours;

  public static final String SERIALIZED_NAME_AMOUNT = "amount";
  @SerializedName(SERIALIZED_NAME_AMOUNT)
  private BigDecimal amount;

  public static final String SERIALIZED_NAME_PIECE_COUNT = "pieceCount";
  @SerializedName(SERIALIZED_NAME_PIECE_COUNT)
  private BigDecimal pieceCount;

  public static final String SERIALIZED_NAME_SHIFT_CODE = "shiftCode";
  @SerializedName(SERIALIZED_NAME_SHIFT_CODE)
  private String shiftCode;

  public static final String SERIALIZED_NAME_LOCATION = "location";
  @SerializedName(SERIALIZED_NAME_LOCATION)
  private String location;

  public static final String SERIALIZED_NAME_JOB = "job";
  @SerializedName(SERIALIZED_NAME_JOB)
  private String job;

  public static final String SERIALIZED_NAME_PROJECT = "project";
  @SerializedName(SERIALIZED_NAME_PROJECT)
  private String project;

  public static final String SERIALIZED_NAME_ORG_LVL1 = "orgLvl1";
  @SerializedName(SERIALIZED_NAME_ORG_LVL1)
  private String orgLvl1;

  public static final String SERIALIZED_NAME_ORG_LVL2 = "orgLvl2";
  @SerializedName(SERIALIZED_NAME_ORG_LVL2)
  private String orgLvl2;

  public static final String SERIALIZED_NAME_ORG_LVL3 = "orgLvl3";
  @SerializedName(SERIALIZED_NAME_ORG_LVL3)
  private String orgLvl3;

  public static final String SERIALIZED_NAME_ORG_LVL4 = "orgLvl4";
  @SerializedName(SERIALIZED_NAME_ORG_LVL4)
  private String orgLvl4;

  public static final String SERIALIZED_NAME_PAY_RATE = "payRate";
  @SerializedName(SERIALIZED_NAME_PAY_RATE)
  private BigDecimal payRate;

  public static final String SERIALIZED_NAME_PIECE_RATE = "pieceRate";
  @SerializedName(SERIALIZED_NAME_PIECE_RATE)
  private BigDecimal pieceRate;

  public static final String SERIALIZED_NAME_ROE_PAY_DATE = "roePayDate";
  @SerializedName(SERIALIZED_NAME_ROE_PAY_DATE)
  private OffsetDateTime roePayDate;

  public static final String SERIALIZED_NAME_ADJ_EARN_PERIOD_START_DATE = "adjEarnPeriodStartDate";
  @SerializedName(SERIALIZED_NAME_ADJ_EARN_PERIOD_START_DATE)
  private OffsetDateTime adjEarnPeriodStartDate;

  public static final String SERIALIZED_NAME_ADJ_EARN_PERIOD_END_DATE = "adjEarnPeriodEndDate";
  @SerializedName(SERIALIZED_NAME_ADJ_EARN_PERIOD_END_DATE)
  private OffsetDateTime adjEarnPeriodEndDate;

  public static final String SERIALIZED_NAME_CHECK_SEQUENCE = "checkSequence";
  @SerializedName(SERIALIZED_NAME_CHECK_SEQUENCE)
  private Integer checkSequence;

  public static final String SERIALIZED_NAME_CREATE_PAY_TYPE = "createPayType";
  @SerializedName(SERIALIZED_NAME_CREATE_PAY_TYPE)
  private String createPayType;

  public static final String SERIALIZED_NAME_FORCE_PAY_CREATION = "forcePayCreation";
  @SerializedName(SERIALIZED_NAME_FORCE_PAY_CREATION)
  private String forcePayCreation;

  public static final String SERIALIZED_NAME_GROSS_UP = "grossUp";
  @SerializedName(SERIALIZED_NAME_GROSS_UP)
  private String grossUp;

  public static final String SERIALIZED_NAME_GROSS_UP_TARGET = "grossUpTarget";
  @SerializedName(SERIALIZED_NAME_GROSS_UP_TARGET)
  private Integer grossUpTarget;

  public static final String SERIALIZED_NAME_GROSS_UP_TAX_CALC_METHOD = "grossUpTaxCalcMethod";
  @SerializedName(SERIALIZED_NAME_GROSS_UP_TAX_CALC_METHOD)
  private Integer grossUpTaxCalcMethod;

  public static final String SERIALIZED_NAME_SOURCE = "source";
  @SerializedName(SERIALIZED_NAME_SOURCE)
  private String source;

  public Earning() {
  }

  public Earning refId(UUID refId) {
    
    
    
    
    this.refId = refId;
    return this;
  }

   /**
   * Unique identifier for each earnings.
   * @return refId
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", required = true, value = "Unique identifier for each earnings.")

  public UUID getRefId() {
    return refId;
  }


  public void setRefId(UUID refId) {
    
    
    
    this.refId = refId;
  }


  public Earning companyCode(String companyCode) {
    
    
    
    
    this.companyCode = companyCode;
    return this;
  }

   /**
   * Company code associated with employee.
   * @return companyCode
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Company code associated with employee.")

  public String getCompanyCode() {
    return companyCode;
  }


  public void setCompanyCode(String companyCode) {
    
    
    
    this.companyCode = companyCode;
  }


  public Earning empNo(String empNo) {
    
    
    
    
    this.empNo = empNo;
    return this;
  }

   /**
   * Employee number associated with employee for time data.
   * @return empNo
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Employee number associated with employee for time data.")

  public String getEmpNo() {
    return empNo;
  }


  public void setEmpNo(String empNo) {
    
    
    
    this.empNo = empNo;
  }


  public Earning chargeDate(OffsetDateTime chargeDate) {
    
    
    
    
    this.chargeDate = chargeDate;
    return this;
  }

   /**
   * Used in the calculation of coefficient overtime and tips processing. Formatting must conform to ISO 8601 UTC Format
   * @return chargeDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used in the calculation of coefficient overtime and tips processing. Formatting must conform to ISO 8601 UTC Format")

  public OffsetDateTime getChargeDate() {
    return chargeDate;
  }


  public void setChargeDate(OffsetDateTime chargeDate) {
    
    
    
    this.chargeDate = chargeDate;
  }


  public Earning code(String code) {
    
    
    
    
    this.code = code;
    return this;
  }

   /**
   * Earnings code for time data
   * @return code
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Earnings code for time data")

  public String getCode() {
    return code;
  }


  public void setCode(String code) {
    
    
    
    this.code = code;
  }


  public Earning hours(BigDecimal hours) {
    
    
    
    
    this.hours = hours;
    return this;
  }

   /**
   * Number of hours associated with earnings, if appropriate. Decimal value up to 4 decimal places. Positive and negative values allowed.
   * @return hours
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of hours associated with earnings, if appropriate. Decimal value up to 4 decimal places. Positive and negative values allowed.")

  public BigDecimal getHours() {
    return hours;
  }


  public void setHours(BigDecimal hours) {
    
    
    
    this.hours = hours;
  }


  public Earning amount(BigDecimal amount) {
    
    
    
    
    this.amount = amount;
    return this;
  }

   /**
   * Amount associated with earnings, if appropriate. Positive and negative values allowed.
   * @return amount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Amount associated with earnings, if appropriate. Positive and negative values allowed.")

  public BigDecimal getAmount() {
    return amount;
  }


  public void setAmount(BigDecimal amount) {
    
    
    
    this.amount = amount;
  }


  public Earning pieceCount(BigDecimal pieceCount) {
    
    
    
    
    this.pieceCount = pieceCount;
    return this;
  }

   /**
   * Number of pieces associated with earnings, if appropriate. Positive and negative values allowed.
   * @return pieceCount
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Number of pieces associated with earnings, if appropriate. Positive and negative values allowed.")

  public BigDecimal getPieceCount() {
    return pieceCount;
  }


  public void setPieceCount(BigDecimal pieceCount) {
    
    
    
    this.pieceCount = pieceCount;
  }


  public Earning shiftCode(String shiftCode) {
    
    
    
    
    this.shiftCode = shiftCode;
    return this;
  }

   /**
   * Shift code associated with time data.
   * @return shiftCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Shift code associated with time data.")

  public String getShiftCode() {
    return shiftCode;
  }


  public void setShiftCode(String shiftCode) {
    
    
    
    this.shiftCode = shiftCode;
  }


  public Earning location(String location) {
    
    
    
    
    this.location = location;
    return this;
  }

   /**
   * Location associated with employee.
   * @return location
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Location associated with employee.")

  public String getLocation() {
    return location;
  }


  public void setLocation(String location) {
    
    
    
    this.location = location;
  }


  public Earning job(String job) {
    
    
    
    
    this.job = job;
    return this;
  }

   /**
   * Job code associated with employee’s time data.
   * @return job
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Job code associated with employee’s time data.")

  public String getJob() {
    return job;
  }


  public void setJob(String job) {
    
    
    
    this.job = job;
  }


  public Earning project(String project) {
    
    
    
    
    this.project = project;
    return this;
  }

   /**
   * Project code or value associated with employee’s time data.
   * @return project
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Project code or value associated with employee’s time data.")

  public String getProject() {
    return project;
  }


  public void setProject(String project) {
    
    
    
    this.project = project;
  }


  public Earning orgLvl1(String orgLvl1) {
    
    
    
    
    this.orgLvl1 = orgLvl1;
    return this;
  }

   /**
   * Organization level 1 code associated with employee’s time data
   * @return orgLvl1
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Organization level 1 code associated with employee’s time data")

  public String getOrgLvl1() {
    return orgLvl1;
  }


  public void setOrgLvl1(String orgLvl1) {
    
    
    
    this.orgLvl1 = orgLvl1;
  }


  public Earning orgLvl2(String orgLvl2) {
    
    
    
    
    this.orgLvl2 = orgLvl2;
    return this;
  }

   /**
   * Organization level 2 code associated with employee’s time data.
   * @return orgLvl2
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Organization level 2 code associated with employee’s time data.")

  public String getOrgLvl2() {
    return orgLvl2;
  }


  public void setOrgLvl2(String orgLvl2) {
    
    
    
    this.orgLvl2 = orgLvl2;
  }


  public Earning orgLvl3(String orgLvl3) {
    
    
    
    
    this.orgLvl3 = orgLvl3;
    return this;
  }

   /**
   * Organization level 3 code associated with employee’s time data.
   * @return orgLvl3
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Organization level 3 code associated with employee’s time data.")

  public String getOrgLvl3() {
    return orgLvl3;
  }


  public void setOrgLvl3(String orgLvl3) {
    
    
    
    this.orgLvl3 = orgLvl3;
  }


  public Earning orgLvl4(String orgLvl4) {
    
    
    
    
    this.orgLvl4 = orgLvl4;
    return this;
  }

   /**
   * Organization level 4 code associated with employee’s time data.
   * @return orgLvl4
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Organization level 4 code associated with employee’s time data.")

  public String getOrgLvl4() {
    return orgLvl4;
  }


  public void setOrgLvl4(String orgLvl4) {
    
    
    
    this.orgLvl4 = orgLvl4;
  }


  public Earning payRate(BigDecimal payRate) {
    
    
    
    
    this.payRate = payRate;
    return this;
  }

   /**
   * Pay rate associated with employee’s time data.  Value overrides pay rate in UKG Pro.
   * @return payRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Pay rate associated with employee’s time data.  Value overrides pay rate in UKG Pro.")

  public BigDecimal getPayRate() {
    return payRate;
  }


  public void setPayRate(BigDecimal payRate) {
    
    
    
    this.payRate = payRate;
  }


  public Earning pieceRate(BigDecimal pieceRate) {
    
    
    
    
    this.pieceRate = pieceRate;
    return this;
  }

   /**
   * Piece rate associated with employee’s time data.  Value overrides piece rate in UKG Pro.
   * @return pieceRate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Piece rate associated with employee’s time data.  Value overrides piece rate in UKG Pro.")

  public BigDecimal getPieceRate() {
    return pieceRate;
  }


  public void setPieceRate(BigDecimal pieceRate) {
    
    
    
    this.pieceRate = pieceRate;
  }


  public Earning roePayDate(OffsetDateTime roePayDate) {
    
    
    
    
    this.roePayDate = roePayDate;
    return this;
  }

   /**
   * The Record of Employment pay date.  Must be a valid pay date.
   * @return roePayDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Record of Employment pay date.  Must be a valid pay date.")

  public OffsetDateTime getRoePayDate() {
    return roePayDate;
  }


  public void setRoePayDate(OffsetDateTime roePayDate) {
    
    
    
    this.roePayDate = roePayDate;
  }


  public Earning adjEarnPeriodStartDate(OffsetDateTime adjEarnPeriodStartDate) {
    
    
    
    
    this.adjEarnPeriodStartDate = adjEarnPeriodStartDate;
    return this;
  }

   /**
   * Used for co-efficient overtime period adjustment start date.
   * @return adjEarnPeriodStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used for co-efficient overtime period adjustment start date.")

  public OffsetDateTime getAdjEarnPeriodStartDate() {
    return adjEarnPeriodStartDate;
  }


  public void setAdjEarnPeriodStartDate(OffsetDateTime adjEarnPeriodStartDate) {
    
    
    
    this.adjEarnPeriodStartDate = adjEarnPeriodStartDate;
  }


  public Earning adjEarnPeriodEndDate(OffsetDateTime adjEarnPeriodEndDate) {
    
    
    
    
    this.adjEarnPeriodEndDate = adjEarnPeriodEndDate;
    return this;
  }

   /**
   * Used for co-efficient overtime period adjustment end date.
   * @return adjEarnPeriodEndDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Used for co-efficient overtime period adjustment end date.")

  public OffsetDateTime getAdjEarnPeriodEndDate() {
    return adjEarnPeriodEndDate;
  }


  public void setAdjEarnPeriodEndDate(OffsetDateTime adjEarnPeriodEndDate) {
    
    
    
    this.adjEarnPeriodEndDate = adjEarnPeriodEndDate;
  }


  public Earning checkSequence(Integer checkSequence) {
    
    
    
    
    this.checkSequence = checkSequence;
    return this;
  }

   /**
   * Sequence of multiple checks for a single employee. Specify the type of additional pay (check or DDA) being added to the employee(s) via Time Clock Import. A - Creates an additional direct deposit advice with deductions (for employees  with existing DD setups). D - Creates an additional direct deposit with No deductions (for employees with existing DD setups). B - Creates an additional pay with deductions; this will create a live check for the employees. J -  Creates an additional pay with No deductions; this will create a live check for the employees 
   * @return checkSequence
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Sequence of multiple checks for a single employee. Specify the type of additional pay (check or DDA) being added to the employee(s) via Time Clock Import. A - Creates an additional direct deposit advice with deductions (for employees  with existing DD setups). D - Creates an additional direct deposit with No deductions (for employees with existing DD setups). B - Creates an additional pay with deductions; this will create a live check for the employees. J -  Creates an additional pay with No deductions; this will create a live check for the employees ")

  public Integer getCheckSequence() {
    return checkSequence;
  }


  public void setCheckSequence(Integer checkSequence) {
    
    
    
    this.checkSequence = checkSequence;
  }


  public Earning createPayType(String createPayType) {
    
    
    
    
    this.createPayType = createPayType;
    return this;
  }

   /**
   * R - Creates a Regular Pay check.
   * @return createPayType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "R - Creates a Regular Pay check.")

  public String getCreatePayType() {
    return createPayType;
  }


  public void setCreatePayType(String createPayType) {
    
    
    
    this.createPayType = createPayType;
  }


  public Earning forcePayCreation(String forcePayCreation) {
    
    
    
    
    this.forcePayCreation = forcePayCreation;
    return this;
  }

   /**
   * To force the creation of an additional pay via Time clock import, set this to Y.
   * @return forcePayCreation
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "To force the creation of an additional pay via Time clock import, set this to Y.")

  public String getForcePayCreation() {
    return forcePayCreation;
  }


  public void setForcePayCreation(String forcePayCreation) {
    
    
    
    this.forcePayCreation = forcePayCreation;
  }


  public Earning grossUp(String grossUp) {
    
    
    
    
    this.grossUp = grossUp;
    return this;
  }

   /**
   * This identifies if an earning is to be grossed up.
   * @return grossUp
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "This identifies if an earning is to be grossed up.")

  public String getGrossUp() {
    return grossUp;
  }


  public void setGrossUp(String grossUp) {
    
    
    
    this.grossUp = grossUp;
  }


  public Earning grossUpTarget(Integer grossUpTarget) {
    
    
    
    
    this.grossUpTarget = grossUpTarget;
    return this;
  }

   /**
   * Specified net amount.
   * @return grossUpTarget
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Specified net amount.")

  public Integer getGrossUpTarget() {
    return grossUpTarget;
  }


  public void setGrossUpTarget(Integer grossUpTarget) {
    
    
    
    this.grossUpTarget = grossUpTarget;
  }


  public Earning grossUpTaxCalcMethod(Integer grossUpTaxCalcMethod) {
    
    
    
    
    this.grossUpTaxCalcMethod = grossUpTaxCalcMethod;
    return this;
  }

   /**
   * The Gross Up Tax Calculation Method (E_Batch. EbtGrossUpTaxCalcMethod) Numeric value to identify which taxes to include in the gross up calculation.
   * @return grossUpTaxCalcMethod
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The Gross Up Tax Calculation Method (E_Batch. EbtGrossUpTaxCalcMethod) Numeric value to identify which taxes to include in the gross up calculation.")

  public Integer getGrossUpTaxCalcMethod() {
    return grossUpTaxCalcMethod;
  }


  public void setGrossUpTaxCalcMethod(Integer grossUpTaxCalcMethod) {
    
    
    
    this.grossUpTaxCalcMethod = grossUpTaxCalcMethod;
  }


  public Earning source(String source) {
    
    
    
    
    this.source = source;
    return this;
  }

   /**
   * Source of the data as appropriate. Usually an alias of the system sending the data.
   * @return source
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "Source of the data as appropriate. Usually an alias of the system sending the data.")

  public String getSource() {
    return source;
  }


  public void setSource(String source) {
    
    
    
    this.source = source;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Earning instance itself
   */
  public Earning putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Earning earning = (Earning) o;
    return Objects.equals(this.refId, earning.refId) &&
        Objects.equals(this.companyCode, earning.companyCode) &&
        Objects.equals(this.empNo, earning.empNo) &&
        Objects.equals(this.chargeDate, earning.chargeDate) &&
        Objects.equals(this.code, earning.code) &&
        Objects.equals(this.hours, earning.hours) &&
        Objects.equals(this.amount, earning.amount) &&
        Objects.equals(this.pieceCount, earning.pieceCount) &&
        Objects.equals(this.shiftCode, earning.shiftCode) &&
        Objects.equals(this.location, earning.location) &&
        Objects.equals(this.job, earning.job) &&
        Objects.equals(this.project, earning.project) &&
        Objects.equals(this.orgLvl1, earning.orgLvl1) &&
        Objects.equals(this.orgLvl2, earning.orgLvl2) &&
        Objects.equals(this.orgLvl3, earning.orgLvl3) &&
        Objects.equals(this.orgLvl4, earning.orgLvl4) &&
        Objects.equals(this.payRate, earning.payRate) &&
        Objects.equals(this.pieceRate, earning.pieceRate) &&
        Objects.equals(this.roePayDate, earning.roePayDate) &&
        Objects.equals(this.adjEarnPeriodStartDate, earning.adjEarnPeriodStartDate) &&
        Objects.equals(this.adjEarnPeriodEndDate, earning.adjEarnPeriodEndDate) &&
        Objects.equals(this.checkSequence, earning.checkSequence) &&
        Objects.equals(this.createPayType, earning.createPayType) &&
        Objects.equals(this.forcePayCreation, earning.forcePayCreation) &&
        Objects.equals(this.grossUp, earning.grossUp) &&
        Objects.equals(this.grossUpTarget, earning.grossUpTarget) &&
        Objects.equals(this.grossUpTaxCalcMethod, earning.grossUpTaxCalcMethod) &&
        Objects.equals(this.source, earning.source)&&
        Objects.equals(this.additionalProperties, earning.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(refId, companyCode, empNo, chargeDate, code, hours, amount, pieceCount, shiftCode, location, job, project, orgLvl1, orgLvl2, orgLvl3, orgLvl4, payRate, pieceRate, roePayDate, adjEarnPeriodStartDate, adjEarnPeriodEndDate, checkSequence, createPayType, forcePayCreation, grossUp, grossUpTarget, grossUpTaxCalcMethod, source, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Earning {\n");
    sb.append("    refId: ").append(toIndentedString(refId)).append("\n");
    sb.append("    companyCode: ").append(toIndentedString(companyCode)).append("\n");
    sb.append("    empNo: ").append(toIndentedString(empNo)).append("\n");
    sb.append("    chargeDate: ").append(toIndentedString(chargeDate)).append("\n");
    sb.append("    code: ").append(toIndentedString(code)).append("\n");
    sb.append("    hours: ").append(toIndentedString(hours)).append("\n");
    sb.append("    amount: ").append(toIndentedString(amount)).append("\n");
    sb.append("    pieceCount: ").append(toIndentedString(pieceCount)).append("\n");
    sb.append("    shiftCode: ").append(toIndentedString(shiftCode)).append("\n");
    sb.append("    location: ").append(toIndentedString(location)).append("\n");
    sb.append("    job: ").append(toIndentedString(job)).append("\n");
    sb.append("    project: ").append(toIndentedString(project)).append("\n");
    sb.append("    orgLvl1: ").append(toIndentedString(orgLvl1)).append("\n");
    sb.append("    orgLvl2: ").append(toIndentedString(orgLvl2)).append("\n");
    sb.append("    orgLvl3: ").append(toIndentedString(orgLvl3)).append("\n");
    sb.append("    orgLvl4: ").append(toIndentedString(orgLvl4)).append("\n");
    sb.append("    payRate: ").append(toIndentedString(payRate)).append("\n");
    sb.append("    pieceRate: ").append(toIndentedString(pieceRate)).append("\n");
    sb.append("    roePayDate: ").append(toIndentedString(roePayDate)).append("\n");
    sb.append("    adjEarnPeriodStartDate: ").append(toIndentedString(adjEarnPeriodStartDate)).append("\n");
    sb.append("    adjEarnPeriodEndDate: ").append(toIndentedString(adjEarnPeriodEndDate)).append("\n");
    sb.append("    checkSequence: ").append(toIndentedString(checkSequence)).append("\n");
    sb.append("    createPayType: ").append(toIndentedString(createPayType)).append("\n");
    sb.append("    forcePayCreation: ").append(toIndentedString(forcePayCreation)).append("\n");
    sb.append("    grossUp: ").append(toIndentedString(grossUp)).append("\n");
    sb.append("    grossUpTarget: ").append(toIndentedString(grossUpTarget)).append("\n");
    sb.append("    grossUpTaxCalcMethod: ").append(toIndentedString(grossUpTaxCalcMethod)).append("\n");
    sb.append("    source: ").append(toIndentedString(source)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("refId");
    openapiFields.add("companyCode");
    openapiFields.add("empNo");
    openapiFields.add("chargeDate");
    openapiFields.add("code");
    openapiFields.add("hours");
    openapiFields.add("amount");
    openapiFields.add("pieceCount");
    openapiFields.add("shiftCode");
    openapiFields.add("location");
    openapiFields.add("job");
    openapiFields.add("project");
    openapiFields.add("orgLvl1");
    openapiFields.add("orgLvl2");
    openapiFields.add("orgLvl3");
    openapiFields.add("orgLvl4");
    openapiFields.add("payRate");
    openapiFields.add("pieceRate");
    openapiFields.add("roePayDate");
    openapiFields.add("adjEarnPeriodStartDate");
    openapiFields.add("adjEarnPeriodEndDate");
    openapiFields.add("checkSequence");
    openapiFields.add("createPayType");
    openapiFields.add("forcePayCreation");
    openapiFields.add("grossUp");
    openapiFields.add("grossUpTarget");
    openapiFields.add("grossUpTaxCalcMethod");
    openapiFields.add("source");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
    openapiRequiredFields.add("refId");
    openapiRequiredFields.add("companyCode");
    openapiRequiredFields.add("empNo");
    openapiRequiredFields.add("code");
    openapiRequiredFields.add("source");
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Earning
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Earning.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Earning is not found in the empty JSON string", Earning.openapiRequiredFields.toString()));
        }
      }

      // check to make sure all required properties/fields are present in the JSON string
      for (String requiredField : Earning.openapiRequiredFields) {
        if (jsonObj.get(requiredField) == null) {
          throw new IllegalArgumentException(String.format("The required field `%s` is not found in the JSON string: %s", requiredField, jsonObj.toString()));
        }
      }
      if (!jsonObj.get("refId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `refId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("refId").toString()));
      }
      if (!jsonObj.get("companyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyCode").toString()));
      }
      if (!jsonObj.get("empNo").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `empNo` to be a primitive type in the JSON string but got `%s`", jsonObj.get("empNo").toString()));
      }
      if (!jsonObj.get("code").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `code` to be a primitive type in the JSON string but got `%s`", jsonObj.get("code").toString()));
      }
      if ((jsonObj.get("shiftCode") != null && !jsonObj.get("shiftCode").isJsonNull()) && !jsonObj.get("shiftCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `shiftCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("shiftCode").toString()));
      }
      if ((jsonObj.get("location") != null && !jsonObj.get("location").isJsonNull()) && !jsonObj.get("location").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `location` to be a primitive type in the JSON string but got `%s`", jsonObj.get("location").toString()));
      }
      if ((jsonObj.get("job") != null && !jsonObj.get("job").isJsonNull()) && !jsonObj.get("job").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `job` to be a primitive type in the JSON string but got `%s`", jsonObj.get("job").toString()));
      }
      if ((jsonObj.get("project") != null && !jsonObj.get("project").isJsonNull()) && !jsonObj.get("project").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `project` to be a primitive type in the JSON string but got `%s`", jsonObj.get("project").toString()));
      }
      if ((jsonObj.get("orgLvl1") != null && !jsonObj.get("orgLvl1").isJsonNull()) && !jsonObj.get("orgLvl1").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgLvl1` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgLvl1").toString()));
      }
      if ((jsonObj.get("orgLvl2") != null && !jsonObj.get("orgLvl2").isJsonNull()) && !jsonObj.get("orgLvl2").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgLvl2` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgLvl2").toString()));
      }
      if ((jsonObj.get("orgLvl3") != null && !jsonObj.get("orgLvl3").isJsonNull()) && !jsonObj.get("orgLvl3").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgLvl3` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgLvl3").toString()));
      }
      if ((jsonObj.get("orgLvl4") != null && !jsonObj.get("orgLvl4").isJsonNull()) && !jsonObj.get("orgLvl4").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `orgLvl4` to be a primitive type in the JSON string but got `%s`", jsonObj.get("orgLvl4").toString()));
      }
      if ((jsonObj.get("createPayType") != null && !jsonObj.get("createPayType").isJsonNull()) && !jsonObj.get("createPayType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `createPayType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("createPayType").toString()));
      }
      if ((jsonObj.get("forcePayCreation") != null && !jsonObj.get("forcePayCreation").isJsonNull()) && !jsonObj.get("forcePayCreation").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `forcePayCreation` to be a primitive type in the JSON string but got `%s`", jsonObj.get("forcePayCreation").toString()));
      }
      if ((jsonObj.get("grossUp") != null && !jsonObj.get("grossUp").isJsonNull()) && !jsonObj.get("grossUp").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `grossUp` to be a primitive type in the JSON string but got `%s`", jsonObj.get("grossUp").toString()));
      }
      if (!jsonObj.get("source").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `source` to be a primitive type in the JSON string but got `%s`", jsonObj.get("source").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Earning.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Earning' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Earning> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Earning.class));

       return (TypeAdapter<T>) new TypeAdapter<Earning>() {
           @Override
           public void write(JsonWriter out, Earning value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Earning read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Earning instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Earning given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Earning
  * @throws IOException if the JSON string is invalid with respect to Earning
  */
  public static Earning fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Earning.class);
  }

 /**
  * Convert an instance of Earning to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

