/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.konfigthis.client.model.ApplicationApplicantSource;
import com.konfigthis.client.model.ApplicationCandidate;
import com.konfigthis.client.model.ApplicationCreator;
import com.konfigthis.client.model.ApplicationHireDetails;
import com.konfigthis.client.model.ApplicationJobBoard;
import com.konfigthis.client.model.ApplicationJobPosting;
import com.konfigthis.client.model.ApplicationOpportunity;
import com.konfigthis.client.model.Behaviors;
import com.konfigthis.client.model.CountryQuestionResponses;
import com.konfigthis.client.model.Educations;
import com.konfigthis.client.model.Licenses;
import com.konfigthis.client.model.Links;
import com.konfigthis.client.model.Motivations;
import com.konfigthis.client.model.ScreeningQuestionResponses;
import com.konfigthis.client.model.Skill;
import com.konfigthis.client.model.Workexperience;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * The section that contains details of an application which the background check order has been requested for
 */
@ApiModel(description = "The section that contains details of an application which the background check order has been requested for")@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class Application {
  public static final String SERIALIZED_NAME_ID = "id";
  @SerializedName(SERIALIZED_NAME_ID)
  private String id;

  public static final String SERIALIZED_NAME_UPDATED_AT = "updated_at";
  @SerializedName(SERIALIZED_NAME_UPDATED_AT)
  private String updatedAt;

  public static final String SERIALIZED_NAME_CREATOR = "creator";
  @SerializedName(SERIALIZED_NAME_CREATOR)
  private ApplicationCreator creator;

  public static final String SERIALIZED_NAME_CANDIDATE = "candidate";
  @SerializedName(SERIALIZED_NAME_CANDIDATE)
  private ApplicationCandidate candidate;

  public static final String SERIALIZED_NAME_OPPORTUNITY = "opportunity";
  @SerializedName(SERIALIZED_NAME_OPPORTUNITY)
  private ApplicationOpportunity opportunity;

  public static final String SERIALIZED_NAME_JOB_BOARD = "job_board";
  @SerializedName(SERIALIZED_NAME_JOB_BOARD)
  private ApplicationJobBoard jobBoard;

  public static final String SERIALIZED_NAME_APPLICANT_SOURCE = "applicant_source";
  @SerializedName(SERIALIZED_NAME_APPLICANT_SOURCE)
  private ApplicationApplicantSource applicantSource;

  public static final String SERIALIZED_NAME_JOB_POSTING = "job_posting";
  @SerializedName(SERIALIZED_NAME_JOB_POSTING)
  private ApplicationJobPosting jobPosting;

  public static final String SERIALIZED_NAME_AVAILABLE_START_DATE = "available_start_date";
  @SerializedName(SERIALIZED_NAME_AVAILABLE_START_DATE)
  private String availableStartDate;

  public static final String SERIALIZED_NAME_ = "";
  @SerializedName(SERIALIZED_NAME_)
  private List<Object>  = null;

  public static final String SERIALIZED_NAME_SCREENING_QUESTION_RESPONSES = "screening_question_responses";
  @SerializedName(SERIALIZED_NAME_SCREENING_QUESTION_RESPONSES)
  private List<ScreeningQuestionResponses> screeningQuestionResponses = null;

  public static final String SERIALIZED_NAME_COUNTRY_QUESTION_RESPONSES = "country_question_responses";
  @SerializedName(SERIALIZED_NAME_COUNTRY_QUESTION_RESPONSES)
  private List<CountryQuestionResponses> countryQuestionResponses = null;

  public static final String SERIALIZED_NAME_APPLIED_DATE = "applied_date";
  @SerializedName(SERIALIZED_NAME_APPLIED_DATE)
  private String appliedDate;

  public static final String SERIALIZED_NAME_IS_PROCESSED = "is_processed";
  @SerializedName(SERIALIZED_NAME_IS_PROCESSED)
  private Boolean isProcessed;

  public static final String SERIALIZED_NAME_HIRE_DETAILS = "hire_details";
  @SerializedName(SERIALIZED_NAME_HIRE_DETAILS)
  private ApplicationHireDetails hireDetails;

  public static final String SERIALIZED_NAME_EDUCATIONS = "educations";
  @SerializedName(SERIALIZED_NAME_EDUCATIONS)
  private List<Educations> educations = null;

  public static final String SERIALIZED_NAME_LICENSES = "licenses";
  @SerializedName(SERIALIZED_NAME_LICENSES)
  private List<Licenses> licenses = null;

  public static final String SERIALIZED_NAME_BEHAVIORS = "behaviors";
  @SerializedName(SERIALIZED_NAME_BEHAVIORS)
  private List<Behaviors> behaviors = null;

  public static final String SERIALIZED_NAME_MOTIVATIONS = "motivations";
  @SerializedName(SERIALIZED_NAME_MOTIVATIONS)
  private List<Motivations> motivations = null;

  public static final String SERIALIZED_NAME_WORK_EXPERIENCE = "work_experience";
  @SerializedName(SERIALIZED_NAME_WORK_EXPERIENCE)
  private List<Workexperience> workExperience = null;

  public static final String SERIALIZED_NAME_SKILLS = "skills";
  @SerializedName(SERIALIZED_NAME_SKILLS)
  private List<Skill> skills = null;

  public static final String SERIALIZED_NAME_LINKS = "links";
  @SerializedName(SERIALIZED_NAME_LINKS)
  private List<Links> links = null;

  public Application() {
  }

  public Application id(String id) {
    
    
    
    
    this.id = id;
    return this;
  }

   /**
   * The unique application id
   * @return id
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The unique application id")

  public String getId() {
    return id;
  }


  public void setId(String id) {
    
    
    
    this.id = id;
  }


  public Application updatedAt(String updatedAt) {
    
    
    
    
    this.updatedAt = updatedAt;
    return this;
  }

   /**
   * The application’s last updated date.
   * @return updatedAt
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The application’s last updated date.")

  public String getUpdatedAt() {
    return updatedAt;
  }


  public void setUpdatedAt(String updatedAt) {
    
    
    
    this.updatedAt = updatedAt;
  }


  public Application creator(ApplicationCreator creator) {
    
    
    
    
    this.creator = creator;
    return this;
  }

   /**
   * Get creator
   * @return creator
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationCreator getCreator() {
    return creator;
  }


  public void setCreator(ApplicationCreator creator) {
    
    
    
    this.creator = creator;
  }


  public Application candidate(ApplicationCandidate candidate) {
    
    
    
    
    this.candidate = candidate;
    return this;
  }

   /**
   * Get candidate
   * @return candidate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationCandidate getCandidate() {
    return candidate;
  }


  public void setCandidate(ApplicationCandidate candidate) {
    
    
    
    this.candidate = candidate;
  }


  public Application opportunity(ApplicationOpportunity opportunity) {
    
    
    
    
    this.opportunity = opportunity;
    return this;
  }

   /**
   * Get opportunity
   * @return opportunity
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationOpportunity getOpportunity() {
    return opportunity;
  }


  public void setOpportunity(ApplicationOpportunity opportunity) {
    
    
    
    this.opportunity = opportunity;
  }


  public Application jobBoard(ApplicationJobBoard jobBoard) {
    
    
    
    
    this.jobBoard = jobBoard;
    return this;
  }

   /**
   * Get jobBoard
   * @return jobBoard
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationJobBoard getJobBoard() {
    return jobBoard;
  }


  public void setJobBoard(ApplicationJobBoard jobBoard) {
    
    
    
    this.jobBoard = jobBoard;
  }


  public Application applicantSource(ApplicationApplicantSource applicantSource) {
    
    
    
    
    this.applicantSource = applicantSource;
    return this;
  }

   /**
   * Get applicantSource
   * @return applicantSource
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationApplicantSource getApplicantSource() {
    return applicantSource;
  }


  public void setApplicantSource(ApplicationApplicantSource applicantSource) {
    
    
    
    this.applicantSource = applicantSource;
  }


  public Application jobPosting(ApplicationJobPosting jobPosting) {
    
    
    
    
    this.jobPosting = jobPosting;
    return this;
  }

   /**
   * Get jobPosting
   * @return jobPosting
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationJobPosting getJobPosting() {
    return jobPosting;
  }


  public void setJobPosting(ApplicationJobPosting jobPosting) {
    
    
    
    this.jobPosting = jobPosting;
  }


  public Application availableStartDate(String availableStartDate) {
    
    
    
    
    this.availableStartDate = availableStartDate;
    return this;
  }

   /**
   * The date that the candidate is available to start.
   * @return availableStartDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date that the candidate is available to start.")

  public String getAvailableStartDate() {
    return availableStartDate;
  }


  public void setAvailableStartDate(String availableStartDate) {
    
    
    
    this.availableStartDate = availableStartDate;
  }


  public Application (List<Object> ) {
    
    
    
    
    this. = ;
    return this;
  }

  public Application addItem(Object Item) {
    if (this. == null) {
      this. = new ArrayList<>();
    }
    this..add(Item);
    return this;
  }

   /**
   * The array of candidate answers to the opportunity screening questions
   * @return 
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The array of candidate answers to the opportunity screening questions")

  public List<Object> get() {
    return ;
  }


  public void set(List<Object> ) {
    
    
    
    this. = ;
  }


  public Application screeningQuestionResponses(List<ScreeningQuestionResponses> screeningQuestionResponses) {
    
    
    
    
    this.screeningQuestionResponses = screeningQuestionResponses;
    return this;
  }

  public Application addScreeningQuestionResponsesItem(ScreeningQuestionResponses screeningQuestionResponsesItem) {
    if (this.screeningQuestionResponses == null) {
      this.screeningQuestionResponses = new ArrayList<>();
    }
    this.screeningQuestionResponses.add(screeningQuestionResponsesItem);
    return this;
  }

   /**
   * Get screeningQuestionResponses
   * @return screeningQuestionResponses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<ScreeningQuestionResponses> getScreeningQuestionResponses() {
    return screeningQuestionResponses;
  }


  public void setScreeningQuestionResponses(List<ScreeningQuestionResponses> screeningQuestionResponses) {
    
    
    
    this.screeningQuestionResponses = screeningQuestionResponses;
  }


  public Application countryQuestionResponses(List<CountryQuestionResponses> countryQuestionResponses) {
    
    
    
    
    this.countryQuestionResponses = countryQuestionResponses;
    return this;
  }

  public Application addCountryQuestionResponsesItem(CountryQuestionResponses countryQuestionResponsesItem) {
    if (this.countryQuestionResponses == null) {
      this.countryQuestionResponses = new ArrayList<>();
    }
    this.countryQuestionResponses.add(countryQuestionResponsesItem);
    return this;
  }

   /**
   * Get countryQuestionResponses
   * @return countryQuestionResponses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<CountryQuestionResponses> getCountryQuestionResponses() {
    return countryQuestionResponses;
  }


  public void setCountryQuestionResponses(List<CountryQuestionResponses> countryQuestionResponses) {
    
    
    
    this.countryQuestionResponses = countryQuestionResponses;
  }


  public Application appliedDate(String appliedDate) {
    
    
    
    
    this.appliedDate = appliedDate;
    return this;
  }

   /**
   * The date on which the candidate applied.
   * @return appliedDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The date on which the candidate applied.")

  public String getAppliedDate() {
    return appliedDate;
  }


  public void setAppliedDate(String appliedDate) {
    
    
    
    this.appliedDate = appliedDate;
  }


  public Application isProcessed(Boolean isProcessed) {
    
    
    
    
    this.isProcessed = isProcessed;
    return this;
  }

   /**
   * The flag indicating if the application has been processed
   * @return isProcessed
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "The flag indicating if the application has been processed")

  public Boolean getIsProcessed() {
    return isProcessed;
  }


  public void setIsProcessed(Boolean isProcessed) {
    
    
    
    this.isProcessed = isProcessed;
  }


  public Application hireDetails(ApplicationHireDetails hireDetails) {
    
    
    
    
    this.hireDetails = hireDetails;
    return this;
  }

   /**
   * Get hireDetails
   * @return hireDetails
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public ApplicationHireDetails getHireDetails() {
    return hireDetails;
  }


  public void setHireDetails(ApplicationHireDetails hireDetails) {
    
    
    
    this.hireDetails = hireDetails;
  }


  public Application educations(List<Educations> educations) {
    
    
    
    
    this.educations = educations;
    return this;
  }

  public Application addEducationsItem(Educations educationsItem) {
    if (this.educations == null) {
      this.educations = new ArrayList<>();
    }
    this.educations.add(educationsItem);
    return this;
  }

   /**
   * Get educations
   * @return educations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Educations> getEducations() {
    return educations;
  }


  public void setEducations(List<Educations> educations) {
    
    
    
    this.educations = educations;
  }


  public Application licenses(List<Licenses> licenses) {
    
    
    
    
    this.licenses = licenses;
    return this;
  }

  public Application addLicensesItem(Licenses licensesItem) {
    if (this.licenses == null) {
      this.licenses = new ArrayList<>();
    }
    this.licenses.add(licensesItem);
    return this;
  }

   /**
   * Get licenses
   * @return licenses
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Licenses> getLicenses() {
    return licenses;
  }


  public void setLicenses(List<Licenses> licenses) {
    
    
    
    this.licenses = licenses;
  }


  public Application behaviors(List<Behaviors> behaviors) {
    
    
    
    
    this.behaviors = behaviors;
    return this;
  }

  public Application addBehaviorsItem(Behaviors behaviorsItem) {
    if (this.behaviors == null) {
      this.behaviors = new ArrayList<>();
    }
    this.behaviors.add(behaviorsItem);
    return this;
  }

   /**
   * Get behaviors
   * @return behaviors
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Behaviors> getBehaviors() {
    return behaviors;
  }


  public void setBehaviors(List<Behaviors> behaviors) {
    
    
    
    this.behaviors = behaviors;
  }


  public Application motivations(List<Motivations> motivations) {
    
    
    
    
    this.motivations = motivations;
    return this;
  }

  public Application addMotivationsItem(Motivations motivationsItem) {
    if (this.motivations == null) {
      this.motivations = new ArrayList<>();
    }
    this.motivations.add(motivationsItem);
    return this;
  }

   /**
   * Get motivations
   * @return motivations
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Motivations> getMotivations() {
    return motivations;
  }


  public void setMotivations(List<Motivations> motivations) {
    
    
    
    this.motivations = motivations;
  }


  public Application workExperience(List<Workexperience> workExperience) {
    
    
    
    
    this.workExperience = workExperience;
    return this;
  }

  public Application addWorkExperienceItem(Workexperience workExperienceItem) {
    if (this.workExperience == null) {
      this.workExperience = new ArrayList<>();
    }
    this.workExperience.add(workExperienceItem);
    return this;
  }

   /**
   * Get workExperience
   * @return workExperience
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Workexperience> getWorkExperience() {
    return workExperience;
  }


  public void setWorkExperience(List<Workexperience> workExperience) {
    
    
    
    this.workExperience = workExperience;
  }


  public Application skills(List<Skill> skills) {
    
    
    
    
    this.skills = skills;
    return this;
  }

  public Application addSkillsItem(Skill skillsItem) {
    if (this.skills == null) {
      this.skills = new ArrayList<>();
    }
    this.skills.add(skillsItem);
    return this;
  }

   /**
   * 
   * @return skills
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Skill> getSkills() {
    return skills;
  }


  public void setSkills(List<Skill> skills) {
    
    
    
    this.skills = skills;
  }


  public Application links(List<Links> links) {
    
    
    
    
    this.links = links;
    return this;
  }

  public Application addLinksItem(Links linksItem) {
    if (this.links == null) {
      this.links = new ArrayList<>();
    }
    this.links.add(linksItem);
    return this;
  }

   /**
   * Get links
   * @return links
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public List<Links> getLinks() {
    return links;
  }


  public void setLinks(List<Links> links) {
    
    
    
    this.links = links;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the Application instance itself
   */
  public Application putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    Application application = (Application) o;
    return Objects.equals(this.id, application.id) &&
        Objects.equals(this.updatedAt, application.updatedAt) &&
        Objects.equals(this.creator, application.creator) &&
        Objects.equals(this.candidate, application.candidate) &&
        Objects.equals(this.opportunity, application.opportunity) &&
        Objects.equals(this.jobBoard, application.jobBoard) &&
        Objects.equals(this.applicantSource, application.applicantSource) &&
        Objects.equals(this.jobPosting, application.jobPosting) &&
        Objects.equals(this.availableStartDate, application.availableStartDate) &&
        Objects.equals(this., application.) &&
        Objects.equals(this.screeningQuestionResponses, application.screeningQuestionResponses) &&
        Objects.equals(this.countryQuestionResponses, application.countryQuestionResponses) &&
        Objects.equals(this.appliedDate, application.appliedDate) &&
        Objects.equals(this.isProcessed, application.isProcessed) &&
        Objects.equals(this.hireDetails, application.hireDetails) &&
        Objects.equals(this.educations, application.educations) &&
        Objects.equals(this.licenses, application.licenses) &&
        Objects.equals(this.behaviors, application.behaviors) &&
        Objects.equals(this.motivations, application.motivations) &&
        Objects.equals(this.workExperience, application.workExperience) &&
        Objects.equals(this.skills, application.skills) &&
        Objects.equals(this.links, application.links)&&
        Objects.equals(this.additionalProperties, application.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(id, updatedAt, creator, candidate, opportunity, jobBoard, applicantSource, jobPosting, availableStartDate, , screeningQuestionResponses, countryQuestionResponses, appliedDate, isProcessed, hireDetails, educations, licenses, behaviors, motivations, workExperience, skills, links, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class Application {\n");
    sb.append("    id: ").append(toIndentedString(id)).append("\n");
    sb.append("    updatedAt: ").append(toIndentedString(updatedAt)).append("\n");
    sb.append("    creator: ").append(toIndentedString(creator)).append("\n");
    sb.append("    candidate: ").append(toIndentedString(candidate)).append("\n");
    sb.append("    opportunity: ").append(toIndentedString(opportunity)).append("\n");
    sb.append("    jobBoard: ").append(toIndentedString(jobBoard)).append("\n");
    sb.append("    applicantSource: ").append(toIndentedString(applicantSource)).append("\n");
    sb.append("    jobPosting: ").append(toIndentedString(jobPosting)).append("\n");
    sb.append("    availableStartDate: ").append(toIndentedString(availableStartDate)).append("\n");
    sb.append("    : ").append(toIndentedString()).append("\n");
    sb.append("    screeningQuestionResponses: ").append(toIndentedString(screeningQuestionResponses)).append("\n");
    sb.append("    countryQuestionResponses: ").append(toIndentedString(countryQuestionResponses)).append("\n");
    sb.append("    appliedDate: ").append(toIndentedString(appliedDate)).append("\n");
    sb.append("    isProcessed: ").append(toIndentedString(isProcessed)).append("\n");
    sb.append("    hireDetails: ").append(toIndentedString(hireDetails)).append("\n");
    sb.append("    educations: ").append(toIndentedString(educations)).append("\n");
    sb.append("    licenses: ").append(toIndentedString(licenses)).append("\n");
    sb.append("    behaviors: ").append(toIndentedString(behaviors)).append("\n");
    sb.append("    motivations: ").append(toIndentedString(motivations)).append("\n");
    sb.append("    workExperience: ").append(toIndentedString(workExperience)).append("\n");
    sb.append("    skills: ").append(toIndentedString(skills)).append("\n");
    sb.append("    links: ").append(toIndentedString(links)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("id");
    openapiFields.add("updated_at");
    openapiFields.add("creator");
    openapiFields.add("candidate");
    openapiFields.add("opportunity");
    openapiFields.add("job_board");
    openapiFields.add("applicant_source");
    openapiFields.add("job_posting");
    openapiFields.add("available_start_date");
    openapiFields.add("");
    openapiFields.add("screening_question_responses");
    openapiFields.add("country_question_responses");
    openapiFields.add("applied_date");
    openapiFields.add("is_processed");
    openapiFields.add("hire_details");
    openapiFields.add("educations");
    openapiFields.add("licenses");
    openapiFields.add("behaviors");
    openapiFields.add("motivations");
    openapiFields.add("work_experience");
    openapiFields.add("skills");
    openapiFields.add("links");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to Application
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!Application.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in Application is not found in the empty JSON string", Application.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("id") != null && !jsonObj.get("id").isJsonNull()) && !jsonObj.get("id").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `id` to be a primitive type in the JSON string but got `%s`", jsonObj.get("id").toString()));
      }
      if ((jsonObj.get("updated_at") != null && !jsonObj.get("updated_at").isJsonNull()) && !jsonObj.get("updated_at").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `updated_at` to be a primitive type in the JSON string but got `%s`", jsonObj.get("updated_at").toString()));
      }
      // validate the optional field `creator`
      if (jsonObj.get("creator") != null && !jsonObj.get("creator").isJsonNull()) {
        ApplicationCreator.validateJsonObject(jsonObj.getAsJsonObject("creator"));
      }
      // validate the optional field `candidate`
      if (jsonObj.get("candidate") != null && !jsonObj.get("candidate").isJsonNull()) {
        ApplicationCandidate.validateJsonObject(jsonObj.getAsJsonObject("candidate"));
      }
      // validate the optional field `opportunity`
      if (jsonObj.get("opportunity") != null && !jsonObj.get("opportunity").isJsonNull()) {
        ApplicationOpportunity.validateJsonObject(jsonObj.getAsJsonObject("opportunity"));
      }
      // validate the optional field `job_board`
      if (jsonObj.get("job_board") != null && !jsonObj.get("job_board").isJsonNull()) {
        ApplicationJobBoard.validateJsonObject(jsonObj.getAsJsonObject("job_board"));
      }
      // validate the optional field `applicant_source`
      if (jsonObj.get("applicant_source") != null && !jsonObj.get("applicant_source").isJsonNull()) {
        ApplicationApplicantSource.validateJsonObject(jsonObj.getAsJsonObject("applicant_source"));
      }
      // validate the optional field `job_posting`
      if (jsonObj.get("job_posting") != null && !jsonObj.get("job_posting").isJsonNull()) {
        ApplicationJobPosting.validateJsonObject(jsonObj.getAsJsonObject("job_posting"));
      }
      if ((jsonObj.get("available_start_date") != null && !jsonObj.get("available_start_date").isJsonNull()) && !jsonObj.get("available_start_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `available_start_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("available_start_date").toString()));
      }
      // ensure the optional json data is an array if present
      if (jsonObj.get("") != null && !jsonObj.get("").isJsonArray()) {
        throw new IllegalArgumentException(String.format("Expected the field `` to be an array in the JSON string but got `%s`", jsonObj.get("").toString()));
      }
      if (jsonObj.get("screening_question_responses") != null && !jsonObj.get("screening_question_responses").isJsonNull()) {
        JsonArray jsonArrayscreeningQuestionResponses = jsonObj.getAsJsonArray("screening_question_responses");
        if (jsonArrayscreeningQuestionResponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("screening_question_responses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `screening_question_responses` to be an array in the JSON string but got `%s`", jsonObj.get("screening_question_responses").toString()));
          }

          // validate the optional field `screening_question_responses` (array)
          for (int i = 0; i < jsonArrayscreeningQuestionResponses.size(); i++) {
            ScreeningQuestionResponses.validateJsonObject(jsonArrayscreeningQuestionResponses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("country_question_responses") != null && !jsonObj.get("country_question_responses").isJsonNull()) {
        JsonArray jsonArraycountryQuestionResponses = jsonObj.getAsJsonArray("country_question_responses");
        if (jsonArraycountryQuestionResponses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("country_question_responses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `country_question_responses` to be an array in the JSON string but got `%s`", jsonObj.get("country_question_responses").toString()));
          }

          // validate the optional field `country_question_responses` (array)
          for (int i = 0; i < jsonArraycountryQuestionResponses.size(); i++) {
            CountryQuestionResponses.validateJsonObject(jsonArraycountryQuestionResponses.get(i).getAsJsonObject());
          };
        }
      }
      if ((jsonObj.get("applied_date") != null && !jsonObj.get("applied_date").isJsonNull()) && !jsonObj.get("applied_date").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `applied_date` to be a primitive type in the JSON string but got `%s`", jsonObj.get("applied_date").toString()));
      }
      // validate the optional field `hire_details`
      if (jsonObj.get("hire_details") != null && !jsonObj.get("hire_details").isJsonNull()) {
        ApplicationHireDetails.validateJsonObject(jsonObj.getAsJsonObject("hire_details"));
      }
      if (jsonObj.get("educations") != null && !jsonObj.get("educations").isJsonNull()) {
        JsonArray jsonArrayeducations = jsonObj.getAsJsonArray("educations");
        if (jsonArrayeducations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("educations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `educations` to be an array in the JSON string but got `%s`", jsonObj.get("educations").toString()));
          }

          // validate the optional field `educations` (array)
          for (int i = 0; i < jsonArrayeducations.size(); i++) {
            Educations.validateJsonObject(jsonArrayeducations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("licenses") != null && !jsonObj.get("licenses").isJsonNull()) {
        JsonArray jsonArraylicenses = jsonObj.getAsJsonArray("licenses");
        if (jsonArraylicenses != null) {
          // ensure the json data is an array
          if (!jsonObj.get("licenses").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `licenses` to be an array in the JSON string but got `%s`", jsonObj.get("licenses").toString()));
          }

          // validate the optional field `licenses` (array)
          for (int i = 0; i < jsonArraylicenses.size(); i++) {
            Licenses.validateJsonObject(jsonArraylicenses.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("behaviors") != null && !jsonObj.get("behaviors").isJsonNull()) {
        JsonArray jsonArraybehaviors = jsonObj.getAsJsonArray("behaviors");
        if (jsonArraybehaviors != null) {
          // ensure the json data is an array
          if (!jsonObj.get("behaviors").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `behaviors` to be an array in the JSON string but got `%s`", jsonObj.get("behaviors").toString()));
          }

          // validate the optional field `behaviors` (array)
          for (int i = 0; i < jsonArraybehaviors.size(); i++) {
            Behaviors.validateJsonObject(jsonArraybehaviors.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("motivations") != null && !jsonObj.get("motivations").isJsonNull()) {
        JsonArray jsonArraymotivations = jsonObj.getAsJsonArray("motivations");
        if (jsonArraymotivations != null) {
          // ensure the json data is an array
          if (!jsonObj.get("motivations").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `motivations` to be an array in the JSON string but got `%s`", jsonObj.get("motivations").toString()));
          }

          // validate the optional field `motivations` (array)
          for (int i = 0; i < jsonArraymotivations.size(); i++) {
            Motivations.validateJsonObject(jsonArraymotivations.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("work_experience") != null && !jsonObj.get("work_experience").isJsonNull()) {
        JsonArray jsonArrayworkExperience = jsonObj.getAsJsonArray("work_experience");
        if (jsonArrayworkExperience != null) {
          // ensure the json data is an array
          if (!jsonObj.get("work_experience").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `work_experience` to be an array in the JSON string but got `%s`", jsonObj.get("work_experience").toString()));
          }

          // validate the optional field `work_experience` (array)
          for (int i = 0; i < jsonArrayworkExperience.size(); i++) {
            Workexperience.validateJsonObject(jsonArrayworkExperience.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("skills") != null && !jsonObj.get("skills").isJsonNull()) {
        JsonArray jsonArrayskills = jsonObj.getAsJsonArray("skills");
        if (jsonArrayskills != null) {
          // ensure the json data is an array
          if (!jsonObj.get("skills").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `skills` to be an array in the JSON string but got `%s`", jsonObj.get("skills").toString()));
          }

          // validate the optional field `skills` (array)
          for (int i = 0; i < jsonArrayskills.size(); i++) {
            Skill.validateJsonObject(jsonArrayskills.get(i).getAsJsonObject());
          };
        }
      }
      if (jsonObj.get("links") != null && !jsonObj.get("links").isJsonNull()) {
        JsonArray jsonArraylinks = jsonObj.getAsJsonArray("links");
        if (jsonArraylinks != null) {
          // ensure the json data is an array
          if (!jsonObj.get("links").isJsonArray()) {
            throw new IllegalArgumentException(String.format("Expected the field `links` to be an array in the JSON string but got `%s`", jsonObj.get("links").toString()));
          }

          // validate the optional field `links` (array)
          for (int i = 0; i < jsonArraylinks.size(); i++) {
            Links.validateJsonObject(jsonArraylinks.get(i).getAsJsonObject());
          };
        }
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!Application.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'Application' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<Application> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(Application.class));

       return (TypeAdapter<T>) new TypeAdapter<Application>() {
           @Override
           public void write(JsonWriter out, Application value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public Application read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             Application instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of Application given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of Application
  * @throws IOException if the JSON string is invalid with respect to Application
  */
  public static Application fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, Application.class);
  }

 /**
  * Convert an instance of Application to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

