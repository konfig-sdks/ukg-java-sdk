/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * EmployeeIdentifier
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class EmployeeIdentifier {
  public static final String SERIALIZED_NAME_COMPANY_CODE = "companyCode";
  @SerializedName(SERIALIZED_NAME_COMPANY_CODE)
  private String companyCode;

  public static final String SERIALIZED_NAME_EMPLOYEE_NUMBER = "employeeNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_NUMBER)
  private String employeeNumber;

  public static final String SERIALIZED_NAME_EEID = "eeid";
  @SerializedName(SERIALIZED_NAME_EEID)
  private String eeid;

  public static final String SERIALIZED_NAME_COID = "coid";
  @SerializedName(SERIALIZED_NAME_COID)
  private String coid;

  public EmployeeIdentifier() {
  }

  public EmployeeIdentifier companyCode(String companyCode) {
    
    
    
    
    this.companyCode = companyCode;
    return this;
  }

   /**
   * Get companyCode
   * @return companyCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyCode() {
    return companyCode;
  }


  public void setCompanyCode(String companyCode) {
    
    
    
    this.companyCode = companyCode;
  }


  public EmployeeIdentifier employeeNumber(String employeeNumber) {
    
    
    
    
    this.employeeNumber = employeeNumber;
    return this;
  }

   /**
   * Get employeeNumber
   * @return employeeNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeNumber() {
    return employeeNumber;
  }


  public void setEmployeeNumber(String employeeNumber) {
    
    
    
    this.employeeNumber = employeeNumber;
  }


  public EmployeeIdentifier eeid(String eeid) {
    
    
    
    
    this.eeid = eeid;
    return this;
  }

   /**
   * Get eeid
   * @return eeid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEeid() {
    return eeid;
  }


  public void setEeid(String eeid) {
    
    
    
    this.eeid = eeid;
  }


  public EmployeeIdentifier coid(String coid) {
    
    
    
    
    this.coid = coid;
    return this;
  }

   /**
   * Get coid
   * @return coid
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCoid() {
    return coid;
  }


  public void setCoid(String coid) {
    
    
    
    this.coid = coid;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the EmployeeIdentifier instance itself
   */
  public EmployeeIdentifier putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    EmployeeIdentifier employeeIdentifier = (EmployeeIdentifier) o;
    return Objects.equals(this.companyCode, employeeIdentifier.companyCode) &&
        Objects.equals(this.employeeNumber, employeeIdentifier.employeeNumber) &&
        Objects.equals(this.eeid, employeeIdentifier.eeid) &&
        Objects.equals(this.coid, employeeIdentifier.coid)&&
        Objects.equals(this.additionalProperties, employeeIdentifier.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(companyCode, employeeNumber, eeid, coid, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class EmployeeIdentifier {\n");
    sb.append("    companyCode: ").append(toIndentedString(companyCode)).append("\n");
    sb.append("    employeeNumber: ").append(toIndentedString(employeeNumber)).append("\n");
    sb.append("    eeid: ").append(toIndentedString(eeid)).append("\n");
    sb.append("    coid: ").append(toIndentedString(coid)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("companyCode");
    openapiFields.add("employeeNumber");
    openapiFields.add("eeid");
    openapiFields.add("coid");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to EmployeeIdentifier
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!EmployeeIdentifier.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in EmployeeIdentifier is not found in the empty JSON string", EmployeeIdentifier.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("companyCode") != null && !jsonObj.get("companyCode").isJsonNull()) && !jsonObj.get("companyCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyCode").toString()));
      }
      if ((jsonObj.get("employeeNumber") != null && !jsonObj.get("employeeNumber").isJsonNull()) && !jsonObj.get("employeeNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeNumber").toString()));
      }
      if ((jsonObj.get("eeid") != null && !jsonObj.get("eeid").isJsonNull()) && !jsonObj.get("eeid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `eeid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("eeid").toString()));
      }
      if ((jsonObj.get("coid") != null && !jsonObj.get("coid").isJsonNull()) && !jsonObj.get("coid").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `coid` to be a primitive type in the JSON string but got `%s`", jsonObj.get("coid").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!EmployeeIdentifier.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'EmployeeIdentifier' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<EmployeeIdentifier> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(EmployeeIdentifier.class));

       return (TypeAdapter<T>) new TypeAdapter<EmployeeIdentifier>() {
           @Override
           public void write(JsonWriter out, EmployeeIdentifier value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public EmployeeIdentifier read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             EmployeeIdentifier instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of EmployeeIdentifier given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of EmployeeIdentifier
  * @throws IOException if the JSON string is invalid with respect to EmployeeIdentifier
  */
  public static EmployeeIdentifier fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, EmployeeIdentifier.class);
  }

 /**
  * Convert an instance of EmployeeIdentifier to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

