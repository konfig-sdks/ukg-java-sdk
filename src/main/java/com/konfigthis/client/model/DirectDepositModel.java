/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.model;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.time.OffsetDateTime;
import java.util.UUID;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.JsonArray;
import com.google.gson.JsonDeserializationContext;
import com.google.gson.JsonDeserializer;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.JsonParseException;
import com.google.gson.TypeAdapterFactory;
import com.google.gson.reflect.TypeToken;
import org.apache.commons.lang3.StringUtils;

import java.lang.reflect.Type;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Map.Entry;
import java.util.Set;

import com.konfigthis.client.JSON;

/**
 * DirectDepositModel
 */@javax.annotation.Generated(value = "Generated by https://konfigthis.com")
public class DirectDepositModel {
  public static final String SERIALIZED_NAME_DESCRIPTION = "description";
  @SerializedName(SERIALIZED_NAME_DESCRIPTION)
  private String description;

  public static final String SERIALIZED_NAME_ACCOUNT = "account";
  @SerializedName(SERIALIZED_NAME_ACCOUNT)
  private String account;

  public static final String SERIALIZED_NAME_ACCOUNT_TYPE = "accountType";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_TYPE)
  private String accountType;

  public static final String SERIALIZED_NAME_AMOUNT_OR_PERCENT = "amountOrPercent";
  @SerializedName(SERIALIZED_NAME_AMOUNT_OR_PERCENT)
  private Double amountOrPercent;

  public static final String SERIALIZED_NAME_COMPANY_ID = "companyId";
  @SerializedName(SERIALIZED_NAME_COMPANY_ID)
  private String companyId;

  public static final String SERIALIZED_NAME_DIRECT_DEPOSIT_OR_PRENOTE = "directDepositOrPrenote";
  @SerializedName(SERIALIZED_NAME_DIRECT_DEPOSIT_OR_PRENOTE)
  private String directDepositOrPrenote;

  public static final String SERIALIZED_NAME_DEPOSIT_RULE = "depositRule";
  @SerializedName(SERIALIZED_NAME_DEPOSIT_RULE)
  private String depositRule;

  public static final String SERIALIZED_NAME_EMPLOYEE_BANK_ID = "employeeBankId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_BANK_ID)
  private String employeeBankId;

  public static final String SERIALIZED_NAME_EMPLOYEE_BANK_NAME = "employeeBankName";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_BANK_NAME)
  private String employeeBankName;

  public static final String SERIALIZED_NAME_EMPLOYEE_BANK_ROUTING_NUMBER = "employeeBankRoutingNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_BANK_ROUTING_NUMBER)
  private String employeeBankRoutingNumber;

  public static final String SERIALIZED_NAME_EMPLOYEE_ID = "employeeId";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_ID)
  private String employeeId;

  public static final String SERIALIZED_NAME_FIRST_PRENOTE_PAY_DATE = "firstPrenotePayDate";
  @SerializedName(SERIALIZED_NAME_FIRST_PRENOTE_PAY_DATE)
  private OffsetDateTime firstPrenotePayDate;

  public static final String SERIALIZED_NAME_SEQUENCE_NUMBER = "sequenceNumber";
  @SerializedName(SERIALIZED_NAME_SEQUENCE_NUMBER)
  private String sequenceNumber;

  public static final String SERIALIZED_NAME_EMPLOYEE_INSTITUTION_NUMBER = "employeeInstitutionNumber";
  @SerializedName(SERIALIZED_NAME_EMPLOYEE_INSTITUTION_NUMBER)
  private String employeeInstitutionNumber;

  public static final String SERIALIZED_NAME_COUNTRY_CODE = "countryCode";
  @SerializedName(SERIALIZED_NAME_COUNTRY_CODE)
  private String countryCode;

  public static final String SERIALIZED_NAME_FOREIGN_ACCOUNT_NUMBER = "foreignAccountNumber";
  @SerializedName(SERIALIZED_NAME_FOREIGN_ACCOUNT_NUMBER)
  private String foreignAccountNumber;

  public static final String SERIALIZED_NAME_FOREIGN_ACCOUNT_NUMBER_TYPE = "foreignAccountNumberType";
  @SerializedName(SERIALIZED_NAME_FOREIGN_ACCOUNT_NUMBER_TYPE)
  private String foreignAccountNumberType;

  public static final String SERIALIZED_NAME_ACCOUNT_RECORD_ID = "accountRecordId";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_RECORD_ID)
  private UUID accountRecordId;

  public static final String SERIALIZED_NAME_DATE_TIME_CHANGED = "dateTimeChanged";
  @SerializedName(SERIALIZED_NAME_DATE_TIME_CHANGED)
  private OffsetDateTime dateTimeChanged;

  public static final String SERIALIZED_NAME_ACCOUNT_IS_INACTIVE = "accountIsInactive";
  @SerializedName(SERIALIZED_NAME_ACCOUNT_IS_INACTIVE)
  private Boolean accountIsInactive;

  public DirectDepositModel() {
  }

  public DirectDepositModel description(String description) {
    
    
    
    
    this.description = description;
    return this;
  }

   /**
   * Get description
   * @return description
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDescription() {
    return description;
  }


  public void setDescription(String description) {
    
    
    
    this.description = description;
  }


  public DirectDepositModel account(String account) {
    
    
    
    
    this.account = account;
    return this;
  }

   /**
   * Get account
   * @return account
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccount() {
    return account;
  }


  public void setAccount(String account) {
    
    
    
    this.account = account;
  }


  public DirectDepositModel accountType(String accountType) {
    
    
    
    
    this.accountType = accountType;
    return this;
  }

   /**
   * Get accountType
   * @return accountType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getAccountType() {
    return accountType;
  }


  public void setAccountType(String accountType) {
    
    
    
    this.accountType = accountType;
  }


  public DirectDepositModel amountOrPercent(Double amountOrPercent) {
    
    
    
    
    this.amountOrPercent = amountOrPercent;
    return this;
  }

   /**
   * Get amountOrPercent
   * @return amountOrPercent
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Double getAmountOrPercent() {
    return amountOrPercent;
  }


  public void setAmountOrPercent(Double amountOrPercent) {
    
    
    
    this.amountOrPercent = amountOrPercent;
  }


  public DirectDepositModel companyId(String companyId) {
    
    
    
    
    this.companyId = companyId;
    return this;
  }

   /**
   * Get companyId
   * @return companyId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCompanyId() {
    return companyId;
  }


  public void setCompanyId(String companyId) {
    
    
    
    this.companyId = companyId;
  }


  public DirectDepositModel directDepositOrPrenote(String directDepositOrPrenote) {
    
    
    
    
    this.directDepositOrPrenote = directDepositOrPrenote;
    return this;
  }

   /**
   * Get directDepositOrPrenote
   * @return directDepositOrPrenote
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDirectDepositOrPrenote() {
    return directDepositOrPrenote;
  }


  public void setDirectDepositOrPrenote(String directDepositOrPrenote) {
    
    
    
    this.directDepositOrPrenote = directDepositOrPrenote;
  }


  public DirectDepositModel depositRule(String depositRule) {
    
    
    
    
    this.depositRule = depositRule;
    return this;
  }

   /**
   * Get depositRule
   * @return depositRule
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getDepositRule() {
    return depositRule;
  }


  public void setDepositRule(String depositRule) {
    
    
    
    this.depositRule = depositRule;
  }


  public DirectDepositModel employeeBankId(String employeeBankId) {
    
    
    
    
    this.employeeBankId = employeeBankId;
    return this;
  }

   /**
   * Get employeeBankId
   * @return employeeBankId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeBankId() {
    return employeeBankId;
  }


  public void setEmployeeBankId(String employeeBankId) {
    
    
    
    this.employeeBankId = employeeBankId;
  }


  public DirectDepositModel employeeBankName(String employeeBankName) {
    
    
    
    
    this.employeeBankName = employeeBankName;
    return this;
  }

   /**
   * Get employeeBankName
   * @return employeeBankName
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeBankName() {
    return employeeBankName;
  }


  public void setEmployeeBankName(String employeeBankName) {
    
    
    
    this.employeeBankName = employeeBankName;
  }


  public DirectDepositModel employeeBankRoutingNumber(String employeeBankRoutingNumber) {
    
    
    
    
    this.employeeBankRoutingNumber = employeeBankRoutingNumber;
    return this;
  }

   /**
   * Get employeeBankRoutingNumber
   * @return employeeBankRoutingNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeBankRoutingNumber() {
    return employeeBankRoutingNumber;
  }


  public void setEmployeeBankRoutingNumber(String employeeBankRoutingNumber) {
    
    
    
    this.employeeBankRoutingNumber = employeeBankRoutingNumber;
  }


  public DirectDepositModel employeeId(String employeeId) {
    
    
    
    
    this.employeeId = employeeId;
    return this;
  }

   /**
   * Get employeeId
   * @return employeeId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeId() {
    return employeeId;
  }


  public void setEmployeeId(String employeeId) {
    
    
    
    this.employeeId = employeeId;
  }


  public DirectDepositModel firstPrenotePayDate(OffsetDateTime firstPrenotePayDate) {
    
    
    
    
    this.firstPrenotePayDate = firstPrenotePayDate;
    return this;
  }

   /**
   * Get firstPrenotePayDate
   * @return firstPrenotePayDate
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getFirstPrenotePayDate() {
    return firstPrenotePayDate;
  }


  public void setFirstPrenotePayDate(OffsetDateTime firstPrenotePayDate) {
    
    
    
    this.firstPrenotePayDate = firstPrenotePayDate;
  }


  public DirectDepositModel sequenceNumber(String sequenceNumber) {
    
    
    
    
    this.sequenceNumber = sequenceNumber;
    return this;
  }

   /**
   * Get sequenceNumber
   * @return sequenceNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getSequenceNumber() {
    return sequenceNumber;
  }


  public void setSequenceNumber(String sequenceNumber) {
    
    
    
    this.sequenceNumber = sequenceNumber;
  }


  public DirectDepositModel employeeInstitutionNumber(String employeeInstitutionNumber) {
    
    
    
    
    this.employeeInstitutionNumber = employeeInstitutionNumber;
    return this;
  }

   /**
   * Get employeeInstitutionNumber
   * @return employeeInstitutionNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getEmployeeInstitutionNumber() {
    return employeeInstitutionNumber;
  }


  public void setEmployeeInstitutionNumber(String employeeInstitutionNumber) {
    
    
    
    this.employeeInstitutionNumber = employeeInstitutionNumber;
  }


  public DirectDepositModel countryCode(String countryCode) {
    
    
    
    
    this.countryCode = countryCode;
    return this;
  }

   /**
   * Get countryCode
   * @return countryCode
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getCountryCode() {
    return countryCode;
  }


  public void setCountryCode(String countryCode) {
    
    
    
    this.countryCode = countryCode;
  }


  public DirectDepositModel foreignAccountNumber(String foreignAccountNumber) {
    
    
    
    
    this.foreignAccountNumber = foreignAccountNumber;
    return this;
  }

   /**
   * Get foreignAccountNumber
   * @return foreignAccountNumber
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getForeignAccountNumber() {
    return foreignAccountNumber;
  }


  public void setForeignAccountNumber(String foreignAccountNumber) {
    
    
    
    this.foreignAccountNumber = foreignAccountNumber;
  }


  public DirectDepositModel foreignAccountNumberType(String foreignAccountNumberType) {
    
    
    
    
    this.foreignAccountNumberType = foreignAccountNumberType;
    return this;
  }

   /**
   * Get foreignAccountNumberType
   * @return foreignAccountNumberType
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getForeignAccountNumberType() {
    return foreignAccountNumberType;
  }


  public void setForeignAccountNumberType(String foreignAccountNumberType) {
    
    
    
    this.foreignAccountNumberType = foreignAccountNumberType;
  }


  public DirectDepositModel accountRecordId(UUID accountRecordId) {
    
    
    
    
    this.accountRecordId = accountRecordId;
    return this;
  }

   /**
   * Get accountRecordId
   * @return accountRecordId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "00000000-0000-0000-0000-000000000000", value = "")

  public UUID getAccountRecordId() {
    return accountRecordId;
  }


  public void setAccountRecordId(UUID accountRecordId) {
    
    
    
    this.accountRecordId = accountRecordId;
  }


  public DirectDepositModel dateTimeChanged(OffsetDateTime dateTimeChanged) {
    
    
    
    
    this.dateTimeChanged = dateTimeChanged;
    return this;
  }

   /**
   * Get dateTimeChanged
   * @return dateTimeChanged
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public OffsetDateTime getDateTimeChanged() {
    return dateTimeChanged;
  }


  public void setDateTimeChanged(OffsetDateTime dateTimeChanged) {
    
    
    
    this.dateTimeChanged = dateTimeChanged;
  }


  public DirectDepositModel accountIsInactive(Boolean accountIsInactive) {
    
    
    
    
    this.accountIsInactive = accountIsInactive;
    return this;
  }

   /**
   * Get accountIsInactive
   * @return accountIsInactive
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public Boolean getAccountIsInactive() {
    return accountIsInactive;
  }


  public void setAccountIsInactive(Boolean accountIsInactive) {
    
    
    
    this.accountIsInactive = accountIsInactive;
  }

  /**
   * A container for additional, undeclared properties.
   * This is a holder for any undeclared properties as specified with
   * the 'additionalProperties' keyword in the OAS document.
   */
  private Map<String, Object> additionalProperties;

  /**
   * Set the additional (undeclared) property with the specified name and value.
   * If the property does not already exist, create it otherwise replace it.
   *
   * @param key name of the property
   * @param value value of the property
   * @return the DirectDepositModel instance itself
   */
  public DirectDepositModel putAdditionalProperty(String key, Object value) {
    if (this.additionalProperties == null) {
        this.additionalProperties = new HashMap<String, Object>();
    }
    this.additionalProperties.put(key, value);
    return this;
  }

  /**
   * Return the additional (undeclared) property.
   *
   * @return a map of objects
   */
  public Map<String, Object> getAdditionalProperties() {
    return additionalProperties;
  }

  /**
   * Return the additional (undeclared) property with the specified name.
   *
   * @param key name of the property
   * @return an object
   */
  public Object getAdditionalProperty(String key) {
    if (this.additionalProperties == null) {
        return null;
    }
    return this.additionalProperties.get(key);
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    DirectDepositModel directDepositModel = (DirectDepositModel) o;
    return Objects.equals(this.description, directDepositModel.description) &&
        Objects.equals(this.account, directDepositModel.account) &&
        Objects.equals(this.accountType, directDepositModel.accountType) &&
        Objects.equals(this.amountOrPercent, directDepositModel.amountOrPercent) &&
        Objects.equals(this.companyId, directDepositModel.companyId) &&
        Objects.equals(this.directDepositOrPrenote, directDepositModel.directDepositOrPrenote) &&
        Objects.equals(this.depositRule, directDepositModel.depositRule) &&
        Objects.equals(this.employeeBankId, directDepositModel.employeeBankId) &&
        Objects.equals(this.employeeBankName, directDepositModel.employeeBankName) &&
        Objects.equals(this.employeeBankRoutingNumber, directDepositModel.employeeBankRoutingNumber) &&
        Objects.equals(this.employeeId, directDepositModel.employeeId) &&
        Objects.equals(this.firstPrenotePayDate, directDepositModel.firstPrenotePayDate) &&
        Objects.equals(this.sequenceNumber, directDepositModel.sequenceNumber) &&
        Objects.equals(this.employeeInstitutionNumber, directDepositModel.employeeInstitutionNumber) &&
        Objects.equals(this.countryCode, directDepositModel.countryCode) &&
        Objects.equals(this.foreignAccountNumber, directDepositModel.foreignAccountNumber) &&
        Objects.equals(this.foreignAccountNumberType, directDepositModel.foreignAccountNumberType) &&
        Objects.equals(this.accountRecordId, directDepositModel.accountRecordId) &&
        Objects.equals(this.dateTimeChanged, directDepositModel.dateTimeChanged) &&
        Objects.equals(this.accountIsInactive, directDepositModel.accountIsInactive)&&
        Objects.equals(this.additionalProperties, directDepositModel.additionalProperties);
  }

  @Override
  public int hashCode() {
    return Objects.hash(description, account, accountType, amountOrPercent, companyId, directDepositOrPrenote, depositRule, employeeBankId, employeeBankName, employeeBankRoutingNumber, employeeId, firstPrenotePayDate, sequenceNumber, employeeInstitutionNumber, countryCode, foreignAccountNumber, foreignAccountNumberType, accountRecordId, dateTimeChanged, accountIsInactive, additionalProperties);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class DirectDepositModel {\n");
    sb.append("    description: ").append(toIndentedString(description)).append("\n");
    sb.append("    account: ").append(toIndentedString(account)).append("\n");
    sb.append("    accountType: ").append(toIndentedString(accountType)).append("\n");
    sb.append("    amountOrPercent: ").append(toIndentedString(amountOrPercent)).append("\n");
    sb.append("    companyId: ").append(toIndentedString(companyId)).append("\n");
    sb.append("    directDepositOrPrenote: ").append(toIndentedString(directDepositOrPrenote)).append("\n");
    sb.append("    depositRule: ").append(toIndentedString(depositRule)).append("\n");
    sb.append("    employeeBankId: ").append(toIndentedString(employeeBankId)).append("\n");
    sb.append("    employeeBankName: ").append(toIndentedString(employeeBankName)).append("\n");
    sb.append("    employeeBankRoutingNumber: ").append(toIndentedString(employeeBankRoutingNumber)).append("\n");
    sb.append("    employeeId: ").append(toIndentedString(employeeId)).append("\n");
    sb.append("    firstPrenotePayDate: ").append(toIndentedString(firstPrenotePayDate)).append("\n");
    sb.append("    sequenceNumber: ").append(toIndentedString(sequenceNumber)).append("\n");
    sb.append("    employeeInstitutionNumber: ").append(toIndentedString(employeeInstitutionNumber)).append("\n");
    sb.append("    countryCode: ").append(toIndentedString(countryCode)).append("\n");
    sb.append("    foreignAccountNumber: ").append(toIndentedString(foreignAccountNumber)).append("\n");
    sb.append("    foreignAccountNumberType: ").append(toIndentedString(foreignAccountNumberType)).append("\n");
    sb.append("    accountRecordId: ").append(toIndentedString(accountRecordId)).append("\n");
    sb.append("    dateTimeChanged: ").append(toIndentedString(dateTimeChanged)).append("\n");
    sb.append("    accountIsInactive: ").append(toIndentedString(accountIsInactive)).append("\n");
    sb.append("    additionalProperties: ").append(toIndentedString(additionalProperties)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }


  public static HashSet<String> openapiFields;
  public static HashSet<String> openapiRequiredFields;

  static {
    // a set of all properties/fields (JSON key names)
    openapiFields = new HashSet<String>();
    openapiFields.add("description");
    openapiFields.add("account");
    openapiFields.add("accountType");
    openapiFields.add("amountOrPercent");
    openapiFields.add("companyId");
    openapiFields.add("directDepositOrPrenote");
    openapiFields.add("depositRule");
    openapiFields.add("employeeBankId");
    openapiFields.add("employeeBankName");
    openapiFields.add("employeeBankRoutingNumber");
    openapiFields.add("employeeId");
    openapiFields.add("firstPrenotePayDate");
    openapiFields.add("sequenceNumber");
    openapiFields.add("employeeInstitutionNumber");
    openapiFields.add("countryCode");
    openapiFields.add("foreignAccountNumber");
    openapiFields.add("foreignAccountNumberType");
    openapiFields.add("accountRecordId");
    openapiFields.add("dateTimeChanged");
    openapiFields.add("accountIsInactive");

    // a set of required properties/fields (JSON key names)
    openapiRequiredFields = new HashSet<String>();
  }

 /**
  * Validates the JSON Object and throws an exception if issues found
  *
  * @param jsonObj JSON Object
  * @throws IOException if the JSON Object is invalid with respect to DirectDepositModel
  */
  public static void validateJsonObject(JsonObject jsonObj) throws IOException {
      if (jsonObj == null) {
        if (!DirectDepositModel.openapiRequiredFields.isEmpty()) { // has required fields but JSON object is null
          throw new IllegalArgumentException(String.format("The required field(s) %s in DirectDepositModel is not found in the empty JSON string", DirectDepositModel.openapiRequiredFields.toString()));
        }
      }
      if ((jsonObj.get("description") != null && !jsonObj.get("description").isJsonNull()) && !jsonObj.get("description").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `description` to be a primitive type in the JSON string but got `%s`", jsonObj.get("description").toString()));
      }
      if ((jsonObj.get("account") != null && !jsonObj.get("account").isJsonNull()) && !jsonObj.get("account").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `account` to be a primitive type in the JSON string but got `%s`", jsonObj.get("account").toString()));
      }
      if ((jsonObj.get("accountType") != null && !jsonObj.get("accountType").isJsonNull()) && !jsonObj.get("accountType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountType").toString()));
      }
      if ((jsonObj.get("companyId") != null && !jsonObj.get("companyId").isJsonNull()) && !jsonObj.get("companyId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `companyId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("companyId").toString()));
      }
      if ((jsonObj.get("directDepositOrPrenote") != null && !jsonObj.get("directDepositOrPrenote").isJsonNull()) && !jsonObj.get("directDepositOrPrenote").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `directDepositOrPrenote` to be a primitive type in the JSON string but got `%s`", jsonObj.get("directDepositOrPrenote").toString()));
      }
      if ((jsonObj.get("depositRule") != null && !jsonObj.get("depositRule").isJsonNull()) && !jsonObj.get("depositRule").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `depositRule` to be a primitive type in the JSON string but got `%s`", jsonObj.get("depositRule").toString()));
      }
      if ((jsonObj.get("employeeBankId") != null && !jsonObj.get("employeeBankId").isJsonNull()) && !jsonObj.get("employeeBankId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeBankId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeBankId").toString()));
      }
      if ((jsonObj.get("employeeBankName") != null && !jsonObj.get("employeeBankName").isJsonNull()) && !jsonObj.get("employeeBankName").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeBankName` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeBankName").toString()));
      }
      if ((jsonObj.get("employeeBankRoutingNumber") != null && !jsonObj.get("employeeBankRoutingNumber").isJsonNull()) && !jsonObj.get("employeeBankRoutingNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeBankRoutingNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeBankRoutingNumber").toString()));
      }
      if ((jsonObj.get("employeeId") != null && !jsonObj.get("employeeId").isJsonNull()) && !jsonObj.get("employeeId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeId").toString()));
      }
      if ((jsonObj.get("sequenceNumber") != null && !jsonObj.get("sequenceNumber").isJsonNull()) && !jsonObj.get("sequenceNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `sequenceNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("sequenceNumber").toString()));
      }
      if ((jsonObj.get("employeeInstitutionNumber") != null && !jsonObj.get("employeeInstitutionNumber").isJsonNull()) && !jsonObj.get("employeeInstitutionNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `employeeInstitutionNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("employeeInstitutionNumber").toString()));
      }
      if ((jsonObj.get("countryCode") != null && !jsonObj.get("countryCode").isJsonNull()) && !jsonObj.get("countryCode").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `countryCode` to be a primitive type in the JSON string but got `%s`", jsonObj.get("countryCode").toString()));
      }
      if ((jsonObj.get("foreignAccountNumber") != null && !jsonObj.get("foreignAccountNumber").isJsonNull()) && !jsonObj.get("foreignAccountNumber").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignAccountNumber` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignAccountNumber").toString()));
      }
      if ((jsonObj.get("foreignAccountNumberType") != null && !jsonObj.get("foreignAccountNumberType").isJsonNull()) && !jsonObj.get("foreignAccountNumberType").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `foreignAccountNumberType` to be a primitive type in the JSON string but got `%s`", jsonObj.get("foreignAccountNumberType").toString()));
      }
      if ((jsonObj.get("accountRecordId") != null && !jsonObj.get("accountRecordId").isJsonNull()) && !jsonObj.get("accountRecordId").isJsonPrimitive()) {
        throw new IllegalArgumentException(String.format("Expected the field `accountRecordId` to be a primitive type in the JSON string but got `%s`", jsonObj.get("accountRecordId").toString()));
      }
  }

  public static class CustomTypeAdapterFactory implements TypeAdapterFactory {
    @SuppressWarnings("unchecked")
    @Override
    public <T> TypeAdapter<T> create(Gson gson, TypeToken<T> type) {
       if (!DirectDepositModel.class.isAssignableFrom(type.getRawType())) {
         return null; // this class only serializes 'DirectDepositModel' and its subtypes
       }
       final TypeAdapter<JsonElement> elementAdapter = gson.getAdapter(JsonElement.class);
       final TypeAdapter<DirectDepositModel> thisAdapter
                        = gson.getDelegateAdapter(this, TypeToken.get(DirectDepositModel.class));

       return (TypeAdapter<T>) new TypeAdapter<DirectDepositModel>() {
           @Override
           public void write(JsonWriter out, DirectDepositModel value) throws IOException {
             JsonObject obj = thisAdapter.toJsonTree(value).getAsJsonObject();
             obj.remove("additionalProperties");
             // serialize additonal properties
             if (value.getAdditionalProperties() != null) {
               for (Map.Entry<String, Object> entry : value.getAdditionalProperties().entrySet()) {
                 if (entry.getValue() instanceof String)
                   obj.addProperty(entry.getKey(), (String) entry.getValue());
                 else if (entry.getValue() instanceof Number)
                   obj.addProperty(entry.getKey(), (Number) entry.getValue());
                 else if (entry.getValue() instanceof Boolean)
                   obj.addProperty(entry.getKey(), (Boolean) entry.getValue());
                 else if (entry.getValue() instanceof Character)
                   obj.addProperty(entry.getKey(), (Character) entry.getValue());
                 else {
                   obj.add(entry.getKey(), gson.toJsonTree(entry.getValue()).getAsJsonObject());
                 }
               }
             }
             elementAdapter.write(out, obj);
           }

           @Override
           public DirectDepositModel read(JsonReader in) throws IOException {
             JsonObject jsonObj = elementAdapter.read(in).getAsJsonObject();
             validateJsonObject(jsonObj);
             // store additional fields in the deserialized instance
             DirectDepositModel instance = thisAdapter.fromJsonTree(jsonObj);
             for (Map.Entry<String, JsonElement> entry : jsonObj.entrySet()) {
               if (!openapiFields.contains(entry.getKey())) {
                 if (entry.getValue().isJsonPrimitive()) { // primitive type
                   if (entry.getValue().getAsJsonPrimitive().isString())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsString());
                   else if (entry.getValue().getAsJsonPrimitive().isNumber())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsNumber());
                   else if (entry.getValue().getAsJsonPrimitive().isBoolean())
                     instance.putAdditionalProperty(entry.getKey(), entry.getValue().getAsBoolean());
                   else
                     throw new IllegalArgumentException(String.format("The field `%s` has unknown primitive type. Value: %s", entry.getKey(), entry.getValue().toString()));
                 } else if (entry.getValue().isJsonArray()) {
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), List.class));
                 } else { // JSON object
                     instance.putAdditionalProperty(entry.getKey(), gson.fromJson(entry.getValue(), HashMap.class));
                 }
               }
             }
             return instance;
           }

       }.nullSafe();
    }
  }

 /**
  * Create an instance of DirectDepositModel given an JSON string
  *
  * @param jsonString JSON string
  * @return An instance of DirectDepositModel
  * @throws IOException if the JSON string is invalid with respect to DirectDepositModel
  */
  public static DirectDepositModel fromJson(String jsonString) throws IOException {
    return JSON.getGson().fromJson(jsonString, DirectDepositModel.class);
  }

 /**
  * Convert an instance of DirectDepositModel to an JSON string
  *
  * @return JSON string
  */
  public String toJson() {
    return JSON.getGson().toJson(this);
  }
}

