/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.GeneralLedgerRunDetailsV2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class GeneralLedgerRunDetailsV2ApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public GeneralLedgerRunDetailsV2ApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public GeneralLedgerRunDetailsV2ApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(String runId, String blockId, String mostRecent, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/v2/general-ledger";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runId", runId));
        }

        if (blockId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockId", blockId));
        }

        if (mostRecent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mostRecent", mostRecent));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String runId, String blockId, String mostRecent, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getCall(runId, blockId, mostRecent, page, perPage, _callback);

    }


    private ApiResponse<List<GeneralLedgerRunDetailsV2>> getWithHttpInfo(String runId, String blockId, String mostRecent, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(runId, blockId, mostRecent, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<GeneralLedgerRunDetailsV2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String runId, String blockId, String mostRecent, Integer page, Integer perPage, final ApiCallback<List<GeneralLedgerRunDetailsV2>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(runId, blockId, mostRecent, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<GeneralLedgerRunDetailsV2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private String runId;
        private String blockId;
        private String mostRecent;
        private Integer page;
        private Integer perPage;

        private GetRequestBuilder() {
        }

        /**
         * Set runId
         * @param runId  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder runId(String runId) {
            this.runId = runId;
            return this;
        }
        
        /**
         * Set blockId
         * @param blockId  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder blockId(String blockId) {
            this.blockId = blockId;
            return this;
        }
        
        /**
         * Set mostRecent
         * @param mostRecent  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder mostRecent(String mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(runId, blockId, mostRecent, page, perPage, _callback);
        }


        /**
         * Execute get request
         * @return List&lt;GeneralLedgerRunDetailsV2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public List<GeneralLedgerRunDetailsV2> execute() throws ApiException {
            ApiResponse<List<GeneralLedgerRunDetailsV2>> localVarResp = getWithHttpInfo(runId, blockId, mostRecent, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;List&lt;GeneralLedgerRunDetailsV2&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<GeneralLedgerRunDetailsV2>> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(runId, blockId, mostRecent, page, perPage);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<GeneralLedgerRunDetailsV2>> _callback) throws ApiException {
            return getAsync(runId, blockId, mostRecent, page, perPage, _callback);
        }
    }

    /**
     * Returns a list of details for a general ledger run, filterable by runId and blockId
     * 
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get() throws IllegalArgumentException {
        return new GetRequestBuilder();
    }
    private okhttp3.Call getByRunIdCall(String runId, String runId2, String blockId, String mostRecent, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/v2/general-ledger/{runId}"
            .replace("{" + "runId" + "}", localVarApiClient.escapeString(runId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (runId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("runId", runId2));
        }

        if (blockId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("blockId", blockId));
        }

        if (mostRecent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("mostRecent", mostRecent));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByRunIdValidateBeforeCall(String runId, String runId2, String blockId, String mostRecent, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'runId' is set
        if (runId == null) {
            throw new ApiException("Missing the required parameter 'runId' when calling getByRunId(Async)");
        }

        return getByRunIdCall(runId, runId2, blockId, mostRecent, page, perPage, _callback);

    }


    private ApiResponse<List<GeneralLedgerRunDetailsV2>> getByRunIdWithHttpInfo(String runId, String runId2, String blockId, String mostRecent, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getByRunIdValidateBeforeCall(runId, runId2, blockId, mostRecent, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<GeneralLedgerRunDetailsV2>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByRunIdAsync(String runId, String runId2, String blockId, String mostRecent, Integer page, Integer perPage, final ApiCallback<List<GeneralLedgerRunDetailsV2>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByRunIdValidateBeforeCall(runId, runId2, blockId, mostRecent, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<GeneralLedgerRunDetailsV2>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByRunIdRequestBuilder {
        private final String runId;
        private String runId2;
        private String blockId;
        private String mostRecent;
        private Integer page;
        private Integer perPage;

        private GetByRunIdRequestBuilder(String runId) {
            this.runId = runId;
        }

        /**
         * Set runId2
         * @param runId2  (optional)
         * @return GetByRunIdRequestBuilder
         */
        public GetByRunIdRequestBuilder runId2(String runId2) {
            this.runId2 = runId2;
            return this;
        }
        
        /**
         * Set blockId
         * @param blockId  (optional)
         * @return GetByRunIdRequestBuilder
         */
        public GetByRunIdRequestBuilder blockId(String blockId) {
            this.blockId = blockId;
            return this;
        }
        
        /**
         * Set mostRecent
         * @param mostRecent  (optional)
         * @return GetByRunIdRequestBuilder
         */
        public GetByRunIdRequestBuilder mostRecent(String mostRecent) {
            this.mostRecent = mostRecent;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetByRunIdRequestBuilder
         */
        public GetByRunIdRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetByRunIdRequestBuilder
         */
        public GetByRunIdRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getByRunId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByRunIdCall(runId, runId2, blockId, mostRecent, page, perPage, _callback);
        }


        /**
         * Execute getByRunId request
         * @return List&lt;GeneralLedgerRunDetailsV2&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public List<GeneralLedgerRunDetailsV2> execute() throws ApiException {
            ApiResponse<List<GeneralLedgerRunDetailsV2>> localVarResp = getByRunIdWithHttpInfo(runId, runId2, blockId, mostRecent, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByRunId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;GeneralLedgerRunDetailsV2&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<GeneralLedgerRunDetailsV2>> executeWithHttpInfo() throws ApiException {
            return getByRunIdWithHttpInfo(runId, runId2, blockId, mostRecent, page, perPage);
        }

        /**
         * Execute getByRunId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<GeneralLedgerRunDetailsV2>> _callback) throws ApiException {
            return getByRunIdAsync(runId, runId2, blockId, mostRecent, page, perPage, _callback);
        }
    }

    /**
     * Returns a list of details for a general ledger run, filterable by runId and blockId
     * 
     * @param runId  (required)
     * @return GetByRunIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetByRunIdRequestBuilder getByRunId(String runId) throws IllegalArgumentException {
        if (runId == null) throw new IllegalArgumentException("\"runId\" is required but got null");
            

        return new GetByRunIdRequestBuilder(runId);
    }
}
