/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.NewHiresCreateSingleNewHire201Response;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireRequest;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireRequestCompensation;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireRequestContactInformation;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireRequestJob;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireRequestMentor;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireRequestOrganizationLevelsInner;
import com.konfigthis.client.model.NewHiresCreateSingleNewHireResponse;
import com.konfigthis.client.model.NewHiresGetById200Response;
import com.konfigthis.client.model.NewHiresGetByIdResponse;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class NewHiresApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public NewHiresApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public NewHiresApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call createSingleNewHireCall(String tenantIdentifier, NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = newHiresCreateSingleNewHireRequest;

        // create path and map variables
        String localVarPath = "/tenants/{tenantIdentifier}/new-hires"
            .replace("{" + "tenantIdentifier" + "}", localVarApiClient.escapeString(tenantIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createSingleNewHireValidateBeforeCall(String tenantIdentifier, NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantIdentifier' is set
        if (tenantIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tenantIdentifier' when calling createSingleNewHire(Async)");
        }

        // verify the required parameter 'newHiresCreateSingleNewHireRequest' is set
        if (newHiresCreateSingleNewHireRequest == null) {
            throw new ApiException("Missing the required parameter 'newHiresCreateSingleNewHireRequest' when calling createSingleNewHire(Async)");
        }

        return createSingleNewHireCall(tenantIdentifier, newHiresCreateSingleNewHireRequest, _callback);

    }


    private ApiResponse<NewHiresCreateSingleNewHireResponse> createSingleNewHireWithHttpInfo(String tenantIdentifier, NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest) throws ApiException {
        okhttp3.Call localVarCall = createSingleNewHireValidateBeforeCall(tenantIdentifier, newHiresCreateSingleNewHireRequest, null);
        Type localVarReturnType = new TypeToken<NewHiresCreateSingleNewHireResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call createSingleNewHireAsync(String tenantIdentifier, NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest, final ApiCallback<NewHiresCreateSingleNewHireResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createSingleNewHireValidateBeforeCall(tenantIdentifier, newHiresCreateSingleNewHireRequest, _callback);
        Type localVarReturnType = new TypeToken<NewHiresCreateSingleNewHireResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class CreateSingleNewHireRequestBuilder {
        private final String tenantIdentifier;
        private NewHiresCreateSingleNewHireRequestContactInformation contactInformation;
        private NewHiresCreateSingleNewHireRequestJob job;
        private List<NewHiresCreateSingleNewHireRequestOrganizationLevelsInner> organizationLevels;
        private NewHiresCreateSingleNewHireRequestCompensation compensation;
        private String onboardingOwnerId;
        private OffsetDateTime hireDate;
        private OffsetDateTime orientationDate;
        private OffsetDateTime startDate;
        private String pastStartDateReason;
        private NewHiresCreateSingleNewHireRequestMentor mentor;
        private String personalMessage;

        private CreateSingleNewHireRequestBuilder(String tenantIdentifier) {
            this.tenantIdentifier = tenantIdentifier;
        }

        /**
         * Set contactInformation
         * @param contactInformation  (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder contactInformation(NewHiresCreateSingleNewHireRequestContactInformation contactInformation) {
            this.contactInformation = contactInformation;
            return this;
        }
        
        /**
         * Set job
         * @param job  (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder job(NewHiresCreateSingleNewHireRequestJob job) {
            this.job = job;
            return this;
        }
        
        /**
         * Set organizationLevels
         * @param organizationLevels  (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder organizationLevels(List<NewHiresCreateSingleNewHireRequestOrganizationLevelsInner> organizationLevels) {
            this.organizationLevels = organizationLevels;
            return this;
        }
        
        /**
         * Set compensation
         * @param compensation  (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder compensation(NewHiresCreateSingleNewHireRequestCompensation compensation) {
            this.compensation = compensation;
            return this;
        }
        
        /**
         * Set onboardingOwnerId
         * @param onboardingOwnerId External user identifier of the onboarding owner (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder onboardingOwnerId(String onboardingOwnerId) {
            this.onboardingOwnerId = onboardingOwnerId;
            return this;
        }
        
        /**
         * Set hireDate
         * @param hireDate Hire date of the new hire (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder hireDate(OffsetDateTime hireDate) {
            this.hireDate = hireDate;
            return this;
        }
        
        /**
         * Set orientationDate
         * @param orientationDate Orientation date of the new hire (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder orientationDate(OffsetDateTime orientationDate) {
            this.orientationDate = orientationDate;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate Start date of the new hire (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set pastStartDateReason
         * @param pastStartDateReason Reason why the new hire start date is 4 or more business days in the past (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder pastStartDateReason(String pastStartDateReason) {
            this.pastStartDateReason = pastStartDateReason;
            return this;
        }
        
        /**
         * Set mentor
         * @param mentor  (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder mentor(NewHiresCreateSingleNewHireRequestMentor mentor) {
            this.mentor = mentor;
            return this;
        }
        
        /**
         * Set personalMessage
         * @param personalMessage Personal message for the new hire (optional)
         * @return CreateSingleNewHireRequestBuilder
         */
        public CreateSingleNewHireRequestBuilder personalMessage(String personalMessage) {
            this.personalMessage = personalMessage;
            return this;
        }
        
        /**
         * Build call for createSingleNewHire
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> New Hire created </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest = buildBodyParams();
            return createSingleNewHireCall(tenantIdentifier, newHiresCreateSingleNewHireRequest, _callback);
        }

        private NewHiresCreateSingleNewHireRequest buildBodyParams() {
            NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest = new NewHiresCreateSingleNewHireRequest();
            newHiresCreateSingleNewHireRequest.contactInformation(this.contactInformation);
            newHiresCreateSingleNewHireRequest.job(this.job);
            newHiresCreateSingleNewHireRequest.organizationLevels(this.organizationLevels);
            newHiresCreateSingleNewHireRequest.compensation(this.compensation);
            newHiresCreateSingleNewHireRequest.onboardingOwnerId(this.onboardingOwnerId);
            newHiresCreateSingleNewHireRequest.hireDate(this.hireDate);
            newHiresCreateSingleNewHireRequest.orientationDate(this.orientationDate);
            newHiresCreateSingleNewHireRequest.startDate(this.startDate);
            newHiresCreateSingleNewHireRequest.pastStartDateReason(this.pastStartDateReason);
            newHiresCreateSingleNewHireRequest.mentor(this.mentor);
            newHiresCreateSingleNewHireRequest.personalMessage(this.personalMessage);
            return newHiresCreateSingleNewHireRequest;
        }

        /**
         * Execute createSingleNewHire request
         * @return NewHiresCreateSingleNewHireResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> New Hire created </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public NewHiresCreateSingleNewHireResponse execute() throws ApiException {
            NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest = buildBodyParams();
            ApiResponse<NewHiresCreateSingleNewHireResponse> localVarResp = createSingleNewHireWithHttpInfo(tenantIdentifier, newHiresCreateSingleNewHireRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute createSingleNewHire request with HTTP info returned
         * @return ApiResponse&lt;NewHiresCreateSingleNewHireResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> New Hire created </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public ApiResponse<NewHiresCreateSingleNewHireResponse> executeWithHttpInfo() throws ApiException {
            NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest = buildBodyParams();
            return createSingleNewHireWithHttpInfo(tenantIdentifier, newHiresCreateSingleNewHireRequest);
        }

        /**
         * Execute createSingleNewHire request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> New Hire created </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NewHiresCreateSingleNewHireResponse> _callback) throws ApiException {
            NewHiresCreateSingleNewHireRequest newHiresCreateSingleNewHireRequest = buildBodyParams();
            return createSingleNewHireAsync(tenantIdentifier, newHiresCreateSingleNewHireRequest, _callback);
        }
    }

    /**
     * Creates a single New Hire
     * Creates a single New Hire
     * @param tenantIdentifier Unique identifier of the tenant to interact with. Can be either the tenant alias or tenant ID. (required)
     * @param newHiresCreateSingleNewHireRequest New Hire object to be added (required)
     * @return CreateSingleNewHireRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> New Hire created </td><td>  * Location - Location of resource <br>  </td></tr>
     </table>
     */
    public CreateSingleNewHireRequestBuilder createSingleNewHire(String tenantIdentifier) throws IllegalArgumentException {
        if (tenantIdentifier == null) throw new IllegalArgumentException("\"tenantIdentifier\" is required but got null");
            

        return new CreateSingleNewHireRequestBuilder(tenantIdentifier);
    }
    private okhttp3.Call getByIdCall(String tenantIdentifier, String id, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/tenants/{tenantIdentifier}/new-hires/{id}"
            .replace("{" + "tenantIdentifier" + "}", localVarApiClient.escapeString(tenantIdentifier.toString()))
            .replace("{" + "id" + "}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByIdValidateBeforeCall(String tenantIdentifier, String id, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantIdentifier' is set
        if (tenantIdentifier == null) {
            throw new ApiException("Missing the required parameter 'tenantIdentifier' when calling getById(Async)");
        }

        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling getById(Async)");
        }

        return getByIdCall(tenantIdentifier, id, _callback);

    }


    private ApiResponse<NewHiresGetByIdResponse> getByIdWithHttpInfo(String tenantIdentifier, String id) throws ApiException {
        okhttp3.Call localVarCall = getByIdValidateBeforeCall(tenantIdentifier, id, null);
        Type localVarReturnType = new TypeToken<NewHiresGetByIdResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByIdAsync(String tenantIdentifier, String id, final ApiCallback<NewHiresGetByIdResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByIdValidateBeforeCall(tenantIdentifier, id, _callback);
        Type localVarReturnType = new TypeToken<NewHiresGetByIdResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByIdRequestBuilder {
        private final String tenantIdentifier;
        private final String id;

        private GetByIdRequestBuilder(String tenantIdentifier, String id) {
            this.tenantIdentifier = tenantIdentifier;
            this.id = id;
        }

        /**
         * Build call for getById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> New Hire retrieved </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByIdCall(tenantIdentifier, id, _callback);
        }


        /**
         * Execute getById request
         * @return NewHiresGetByIdResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> New Hire retrieved </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public NewHiresGetByIdResponse execute() throws ApiException {
            ApiResponse<NewHiresGetByIdResponse> localVarResp = getByIdWithHttpInfo(tenantIdentifier, id);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getById request with HTTP info returned
         * @return ApiResponse&lt;NewHiresGetByIdResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> New Hire retrieved </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public ApiResponse<NewHiresGetByIdResponse> executeWithHttpInfo() throws ApiException {
            return getByIdWithHttpInfo(tenantIdentifier, id);
        }

        /**
         * Execute getById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> New Hire retrieved </td><td>  * Location - Location of resource <br>  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<NewHiresGetByIdResponse> _callback) throws ApiException {
            return getByIdAsync(tenantIdentifier, id, _callback);
        }
    }

    /**
     * Gets a single New Hire by Id
     * Gets a single New Hire by Id
     * @param tenantIdentifier Unique identifier of the tenant to interact with. Can be either the tenant alias or tenant ID. (required)
     * @param id Unique identifier for the New Hire (required)
     * @return GetByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> New Hire retrieved </td><td>  * Location - Location of resource <br>  </td></tr>
     </table>
     */
    public GetByIdRequestBuilder getById(String tenantIdentifier, String id) throws IllegalArgumentException {
        if (tenantIdentifier == null) throw new IllegalArgumentException("\"tenantIdentifier\" is required but got null");
            

        if (id == null) throw new IllegalArgumentException("\"id\" is required but got null");
            

        return new GetByIdRequestBuilder(tenantIdentifier, id);
    }
}
