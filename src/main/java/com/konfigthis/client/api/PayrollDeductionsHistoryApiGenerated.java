/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.PayrollDeductionsHistory;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PayrollDeductionsHistoryApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PayrollDeductionsHistoryApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PayrollDeductionsHistoryApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(String employeeId, String companyId, String checkId, String employeeNumber, String deductionCode, String deductionType, String benefitOption, String benefitProvider, String payGroup, String periodControl, OffsetDateTime payDate, String is401K, String is403B, String is408K, String is408P, String is457, String is457B, String is457F, String is501C, String isD125, String isDeductionOffSet, String isDeferredCompensation, String isDependentCare, String isHousing, String isNonQualifiedPlan, String startPerControl, String endPerControl, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/v1/payroll-deductions-history";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (checkId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("checkId", checkId));
        }

        if (employeeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumber", employeeNumber));
        }

        if (deductionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deductionCode", deductionCode));
        }

        if (deductionType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deductionType", deductionType));
        }

        if (benefitOption != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("benefitOption", benefitOption));
        }

        if (benefitProvider != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("benefitProvider", benefitProvider));
        }

        if (payGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroup", payGroup));
        }

        if (periodControl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("periodControl", periodControl));
        }

        if (payDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payDate", payDate));
        }

        if (is401K != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is401K", is401K));
        }

        if (is403B != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is403B", is403B));
        }

        if (is408K != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is408K", is408K));
        }

        if (is408P != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is408P", is408P));
        }

        if (is457 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is457", is457));
        }

        if (is457B != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is457B", is457B));
        }

        if (is457F != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is457F", is457F));
        }

        if (is501C != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("is501C", is501C));
        }

        if (isD125 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isD125", isD125));
        }

        if (isDeductionOffSet != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDeductionOffSet", isDeductionOffSet));
        }

        if (isDeferredCompensation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDeferredCompensation", isDeferredCompensation));
        }

        if (isDependentCare != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDependentCare", isDependentCare));
        }

        if (isHousing != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHousing", isHousing));
        }

        if (isNonQualifiedPlan != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isNonQualifiedPlan", isNonQualifiedPlan));
        }

        if (startPerControl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("startPerControl", startPerControl));
        }

        if (endPerControl != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("endPerControl", endPerControl));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String employeeId, String companyId, String checkId, String employeeNumber, String deductionCode, String deductionType, String benefitOption, String benefitProvider, String payGroup, String periodControl, OffsetDateTime payDate, String is401K, String is403B, String is408K, String is408P, String is457, String is457B, String is457F, String is501C, String isD125, String isDeductionOffSet, String isDeferredCompensation, String isDependentCare, String isHousing, String isNonQualifiedPlan, String startPerControl, String endPerControl, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getCall(employeeId, companyId, checkId, employeeNumber, deductionCode, deductionType, benefitOption, benefitProvider, payGroup, periodControl, payDate, is401K, is403B, is408K, is408P, is457, is457B, is457F, is501C, isD125, isDeductionOffSet, isDeferredCompensation, isDependentCare, isHousing, isNonQualifiedPlan, startPerControl, endPerControl, page, perPage, _callback);

    }


    private ApiResponse<List<PayrollDeductionsHistory>> getWithHttpInfo(String employeeId, String companyId, String checkId, String employeeNumber, String deductionCode, String deductionType, String benefitOption, String benefitProvider, String payGroup, String periodControl, OffsetDateTime payDate, String is401K, String is403B, String is408K, String is408P, String is457, String is457B, String is457F, String is501C, String isD125, String isDeductionOffSet, String isDeferredCompensation, String isDependentCare, String isHousing, String isNonQualifiedPlan, String startPerControl, String endPerControl, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(employeeId, companyId, checkId, employeeNumber, deductionCode, deductionType, benefitOption, benefitProvider, payGroup, periodControl, payDate, is401K, is403B, is408K, is408P, is457, is457B, is457F, is501C, isD125, isDeductionOffSet, isDeferredCompensation, isDependentCare, isHousing, isNonQualifiedPlan, startPerControl, endPerControl, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<PayrollDeductionsHistory>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String employeeId, String companyId, String checkId, String employeeNumber, String deductionCode, String deductionType, String benefitOption, String benefitProvider, String payGroup, String periodControl, OffsetDateTime payDate, String is401K, String is403B, String is408K, String is408P, String is457, String is457B, String is457F, String is501C, String isD125, String isDeductionOffSet, String isDeferredCompensation, String isDependentCare, String isHousing, String isNonQualifiedPlan, String startPerControl, String endPerControl, Integer page, Integer perPage, final ApiCallback<List<PayrollDeductionsHistory>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(employeeId, companyId, checkId, employeeNumber, deductionCode, deductionType, benefitOption, benefitProvider, payGroup, periodControl, payDate, is401K, is403B, is408K, is408P, is457, is457B, is457F, is501C, isD125, isDeductionOffSet, isDeferredCompensation, isDependentCare, isHousing, isNonQualifiedPlan, startPerControl, endPerControl, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<PayrollDeductionsHistory>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private String employeeId;
        private String companyId;
        private String checkId;
        private String employeeNumber;
        private String deductionCode;
        private String deductionType;
        private String benefitOption;
        private String benefitProvider;
        private String payGroup;
        private String periodControl;
        private OffsetDateTime payDate;
        private String is401K;
        private String is403B;
        private String is408K;
        private String is408P;
        private String is457;
        private String is457B;
        private String is457F;
        private String is501C;
        private String isD125;
        private String isDeductionOffSet;
        private String isDeferredCompensation;
        private String isDependentCare;
        private String isHousing;
        private String isNonQualifiedPlan;
        private String startPerControl;
        private String endPerControl;
        private Integer page;
        private Integer perPage;

        private GetRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set companyId
         * @param companyId  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set checkId
         * @param checkId  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder checkId(String checkId) {
            this.checkId = checkId;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set deductionCode
         * @param deductionCode  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder deductionCode(String deductionCode) {
            this.deductionCode = deductionCode;
            return this;
        }
        
        /**
         * Set deductionType
         * @param deductionType  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder deductionType(String deductionType) {
            this.deductionType = deductionType;
            return this;
        }
        
        /**
         * Set benefitOption
         * @param benefitOption  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder benefitOption(String benefitOption) {
            this.benefitOption = benefitOption;
            return this;
        }
        
        /**
         * Set benefitProvider
         * @param benefitProvider  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder benefitProvider(String benefitProvider) {
            this.benefitProvider = benefitProvider;
            return this;
        }
        
        /**
         * Set payGroup
         * @param payGroup  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder payGroup(String payGroup) {
            this.payGroup = payGroup;
            return this;
        }
        
        /**
         * Set periodControl
         * @param periodControl  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder periodControl(String periodControl) {
            this.periodControl = periodControl;
            return this;
        }
        
        /**
         * Set payDate
         * @param payDate  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder payDate(OffsetDateTime payDate) {
            this.payDate = payDate;
            return this;
        }
        
        /**
         * Set is401K
         * @param is401K  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is401K(String is401K) {
            this.is401K = is401K;
            return this;
        }
        
        /**
         * Set is403B
         * @param is403B  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is403B(String is403B) {
            this.is403B = is403B;
            return this;
        }
        
        /**
         * Set is408K
         * @param is408K  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is408K(String is408K) {
            this.is408K = is408K;
            return this;
        }
        
        /**
         * Set is408P
         * @param is408P  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is408P(String is408P) {
            this.is408P = is408P;
            return this;
        }
        
        /**
         * Set is457
         * @param is457  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is457(String is457) {
            this.is457 = is457;
            return this;
        }
        
        /**
         * Set is457B
         * @param is457B  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is457B(String is457B) {
            this.is457B = is457B;
            return this;
        }
        
        /**
         * Set is457F
         * @param is457F  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is457F(String is457F) {
            this.is457F = is457F;
            return this;
        }
        
        /**
         * Set is501C
         * @param is501C  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder is501C(String is501C) {
            this.is501C = is501C;
            return this;
        }
        
        /**
         * Set isD125
         * @param isD125  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isD125(String isD125) {
            this.isD125 = isD125;
            return this;
        }
        
        /**
         * Set isDeductionOffSet
         * @param isDeductionOffSet  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isDeductionOffSet(String isDeductionOffSet) {
            this.isDeductionOffSet = isDeductionOffSet;
            return this;
        }
        
        /**
         * Set isDeferredCompensation
         * @param isDeferredCompensation  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isDeferredCompensation(String isDeferredCompensation) {
            this.isDeferredCompensation = isDeferredCompensation;
            return this;
        }
        
        /**
         * Set isDependentCare
         * @param isDependentCare  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isDependentCare(String isDependentCare) {
            this.isDependentCare = isDependentCare;
            return this;
        }
        
        /**
         * Set isHousing
         * @param isHousing  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isHousing(String isHousing) {
            this.isHousing = isHousing;
            return this;
        }
        
        /**
         * Set isNonQualifiedPlan
         * @param isNonQualifiedPlan  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder isNonQualifiedPlan(String isNonQualifiedPlan) {
            this.isNonQualifiedPlan = isNonQualifiedPlan;
            return this;
        }
        
        /**
         * Set startPerControl
         * @param startPerControl  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder startPerControl(String startPerControl) {
            this.startPerControl = startPerControl;
            return this;
        }
        
        /**
         * Set endPerControl
         * @param endPerControl  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder endPerControl(String endPerControl) {
            this.endPerControl = endPerControl;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetRequestBuilder
         */
        public GetRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(employeeId, companyId, checkId, employeeNumber, deductionCode, deductionType, benefitOption, benefitProvider, payGroup, periodControl, payDate, is401K, is403B, is408K, is408P, is457, is457B, is457F, is501C, isD125, isDeductionOffSet, isDeferredCompensation, isDependentCare, isHousing, isNonQualifiedPlan, startPerControl, endPerControl, page, perPage, _callback);
        }


        /**
         * Execute get request
         * @return List&lt;PayrollDeductionsHistory&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<PayrollDeductionsHistory> execute() throws ApiException {
            ApiResponse<List<PayrollDeductionsHistory>> localVarResp = getWithHttpInfo(employeeId, companyId, checkId, employeeNumber, deductionCode, deductionType, benefitOption, benefitProvider, payGroup, periodControl, payDate, is401K, is403B, is408K, is408P, is457, is457B, is457F, is501C, isD125, isDeductionOffSet, isDeferredCompensation, isDependentCare, isHousing, isNonQualifiedPlan, startPerControl, endPerControl, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;List&lt;PayrollDeductionsHistory&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<PayrollDeductionsHistory>> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(employeeId, companyId, checkId, employeeNumber, deductionCode, deductionType, benefitOption, benefitProvider, payGroup, periodControl, payDate, is401K, is403B, is408K, is408P, is457, is457B, is457F, is501C, isD125, isDeductionOffSet, isDeferredCompensation, isDependentCare, isHousing, isNonQualifiedPlan, startPerControl, endPerControl, page, perPage);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<PayrollDeductionsHistory>> _callback) throws ApiException {
            return getAsync(employeeId, companyId, checkId, employeeNumber, deductionCode, deductionType, benefitOption, benefitProvider, payGroup, periodControl, payDate, is401K, is403B, is408K, is408P, is457, is457B, is457F, is501C, isD125, isDeductionOffSet, isDeferredCompensation, isDependentCare, isHousing, isNonQualifiedPlan, startPerControl, endPerControl, page, perPage, _callback);
        }
    }

    /**
     * Get Payroll Deductions History
     * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Payroll Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get() throws IllegalArgumentException {
        return new GetRequestBuilder();
    }
}
