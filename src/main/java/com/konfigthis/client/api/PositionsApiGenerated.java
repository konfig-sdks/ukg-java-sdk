/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Positions;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PositionsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PositionsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PositionsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listFilteredCall(String companyId, String employeeType, String statusCode, String payGroupCode, String positionCode, String projectCode, String shiftGroupCode, Boolean isProrated, Boolean isApproved, Boolean isEligibleForBenefits, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/v1/positions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (employeeType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeType", employeeType));
        }

        if (statusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusCode", statusCode));
        }

        if (payGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroupCode", payGroupCode));
        }

        if (positionCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("positionCode", positionCode));
        }

        if (projectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("projectCode", projectCode));
        }

        if (shiftGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("shiftGroupCode", shiftGroupCode));
        }

        if (isProrated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isProrated", isProrated));
        }

        if (isApproved != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isApproved", isApproved));
        }

        if (isEligibleForBenefits != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isEligibleForBenefits", isEligibleForBenefits));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listFilteredValidateBeforeCall(String companyId, String employeeType, String statusCode, String payGroupCode, String positionCode, String projectCode, String shiftGroupCode, Boolean isProrated, Boolean isApproved, Boolean isEligibleForBenefits, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listFilteredCall(companyId, employeeType, statusCode, payGroupCode, positionCode, projectCode, shiftGroupCode, isProrated, isApproved, isEligibleForBenefits, page, perPage, _callback);

    }


    private ApiResponse<List<Positions>> listFilteredWithHttpInfo(String companyId, String employeeType, String statusCode, String payGroupCode, String positionCode, String projectCode, String shiftGroupCode, Boolean isProrated, Boolean isApproved, Boolean isEligibleForBenefits, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listFilteredValidateBeforeCall(companyId, employeeType, statusCode, payGroupCode, positionCode, projectCode, shiftGroupCode, isProrated, isApproved, isEligibleForBenefits, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<Positions>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listFilteredAsync(String companyId, String employeeType, String statusCode, String payGroupCode, String positionCode, String projectCode, String shiftGroupCode, Boolean isProrated, Boolean isApproved, Boolean isEligibleForBenefits, Integer page, Integer perPage, final ApiCallback<List<Positions>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listFilteredValidateBeforeCall(companyId, employeeType, statusCode, payGroupCode, positionCode, projectCode, shiftGroupCode, isProrated, isApproved, isEligibleForBenefits, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<Positions>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListFilteredRequestBuilder {
        private String companyId;
        private String employeeType;
        private String statusCode;
        private String payGroupCode;
        private String positionCode;
        private String projectCode;
        private String shiftGroupCode;
        private Boolean isProrated;
        private Boolean isApproved;
        private Boolean isEligibleForBenefits;
        private Integer page;
        private Integer perPage;

        private ListFilteredRequestBuilder() {
        }

        /**
         * Set companyId
         * @param companyId  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set employeeType
         * @param employeeType  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder employeeType(String employeeType) {
            this.employeeType = employeeType;
            return this;
        }
        
        /**
         * Set statusCode
         * @param statusCode  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder statusCode(String statusCode) {
            this.statusCode = statusCode;
            return this;
        }
        
        /**
         * Set payGroupCode
         * @param payGroupCode  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder payGroupCode(String payGroupCode) {
            this.payGroupCode = payGroupCode;
            return this;
        }
        
        /**
         * Set positionCode
         * @param positionCode  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder positionCode(String positionCode) {
            this.positionCode = positionCode;
            return this;
        }
        
        /**
         * Set projectCode
         * @param projectCode  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder projectCode(String projectCode) {
            this.projectCode = projectCode;
            return this;
        }
        
        /**
         * Set shiftGroupCode
         * @param shiftGroupCode  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder shiftGroupCode(String shiftGroupCode) {
            this.shiftGroupCode = shiftGroupCode;
            return this;
        }
        
        /**
         * Set isProrated
         * @param isProrated  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder isProrated(Boolean isProrated) {
            this.isProrated = isProrated;
            return this;
        }
        
        /**
         * Set isApproved
         * @param isApproved  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder isApproved(Boolean isApproved) {
            this.isApproved = isApproved;
            return this;
        }
        
        /**
         * Set isEligibleForBenefits
         * @param isEligibleForBenefits  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder isEligibleForBenefits(Boolean isEligibleForBenefits) {
            this.isEligibleForBenefits = isEligibleForBenefits;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return ListFilteredRequestBuilder
         */
        public ListFilteredRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listFiltered
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listFilteredCall(companyId, employeeType, statusCode, payGroupCode, positionCode, projectCode, shiftGroupCode, isProrated, isApproved, isEligibleForBenefits, page, perPage, _callback);
        }


        /**
         * Execute listFiltered request
         * @return List&lt;Positions&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<Positions> execute() throws ApiException {
            ApiResponse<List<Positions>> localVarResp = listFilteredWithHttpInfo(companyId, employeeType, statusCode, payGroupCode, positionCode, projectCode, shiftGroupCode, isProrated, isApproved, isEligibleForBenefits, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listFiltered request with HTTP info returned
         * @return ApiResponse&lt;List&lt;Positions&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<Positions>> executeWithHttpInfo() throws ApiException {
            return listFilteredWithHttpInfo(companyId, employeeType, statusCode, payGroupCode, positionCode, projectCode, shiftGroupCode, isProrated, isApproved, isEligibleForBenefits, page, perPage);
        }

        /**
         * Execute listFiltered request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<Positions>> _callback) throws ApiException {
            return listFilteredAsync(companyId, employeeType, statusCode, payGroupCode, positionCode, projectCode, shiftGroupCode, isProrated, isApproved, isEligibleForBenefits, page, perPage, _callback);
        }
    }

    /**
     * Returns list of employee position information filtered on various parameters
     * If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Company Configuration Integration\&quot; Api endpoints. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).&lt;/br&gt;&lt;/br&gt;           /configuration/v1/position endpoint can take following optional parameter:   &lt;ul&gt;     &lt;li&gt;     companyId :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     employeeType :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     payGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     statusCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     positionCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;      &lt;li&gt;     projectCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;       &lt;li&gt;     shiftGroupCode :- Can take in multiple IDs separated by comma. ex: [id1, id2]     &lt;/li&gt;     &lt;li&gt;     isProrated      &lt;/li&gt;     &lt;li&gt;     isApproved      &lt;/li&gt;      &lt;li&gt;     isEligibleForBenefits   &lt;/li&gt;  &lt;ul&gt;&lt;br/&gt;    Correct syntax when using parameters are as follows:    &lt;ul&gt;      &lt;li&gt;Get positions without parameter     &lt;ul&gt;      &lt;li&gt;Example: /configuration/v1/positions      &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by single companyid      &lt;ul&gt;      &lt;li&gt;Example: /configuration/v1/positions?companyid&#x3D;{companyid}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;   &lt;li&gt;Get positions by multiple companyid      &lt;ul&gt;      &lt;li&gt;Example: /configuration/v1/positions?companyid&#x3D;[companyid1,companyid2]&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by positionsCode     &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?positionCode&#x3D;{positionCode}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by isEligibleForBenefits      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?isEligibleForBenefits&#x3D;{isEligibleForBenefit}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by employeeType      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?employeeType&#x3D;{employeeType}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by statusCode      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?statusCode&#x3D;{statusCode}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;     &lt;li&gt;Get positions by shiftGroupCode      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?shiftGrouptCode&#x3D;{shiftGrouptCode}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;      &lt;li&gt;Get positions by using all parameter      &lt;ul&gt;      &lt;li&gt;Example: configuration/v1/positions?isApproved&#x3D;{isApproved}&amp;employeeType&#x3D;{employeeType}&amp;shiftGroupCode&#x3D;{shiftGroupCode}&amp;isEligibleForBenefits&#x3D;{isEligibleForBenefits}&amp;isProrated&#x3D;{isProrated}&amp;statusCode&#x3D;{statusCode}&amp;payGroupCode&#x3D;{payGroup}&amp;positionCode&#x3D;{positionCode}&amp;projectCode&#x3D;{projectCode}&amp;companyId&#x3D;{companyId}&amp;page&#x3D;{page}&amp;per_Page&#x3D;{per_Page}&lt;/li&gt;     &lt;/ul&gt;      &lt;/li&gt;      &lt;/ul&gt;   
     * @return ListFilteredRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ListFilteredRequestBuilder listFiltered() throws IllegalArgumentException {
        return new ListFilteredRequestBuilder();
    }
}
