/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import com.konfigthis.client.model.ResultDtoClockTransactionDto;
import com.konfigthis.client.model.TimeItem;
import com.konfigthis.client.model.TimeItemList;
import com.konfigthis.client.model.TimesheetDtoWorkSummaryDto;
import java.util.UUID;
import com.konfigthis.client.model.WorkSummaryDto;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class TimeApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public TimeApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public TimeApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTimeEntriesCall(UUID xCorrelationId, UUID usTenantId, TimeItemList timeItemList, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = timeItemList;

        // create path and map variables
        String localVarPath = "/hoursWorked";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCorrelationId != null) {
            localVarHeaderParams.put("X-Correlation-Id", localVarApiClient.parameterToString(xCorrelationId));
        }

        if (usTenantId != null) {
            localVarHeaderParams.put("US-Tenant-Id", localVarApiClient.parameterToString(usTenantId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "BasicAuth", "OauthSecurity", "basic", "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTimeEntriesValidateBeforeCall(UUID xCorrelationId, UUID usTenantId, TimeItemList timeItemList, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xCorrelationId' is set
        if (xCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationId' when calling addTimeEntries(Async)");
        }

        // verify the required parameter 'usTenantId' is set
        if (usTenantId == null) {
            throw new ApiException("Missing the required parameter 'usTenantId' when calling addTimeEntries(Async)");
        }

        // verify the required parameter 'timeItemList' is set
        if (timeItemList == null) {
            throw new ApiException("Missing the required parameter 'timeItemList' when calling addTimeEntries(Async)");
        }

        return addTimeEntriesCall(xCorrelationId, usTenantId, timeItemList, _callback);

    }


    private ApiResponse<TimeItemList> addTimeEntriesWithHttpInfo(UUID xCorrelationId, UUID usTenantId, TimeItemList timeItemList) throws ApiException {
        okhttp3.Call localVarCall = addTimeEntriesValidateBeforeCall(xCorrelationId, usTenantId, timeItemList, null);
        Type localVarReturnType = new TypeToken<TimeItemList>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTimeEntriesAsync(UUID xCorrelationId, UUID usTenantId, TimeItemList timeItemList, final ApiCallback<TimeItemList> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTimeEntriesValidateBeforeCall(xCorrelationId, usTenantId, timeItemList, _callback);
        Type localVarReturnType = new TypeToken<TimeItemList>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTimeEntriesRequestBuilder {
        private final List<TimeItem> timeData;
        private final UUID xCorrelationId;
        private final UUID usTenantId;

        private AddTimeEntriesRequestBuilder(List<TimeItem> timeData, UUID xCorrelationId, UUID usTenantId) {
            this.timeData = timeData;
            this.xCorrelationId = xCorrelationId;
            this.usTenantId = usTenantId;
        }

        /**
         * Build call for addTimeEntries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            TimeItemList timeItemList = buildBodyParams();
            return addTimeEntriesCall(xCorrelationId, usTenantId, timeItemList, _callback);
        }

        private TimeItemList buildBodyParams() {
            TimeItemList timeItemList = new TimeItemList();
            timeItemList.timeData(this.timeData);
            return timeItemList;
        }

        /**
         * Execute addTimeEntries request
         * @return TimeItemList
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public TimeItemList execute() throws ApiException {
            TimeItemList timeItemList = buildBodyParams();
            ApiResponse<TimeItemList> localVarResp = addTimeEntriesWithHttpInfo(xCorrelationId, usTenantId, timeItemList);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTimeEntries request with HTTP info returned
         * @return ApiResponse&lt;TimeItemList&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimeItemList> executeWithHttpInfo() throws ApiException {
            TimeItemList timeItemList = buildBodyParams();
            return addTimeEntriesWithHttpInfo(xCorrelationId, usTenantId, timeItemList);
        }

        /**
         * Execute addTimeEntries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimeItemList> _callback) throws ApiException {
            TimeItemList timeItemList = buildBodyParams();
            return addTimeEntriesAsync(xCorrelationId, usTenantId, timeItemList, _callback);
        }
    }

    /**
     * Add hours worked entries
     * Add multiple Time entries
     * @param xCorrelationId This value MUST be supplied by the originator, used for tracing (required)
     * @param usTenantId  (required)
     * @param timeItemList  (required)
     * @return AddTimeEntriesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> Internal Server Error </td><td>  -  </td></tr>
     </table>
     */
    public AddTimeEntriesRequestBuilder addTimeEntries(List<TimeItem> timeData, UUID xCorrelationId, UUID usTenantId) throws IllegalArgumentException {
        if (timeData == null) throw new IllegalArgumentException("\"timeData\" is required but got null");
        if (xCorrelationId == null) throw new IllegalArgumentException("\"xCorrelationId\" is required but got null");
            

        if (usTenantId == null) throw new IllegalArgumentException("\"usTenantId\" is required but got null");
            

        return new AddTimeEntriesRequestBuilder(timeData, xCorrelationId, usTenantId);
    }
    private okhttp3.Call getPendingTransactionsCall(String empName, Long empId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/pending_clock_transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emp_name", empName));
        }

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emp_id", empId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPendingTransactionsValidateBeforeCall(String empName, Long empId, final ApiCallback _callback) throws ApiException {
        return getPendingTransactionsCall(empName, empId, _callback);

    }


    private ApiResponse<ResultDtoClockTransactionDto> getPendingTransactionsWithHttpInfo(String empName, Long empId) throws ApiException {
        okhttp3.Call localVarCall = getPendingTransactionsValidateBeforeCall(empName, empId, null);
        Type localVarReturnType = new TypeToken<ResultDtoClockTransactionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPendingTransactionsAsync(String empName, Long empId, final ApiCallback<ResultDtoClockTransactionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPendingTransactionsValidateBeforeCall(empName, empId, _callback);
        Type localVarReturnType = new TypeToken<ResultDtoClockTransactionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPendingTransactionsRequestBuilder {
        private String empName;
        private Long empId;

        private GetPendingTransactionsRequestBuilder() {
        }

        /**
         * Set empName
         * @param empName Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified. (optional)
         * @return GetPendingTransactionsRequestBuilder
         */
        public GetPendingTransactionsRequestBuilder empName(String empName) {
            this.empName = empName;
            return this;
        }
        
        /**
         * Set empId
         * @param empId Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified. (optional)
         * @return GetPendingTransactionsRequestBuilder
         */
        public GetPendingTransactionsRequestBuilder empId(Long empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Build call for getPendingTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPendingTransactionsCall(empName, empId, _callback);
        }


        /**
         * Execute getPendingTransactions request
         * @return ResultDtoClockTransactionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public ResultDtoClockTransactionDto execute() throws ApiException {
            ApiResponse<ResultDtoClockTransactionDto> localVarResp = getPendingTransactionsWithHttpInfo(empName, empId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPendingTransactions request with HTTP info returned
         * @return ApiResponse&lt;ResultDtoClockTransactionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultDtoClockTransactionDto> executeWithHttpInfo() throws ApiException {
            return getPendingTransactionsWithHttpInfo(empName, empId);
        }

        /**
         * Execute getPendingTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultDtoClockTransactionDto> _callback) throws ApiException {
            return getPendingTransactionsAsync(empName, empId, _callback);
        }
    }

    /**
     * Get pending clock transactions.
     * Obtain all pending clock transactions.
     * @return GetPendingTransactionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public GetPendingTransactionsRequestBuilder getPendingTransactions() throws IllegalArgumentException {
        return new GetPendingTransactionsRequestBuilder();
    }
    private okhttp3.Call getProcessedTransactionsCall(OffsetDateTime date, String empName, Long empId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/clock_transactions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emp_name", empName));
        }

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emp_id", empId));
        }

        if (date != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("date", date));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getProcessedTransactionsValidateBeforeCall(OffsetDateTime date, String empName, Long empId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'date' is set
        if (date == null) {
            throw new ApiException("Missing the required parameter 'date' when calling getProcessedTransactions(Async)");
        }

        return getProcessedTransactionsCall(date, empName, empId, _callback);

    }


    private ApiResponse<ResultDtoClockTransactionDto> getProcessedTransactionsWithHttpInfo(OffsetDateTime date, String empName, Long empId) throws ApiException {
        okhttp3.Call localVarCall = getProcessedTransactionsValidateBeforeCall(date, empName, empId, null);
        Type localVarReturnType = new TypeToken<ResultDtoClockTransactionDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getProcessedTransactionsAsync(OffsetDateTime date, String empName, Long empId, final ApiCallback<ResultDtoClockTransactionDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getProcessedTransactionsValidateBeforeCall(date, empName, empId, _callback);
        Type localVarReturnType = new TypeToken<ResultDtoClockTransactionDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetProcessedTransactionsRequestBuilder {
        private final OffsetDateTime date;
        private String empName;
        private Long empId;

        private GetProcessedTransactionsRequestBuilder(OffsetDateTime date) {
            this.date = date;
        }

        /**
         * Set empName
         * @param empName Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified. (optional)
         * @return GetProcessedTransactionsRequestBuilder
         */
        public GetProcessedTransactionsRequestBuilder empName(String empName) {
            this.empName = empName;
            return this;
        }
        
        /**
         * Set empId
         * @param empId Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified. (optional)
         * @return GetProcessedTransactionsRequestBuilder
         */
        public GetProcessedTransactionsRequestBuilder empId(Long empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Build call for getProcessedTransactions
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getProcessedTransactionsCall(date, empName, empId, _callback);
        }


        /**
         * Execute getProcessedTransactions request
         * @return ResultDtoClockTransactionDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public ResultDtoClockTransactionDto execute() throws ApiException {
            ApiResponse<ResultDtoClockTransactionDto> localVarResp = getProcessedTransactionsWithHttpInfo(date, empName, empId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getProcessedTransactions request with HTTP info returned
         * @return ApiResponse&lt;ResultDtoClockTransactionDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<ResultDtoClockTransactionDto> executeWithHttpInfo() throws ApiException {
            return getProcessedTransactionsWithHttpInfo(date, empName, empId);
        }

        /**
         * Execute getProcessedTransactions request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<ResultDtoClockTransactionDto> _callback) throws ApiException {
            return getProcessedTransactionsAsync(date, empName, empId, _callback);
        }
    }

    /**
     * Get processed clock transactions.
     * Obtain all processed clock transactions for a given date.
     * @param date Date of clock transaction (required)
     * @return GetProcessedTransactionsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public GetProcessedTransactionsRequestBuilder getProcessedTransactions(OffsetDateTime date) throws IllegalArgumentException {
        if (date == null) throw new IllegalArgumentException("\"date\" is required but got null");
        return new GetProcessedTransactionsRequestBuilder(date);
    }
    private okhttp3.Call getWorkSummariesCall(OffsetDateTime from, OffsetDateTime to, String empName, Long empId, Boolean full, Boolean authStatus, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/work_summaries";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (empName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emp_name", empName));
        }

        if (empId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emp_id", empId));
        }

        if (from != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("from", from));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (full != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("full", full));
        }

        if (authStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("authStatus", authStatus));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkSummariesValidateBeforeCall(OffsetDateTime from, OffsetDateTime to, String empName, Long empId, Boolean full, Boolean authStatus, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'from' is set
        if (from == null) {
            throw new ApiException("Missing the required parameter 'from' when calling getWorkSummaries(Async)");
        }

        // verify the required parameter 'to' is set
        if (to == null) {
            throw new ApiException("Missing the required parameter 'to' when calling getWorkSummaries(Async)");
        }

        return getWorkSummariesCall(from, to, empName, empId, full, authStatus, _callback);

    }


    private ApiResponse<TimesheetDtoWorkSummaryDto> getWorkSummariesWithHttpInfo(OffsetDateTime from, OffsetDateTime to, String empName, Long empId, Boolean full, Boolean authStatus) throws ApiException {
        okhttp3.Call localVarCall = getWorkSummariesValidateBeforeCall(from, to, empName, empId, full, authStatus, null);
        Type localVarReturnType = new TypeToken<TimesheetDtoWorkSummaryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkSummariesAsync(OffsetDateTime from, OffsetDateTime to, String empName, Long empId, Boolean full, Boolean authStatus, final ApiCallback<TimesheetDtoWorkSummaryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkSummariesValidateBeforeCall(from, to, empName, empId, full, authStatus, _callback);
        Type localVarReturnType = new TypeToken<TimesheetDtoWorkSummaryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkSummariesRequestBuilder {
        private final OffsetDateTime from;
        private final OffsetDateTime to;
        private String empName;
        private Long empId;
        private Boolean full;
        private Boolean authStatus;

        private GetWorkSummariesRequestBuilder(OffsetDateTime from, OffsetDateTime to) {
            this.from = from;
            this.to = to;
        }

        /**
         * Set empName
         * @param empName Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified. (optional)
         * @return GetWorkSummariesRequestBuilder
         */
        public GetWorkSummariesRequestBuilder empName(String empName) {
            this.empName = empName;
            return this;
        }
        
        /**
         * Set empId
         * @param empId Employee can be specified by their emp_name or emp_id.  At least one parameter must be specified. (optional)
         * @return GetWorkSummariesRequestBuilder
         */
        public GetWorkSummariesRequestBuilder empId(Long empId) {
            this.empId = empId;
            return this;
        }
        
        /**
         * Set full
         * @param full Specifies if both clock and work detail data should be loaded (optional, default to false)
         * @return GetWorkSummariesRequestBuilder
         */
        public GetWorkSummariesRequestBuilder full(Boolean full) {
            this.full = full;
            return this;
        }
        
        /**
         * Set authStatus
         * @param authStatus If specified will load only work summaries with Authorized status equal to true or false (optional)
         * @return GetWorkSummariesRequestBuilder
         */
        public GetWorkSummariesRequestBuilder authStatus(Boolean authStatus) {
            this.authStatus = authStatus;
            return this;
        }
        
        /**
         * Build call for getWorkSummaries
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkSummariesCall(from, to, empName, empId, full, authStatus, _callback);
        }


        /**
         * Execute getWorkSummaries request
         * @return TimesheetDtoWorkSummaryDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public TimesheetDtoWorkSummaryDto execute() throws ApiException {
            ApiResponse<TimesheetDtoWorkSummaryDto> localVarResp = getWorkSummariesWithHttpInfo(from, to, empName, empId, full, authStatus);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkSummaries request with HTTP info returned
         * @return ApiResponse&lt;TimesheetDtoWorkSummaryDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TimesheetDtoWorkSummaryDto> executeWithHttpInfo() throws ApiException {
            return getWorkSummariesWithHttpInfo(from, to, empName, empId, full, authStatus);
        }

        /**
         * Execute getWorkSummaries request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TimesheetDtoWorkSummaryDto> _callback) throws ApiException {
            return getWorkSummariesAsync(from, to, empName, empId, full, authStatus, _callback);
        }
    }

    /**
     * Obtain work summaries.
     * Obtain work summaries between the provided date range.
     * @param from Start range for work summaries (required)
     * @param to End range for work summaries (required)
     * @return GetWorkSummariesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkSummariesRequestBuilder getWorkSummaries(OffsetDateTime from, OffsetDateTime to) throws IllegalArgumentException {
        if (from == null) throw new IllegalArgumentException("\"from\" is required but got null");
        if (to == null) throw new IllegalArgumentException("\"to\" is required but got null");
        return new GetWorkSummariesRequestBuilder(from, to);
    }
    private okhttp3.Call getWorkSummaryByIdCall(Long workSummaryId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/time/work_summary";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (workSummaryId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("workSummaryId", workSummaryId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getWorkSummaryByIdValidateBeforeCall(Long workSummaryId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'workSummaryId' is set
        if (workSummaryId == null) {
            throw new ApiException("Missing the required parameter 'workSummaryId' when calling getWorkSummaryById(Async)");
        }

        return getWorkSummaryByIdCall(workSummaryId, _callback);

    }


    private ApiResponse<WorkSummaryDto> getWorkSummaryByIdWithHttpInfo(Long workSummaryId) throws ApiException {
        okhttp3.Call localVarCall = getWorkSummaryByIdValidateBeforeCall(workSummaryId, null);
        Type localVarReturnType = new TypeToken<WorkSummaryDto>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getWorkSummaryByIdAsync(Long workSummaryId, final ApiCallback<WorkSummaryDto> _callback) throws ApiException {

        okhttp3.Call localVarCall = getWorkSummaryByIdValidateBeforeCall(workSummaryId, _callback);
        Type localVarReturnType = new TypeToken<WorkSummaryDto>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetWorkSummaryByIdRequestBuilder {
        private final Long workSummaryId;

        private GetWorkSummaryByIdRequestBuilder(Long workSummaryId) {
            this.workSummaryId = workSummaryId;
        }

        /**
         * Build call for getWorkSummaryById
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getWorkSummaryByIdCall(workSummaryId, _callback);
        }


        /**
         * Execute getWorkSummaryById request
         * @return WorkSummaryDto
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public WorkSummaryDto execute() throws ApiException {
            ApiResponse<WorkSummaryDto> localVarResp = getWorkSummaryByIdWithHttpInfo(workSummaryId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getWorkSummaryById request with HTTP info returned
         * @return ApiResponse&lt;WorkSummaryDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<WorkSummaryDto> executeWithHttpInfo() throws ApiException {
            return getWorkSummaryByIdWithHttpInfo(workSummaryId);
        }

        /**
         * Execute getWorkSummaryById request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
            <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<WorkSummaryDto> _callback) throws ApiException {
            return getWorkSummaryByIdAsync(workSummaryId, _callback);
        }
    }

    /**
     * Obtain a work summary.
     * Obtain a work summary by the specified id.  Will load a full work summary (includes clock and work detail information).
     * @param workSummaryId Work Summary id (required)
     * @return GetWorkSummaryByIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> successful operation </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Unauthorized </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too many requests </td><td>  -  </td></tr>
     </table>
     */
    public GetWorkSummaryByIdRequestBuilder getWorkSummaryById(Long workSummaryId) throws IllegalArgumentException {
        if (workSummaryId == null) throw new IllegalArgumentException("\"workSummaryId\" is required but got null");
        return new GetWorkSummaryByIdRequestBuilder(workSummaryId);
    }
}
