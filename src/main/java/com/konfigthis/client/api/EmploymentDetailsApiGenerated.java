/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmpEmploymentDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmploymentDetailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmploymentDetailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmploymentDetailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByCompanyIdAndEmployeeIdCall(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/companies/{companyId}/employees/{employeeId}/employment-details"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId2));
        }

        if (employeeId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId2));
        }

        if (primaryJobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryJobCode", primaryJobCode));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (fullTimeOrPartTimeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullTimeOrPartTimeCode", fullTimeOrPartTimeCode));
        }

        if (primaryWorkLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryWorkLocationCode", primaryWorkLocationCode));
        }

        if (primaryProjectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryProjectCode", primaryProjectCode));
        }

        if (deductionGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deductionGroupCode", deductionGroupCode));
        }

        if (earningGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earningGroupCode", earningGroupCode));
        }

        if (employeeTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeTypeCode", employeeTypeCode));
        }

        if (employeeStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeStatusCode", employeeStatusCode));
        }

        if (employeeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumber", employeeNumber));
        }

        if (supervisorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supervisorID", supervisorID));
        }

        if (originalHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalHireDate", originalHireDate));
        }

        if (lastHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastHireDate", lastHireDate));
        }

        if (dateOfTermination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfTermination", dateOfTermination));
        }

        if (dateOfRetirement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfRetirement", dateOfRetirement));
        }

        if (dateTimeCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeCreated", dateTimeCreated));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (dateLastPayDatePaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateLastPayDatePaid", dateLastPayDatePaid));
        }

        if (payGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroup", payGroup));
        }

        if (isHomeCompany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHomeCompany", isHomeCompany));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByCompanyIdAndEmployeeIdValidateBeforeCall(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getByCompanyIdAndEmployeeId(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByCompanyIdAndEmployeeId(Async)");
        }

        return getByCompanyIdAndEmployeeIdCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);

    }


    private ApiResponse<List<EmpEmploymentDetails>> getByCompanyIdAndEmployeeIdWithHttpInfo(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getByCompanyIdAndEmployeeIdValidateBeforeCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpEmploymentDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByCompanyIdAndEmployeeIdAsync(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback<List<EmpEmploymentDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByCompanyIdAndEmployeeIdValidateBeforeCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpEmploymentDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByCompanyIdAndEmployeeIdRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private String companyId2;
        private String employeeId2;
        private String primaryJobCode;
        private String jobTitle;
        private String fullTimeOrPartTimeCode;
        private String primaryWorkLocationCode;
        private String primaryProjectCode;
        private String deductionGroupCode;
        private String earningGroupCode;
        private String employeeTypeCode;
        private String employeeStatusCode;
        private String employeeNumber;
        private String supervisorID;
        private String originalHireDate;
        private String lastHireDate;
        private String dateOfTermination;
        private String dateOfRetirement;
        private String dateTimeCreated;
        private String dateTimeChanged;
        private String dateLastPayDatePaid;
        private String payGroup;
        private Boolean isHomeCompany;
        private Integer page;
        private Integer perPage;

        private GetByCompanyIdAndEmployeeIdRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set companyId2
         * @param companyId2  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder companyId2(String companyId2) {
            this.companyId2 = companyId2;
            return this;
        }
        
        /**
         * Set employeeId2
         * @param employeeId2  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder employeeId2(String employeeId2) {
            this.employeeId2 = employeeId2;
            return this;
        }
        
        /**
         * Set primaryJobCode
         * @param primaryJobCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder primaryJobCode(String primaryJobCode) {
            this.primaryJobCode = primaryJobCode;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set fullTimeOrPartTimeCode
         * @param fullTimeOrPartTimeCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
            this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
            return this;
        }
        
        /**
         * Set primaryWorkLocationCode
         * @param primaryWorkLocationCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder primaryWorkLocationCode(String primaryWorkLocationCode) {
            this.primaryWorkLocationCode = primaryWorkLocationCode;
            return this;
        }
        
        /**
         * Set primaryProjectCode
         * @param primaryProjectCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder primaryProjectCode(String primaryProjectCode) {
            this.primaryProjectCode = primaryProjectCode;
            return this;
        }
        
        /**
         * Set deductionGroupCode
         * @param deductionGroupCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder deductionGroupCode(String deductionGroupCode) {
            this.deductionGroupCode = deductionGroupCode;
            return this;
        }
        
        /**
         * Set earningGroupCode
         * @param earningGroupCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder earningGroupCode(String earningGroupCode) {
            this.earningGroupCode = earningGroupCode;
            return this;
        }
        
        /**
         * Set employeeTypeCode
         * @param employeeTypeCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder employeeTypeCode(String employeeTypeCode) {
            this.employeeTypeCode = employeeTypeCode;
            return this;
        }
        
        /**
         * Set employeeStatusCode
         * @param employeeStatusCode  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder employeeStatusCode(String employeeStatusCode) {
            this.employeeStatusCode = employeeStatusCode;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set supervisorID
         * @param supervisorID  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder supervisorID(String supervisorID) {
            this.supervisorID = supervisorID;
            return this;
        }
        
        /**
         * Set originalHireDate
         * @param originalHireDate  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder originalHireDate(String originalHireDate) {
            this.originalHireDate = originalHireDate;
            return this;
        }
        
        /**
         * Set lastHireDate
         * @param lastHireDate  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder lastHireDate(String lastHireDate) {
            this.lastHireDate = lastHireDate;
            return this;
        }
        
        /**
         * Set dateOfTermination
         * @param dateOfTermination  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder dateOfTermination(String dateOfTermination) {
            this.dateOfTermination = dateOfTermination;
            return this;
        }
        
        /**
         * Set dateOfRetirement
         * @param dateOfRetirement  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder dateOfRetirement(String dateOfRetirement) {
            this.dateOfRetirement = dateOfRetirement;
            return this;
        }
        
        /**
         * Set dateTimeCreated
         * @param dateTimeCreated  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder dateTimeCreated(String dateTimeCreated) {
            this.dateTimeCreated = dateTimeCreated;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set dateLastPayDatePaid
         * @param dateLastPayDatePaid  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder dateLastPayDatePaid(String dateLastPayDatePaid) {
            this.dateLastPayDatePaid = dateLastPayDatePaid;
            return this;
        }
        
        /**
         * Set payGroup
         * @param payGroup  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder payGroup(String payGroup) {
            this.payGroup = payGroup;
            return this;
        }
        
        /**
         * Set isHomeCompany
         * @param isHomeCompany  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder isHomeCompany(Boolean isHomeCompany) {
            this.isHomeCompany = isHomeCompany;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetByCompanyIdAndEmployeeIdRequestBuilder
         */
        public GetByCompanyIdAndEmployeeIdRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getByCompanyIdAndEmployeeId
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByCompanyIdAndEmployeeIdCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }


        /**
         * Execute getByCompanyIdAndEmployeeId request
         * @return List&lt;EmpEmploymentDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpEmploymentDetails> execute() throws ApiException {
            ApiResponse<List<EmpEmploymentDetails>> localVarResp = getByCompanyIdAndEmployeeIdWithHttpInfo(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByCompanyIdAndEmployeeId request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpEmploymentDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpEmploymentDetails>> executeWithHttpInfo() throws ApiException {
            return getByCompanyIdAndEmployeeIdWithHttpInfo(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
        }

        /**
         * Execute getByCompanyIdAndEmployeeId request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpEmploymentDetails>> _callback) throws ApiException {
            return getByCompanyIdAndEmployeeIdAsync(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }
    }

    /**
     * Get Employment Details
     * Get a single employment detail by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Personnel Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/employment-details?dateTimeCreated&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param companyId  (required)
     * @param employeeId  (required)
     * @return GetByCompanyIdAndEmployeeIdRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
     </table>
     */
    public GetByCompanyIdAndEmployeeIdRequestBuilder getByCompanyIdAndEmployeeId(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByCompanyIdAndEmployeeIdRequestBuilder(companyId, employeeId);
    }
    private okhttp3.Call getDetailsCall(String companyId, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/employment-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (primaryJobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryJobCode", primaryJobCode));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (fullTimeOrPartTimeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullTimeOrPartTimeCode", fullTimeOrPartTimeCode));
        }

        if (primaryWorkLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryWorkLocationCode", primaryWorkLocationCode));
        }

        if (primaryProjectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryProjectCode", primaryProjectCode));
        }

        if (deductionGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deductionGroupCode", deductionGroupCode));
        }

        if (earningGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earningGroupCode", earningGroupCode));
        }

        if (employeeTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeTypeCode", employeeTypeCode));
        }

        if (employeeStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeStatusCode", employeeStatusCode));
        }

        if (employeeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumber", employeeNumber));
        }

        if (supervisorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supervisorID", supervisorID));
        }

        if (originalHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalHireDate", originalHireDate));
        }

        if (lastHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastHireDate", lastHireDate));
        }

        if (dateOfTermination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfTermination", dateOfTermination));
        }

        if (dateOfRetirement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfRetirement", dateOfRetirement));
        }

        if (dateTimeCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeCreated", dateTimeCreated));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (dateLastPayDatePaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateLastPayDatePaid", dateLastPayDatePaid));
        }

        if (payGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroup", payGroup));
        }

        if (isHomeCompany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHomeCompany", isHomeCompany));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String companyId, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getDetailsCall(companyId, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);

    }


    private ApiResponse<List<EmpEmploymentDetails>> getDetailsWithHttpInfo(String companyId, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyId, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpEmploymentDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String companyId, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback<List<EmpEmploymentDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyId, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpEmploymentDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private String companyId;
        private String employeeId;
        private String primaryJobCode;
        private String jobTitle;
        private String fullTimeOrPartTimeCode;
        private String primaryWorkLocationCode;
        private String primaryProjectCode;
        private String deductionGroupCode;
        private String earningGroupCode;
        private String employeeTypeCode;
        private String employeeStatusCode;
        private String employeeNumber;
        private String supervisorID;
        private String originalHireDate;
        private String lastHireDate;
        private String dateOfTermination;
        private String dateOfRetirement;
        private String dateTimeCreated;
        private String dateTimeChanged;
        private String dateLastPayDatePaid;
        private String payGroup;
        private Boolean isHomeCompany;
        private Integer page;
        private Integer perPage;

        private GetDetailsRequestBuilder() {
        }

        /**
         * Set companyId
         * @param companyId  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set primaryJobCode
         * @param primaryJobCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder primaryJobCode(String primaryJobCode) {
            this.primaryJobCode = primaryJobCode;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set fullTimeOrPartTimeCode
         * @param fullTimeOrPartTimeCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
            this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
            return this;
        }
        
        /**
         * Set primaryWorkLocationCode
         * @param primaryWorkLocationCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder primaryWorkLocationCode(String primaryWorkLocationCode) {
            this.primaryWorkLocationCode = primaryWorkLocationCode;
            return this;
        }
        
        /**
         * Set primaryProjectCode
         * @param primaryProjectCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder primaryProjectCode(String primaryProjectCode) {
            this.primaryProjectCode = primaryProjectCode;
            return this;
        }
        
        /**
         * Set deductionGroupCode
         * @param deductionGroupCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder deductionGroupCode(String deductionGroupCode) {
            this.deductionGroupCode = deductionGroupCode;
            return this;
        }
        
        /**
         * Set earningGroupCode
         * @param earningGroupCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder earningGroupCode(String earningGroupCode) {
            this.earningGroupCode = earningGroupCode;
            return this;
        }
        
        /**
         * Set employeeTypeCode
         * @param employeeTypeCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeTypeCode(String employeeTypeCode) {
            this.employeeTypeCode = employeeTypeCode;
            return this;
        }
        
        /**
         * Set employeeStatusCode
         * @param employeeStatusCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeStatusCode(String employeeStatusCode) {
            this.employeeStatusCode = employeeStatusCode;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set supervisorID
         * @param supervisorID  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder supervisorID(String supervisorID) {
            this.supervisorID = supervisorID;
            return this;
        }
        
        /**
         * Set originalHireDate
         * @param originalHireDate  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder originalHireDate(String originalHireDate) {
            this.originalHireDate = originalHireDate;
            return this;
        }
        
        /**
         * Set lastHireDate
         * @param lastHireDate  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder lastHireDate(String lastHireDate) {
            this.lastHireDate = lastHireDate;
            return this;
        }
        
        /**
         * Set dateOfTermination
         * @param dateOfTermination  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateOfTermination(String dateOfTermination) {
            this.dateOfTermination = dateOfTermination;
            return this;
        }
        
        /**
         * Set dateOfRetirement
         * @param dateOfRetirement  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateOfRetirement(String dateOfRetirement) {
            this.dateOfRetirement = dateOfRetirement;
            return this;
        }
        
        /**
         * Set dateTimeCreated
         * @param dateTimeCreated  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateTimeCreated(String dateTimeCreated) {
            this.dateTimeCreated = dateTimeCreated;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set dateLastPayDatePaid
         * @param dateLastPayDatePaid  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateLastPayDatePaid(String dateLastPayDatePaid) {
            this.dateLastPayDatePaid = dateLastPayDatePaid;
            return this;
        }
        
        /**
         * Set payGroup
         * @param payGroup  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder payGroup(String payGroup) {
            this.payGroup = payGroup;
            return this;
        }
        
        /**
         * Set isHomeCompany
         * @param isHomeCompany  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder isHomeCompany(Boolean isHomeCompany) {
            this.isHomeCompany = isHomeCompany;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(companyId, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }


        /**
         * Execute getDetails request
         * @return List&lt;EmpEmploymentDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpEmploymentDetails> execute() throws ApiException {
            ApiResponse<List<EmpEmploymentDetails>> localVarResp = getDetailsWithHttpInfo(companyId, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpEmploymentDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpEmploymentDetails>> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(companyId, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpEmploymentDetails>> _callback) throws ApiException {
            return getDetailsAsync(companyId, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }
    }

    /**
     * Get Employment Details
     * Get all employment record details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Personnel Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /employment-details?dateTimeCreated&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /employment-details?dateTimeCreated&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /employment-details?dateTimeCreated&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /employment-details?dateTimeCreated&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails() throws IllegalArgumentException {
        return new GetDetailsRequestBuilder();
    }
    private okhttp3.Call listByCompanyCall(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/companies/{companyId}/employment-details"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId2));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (primaryJobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryJobCode", primaryJobCode));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (fullTimeOrPartTimeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullTimeOrPartTimeCode", fullTimeOrPartTimeCode));
        }

        if (primaryWorkLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryWorkLocationCode", primaryWorkLocationCode));
        }

        if (primaryProjectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryProjectCode", primaryProjectCode));
        }

        if (deductionGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deductionGroupCode", deductionGroupCode));
        }

        if (earningGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earningGroupCode", earningGroupCode));
        }

        if (employeeTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeTypeCode", employeeTypeCode));
        }

        if (employeeStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeStatusCode", employeeStatusCode));
        }

        if (employeeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumber", employeeNumber));
        }

        if (supervisorID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supervisorID", supervisorID));
        }

        if (originalHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalHireDate", originalHireDate));
        }

        if (lastHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastHireDate", lastHireDate));
        }

        if (dateOfTermination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfTermination", dateOfTermination));
        }

        if (dateOfRetirement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfRetirement", dateOfRetirement));
        }

        if (dateTimeCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeCreated", dateTimeCreated));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (dateLastPayDatePaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateLastPayDatePaid", dateLastPayDatePaid));
        }

        if (payGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroup", payGroup));
        }

        if (isHomeCompany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHomeCompany", isHomeCompany));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listByCompanyValidateBeforeCall(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listByCompany(Async)");
        }

        return listByCompanyCall(companyId, companyId2, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);

    }


    private ApiResponse<List<EmpEmploymentDetails>> listByCompanyWithHttpInfo(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listByCompanyValidateBeforeCall(companyId, companyId2, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpEmploymentDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listByCompanyAsync(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorID, String originalHireDate, String lastHireDate, String dateOfTermination, String dateOfRetirement, String dateTimeCreated, String dateTimeChanged, String dateLastPayDatePaid, String payGroup, Boolean isHomeCompany, Integer page, Integer perPage, final ApiCallback<List<EmpEmploymentDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listByCompanyValidateBeforeCall(companyId, companyId2, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpEmploymentDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListByCompanyRequestBuilder {
        private final String companyId;
        private String companyId2;
        private String employeeId;
        private String primaryJobCode;
        private String jobTitle;
        private String fullTimeOrPartTimeCode;
        private String primaryWorkLocationCode;
        private String primaryProjectCode;
        private String deductionGroupCode;
        private String earningGroupCode;
        private String employeeTypeCode;
        private String employeeStatusCode;
        private String employeeNumber;
        private String supervisorID;
        private String originalHireDate;
        private String lastHireDate;
        private String dateOfTermination;
        private String dateOfRetirement;
        private String dateTimeCreated;
        private String dateTimeChanged;
        private String dateLastPayDatePaid;
        private String payGroup;
        private Boolean isHomeCompany;
        private Integer page;
        private Integer perPage;

        private ListByCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set companyId2
         * @param companyId2  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder companyId2(String companyId2) {
            this.companyId2 = companyId2;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set primaryJobCode
         * @param primaryJobCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder primaryJobCode(String primaryJobCode) {
            this.primaryJobCode = primaryJobCode;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set fullTimeOrPartTimeCode
         * @param fullTimeOrPartTimeCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
            this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
            return this;
        }
        
        /**
         * Set primaryWorkLocationCode
         * @param primaryWorkLocationCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder primaryWorkLocationCode(String primaryWorkLocationCode) {
            this.primaryWorkLocationCode = primaryWorkLocationCode;
            return this;
        }
        
        /**
         * Set primaryProjectCode
         * @param primaryProjectCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder primaryProjectCode(String primaryProjectCode) {
            this.primaryProjectCode = primaryProjectCode;
            return this;
        }
        
        /**
         * Set deductionGroupCode
         * @param deductionGroupCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder deductionGroupCode(String deductionGroupCode) {
            this.deductionGroupCode = deductionGroupCode;
            return this;
        }
        
        /**
         * Set earningGroupCode
         * @param earningGroupCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder earningGroupCode(String earningGroupCode) {
            this.earningGroupCode = earningGroupCode;
            return this;
        }
        
        /**
         * Set employeeTypeCode
         * @param employeeTypeCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder employeeTypeCode(String employeeTypeCode) {
            this.employeeTypeCode = employeeTypeCode;
            return this;
        }
        
        /**
         * Set employeeStatusCode
         * @param employeeStatusCode  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder employeeStatusCode(String employeeStatusCode) {
            this.employeeStatusCode = employeeStatusCode;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set supervisorID
         * @param supervisorID  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder supervisorID(String supervisorID) {
            this.supervisorID = supervisorID;
            return this;
        }
        
        /**
         * Set originalHireDate
         * @param originalHireDate  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder originalHireDate(String originalHireDate) {
            this.originalHireDate = originalHireDate;
            return this;
        }
        
        /**
         * Set lastHireDate
         * @param lastHireDate  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder lastHireDate(String lastHireDate) {
            this.lastHireDate = lastHireDate;
            return this;
        }
        
        /**
         * Set dateOfTermination
         * @param dateOfTermination  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder dateOfTermination(String dateOfTermination) {
            this.dateOfTermination = dateOfTermination;
            return this;
        }
        
        /**
         * Set dateOfRetirement
         * @param dateOfRetirement  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder dateOfRetirement(String dateOfRetirement) {
            this.dateOfRetirement = dateOfRetirement;
            return this;
        }
        
        /**
         * Set dateTimeCreated
         * @param dateTimeCreated  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder dateTimeCreated(String dateTimeCreated) {
            this.dateTimeCreated = dateTimeCreated;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set dateLastPayDatePaid
         * @param dateLastPayDatePaid  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder dateLastPayDatePaid(String dateLastPayDatePaid) {
            this.dateLastPayDatePaid = dateLastPayDatePaid;
            return this;
        }
        
        /**
         * Set payGroup
         * @param payGroup  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder payGroup(String payGroup) {
            this.payGroup = payGroup;
            return this;
        }
        
        /**
         * Set isHomeCompany
         * @param isHomeCompany  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder isHomeCompany(Boolean isHomeCompany) {
            this.isHomeCompany = isHomeCompany;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return ListByCompanyRequestBuilder
         */
        public ListByCompanyRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listByCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listByCompanyCall(companyId, companyId2, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }


        /**
         * Execute listByCompany request
         * @return List&lt;EmpEmploymentDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpEmploymentDetails> execute() throws ApiException {
            ApiResponse<List<EmpEmploymentDetails>> localVarResp = listByCompanyWithHttpInfo(companyId, companyId2, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listByCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpEmploymentDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpEmploymentDetails>> executeWithHttpInfo() throws ApiException {
            return listByCompanyWithHttpInfo(companyId, companyId2, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
        }

        /**
         * Execute listByCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpEmploymentDetails>> _callback) throws ApiException {
            return listByCompanyAsync(companyId, companyId2, employeeId, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorID, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }
    }

    /**
     * Get Employment Details
     * Get all employment record details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Personnel Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employment-details?dateTimeCreated&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employment-details?dateTimeCreated&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employment-details?dateTimeCreated&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employment-details?dateTimeCreated&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param companyId  (required)
     * @return ListByCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
     </table>
     */
    public ListByCompanyRequestBuilder listByCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListByCompanyRequestBuilder(companyId);
    }
}
