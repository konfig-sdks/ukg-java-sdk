/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.MultiStatusResponse;
import com.konfigthis.client.model.PtoPlansBodyInner;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PtoPlanPostApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PtoPlanPostApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PtoPlanPostApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call ultiproRecordCall(List<PtoPlansBodyInner> ptoPlansBodyInner, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ptoPlansBodyInner;

        // create path and map variables
        String localVarPath = "/personnel/v1/pto-plans";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call ultiproRecordValidateBeforeCall(List<PtoPlansBodyInner> ptoPlansBodyInner, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ptoPlansBodyInner' is set
        if (ptoPlansBodyInner == null) {
            throw new ApiException("Missing the required parameter 'ptoPlansBodyInner' when calling ultiproRecord(Async)");
        }

        return ultiproRecordCall(ptoPlansBodyInner, _callback);

    }


    private ApiResponse<MultiStatusResponse> ultiproRecordWithHttpInfo(List<PtoPlansBodyInner> ptoPlansBodyInner) throws ApiException {
        okhttp3.Call localVarCall = ultiproRecordValidateBeforeCall(ptoPlansBodyInner, null);
        Type localVarReturnType = new TypeToken<MultiStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call ultiproRecordAsync(List<PtoPlansBodyInner> ptoPlansBodyInner, final ApiCallback<MultiStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = ultiproRecordValidateBeforeCall(ptoPlansBodyInner, _callback);
        Type localVarReturnType = new TypeToken<MultiStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UltiproRecordRequestBuilder {
        private List<PtoPlansBodyInner> ptoPlansBodyInner;

        private UltiproRecordRequestBuilder() {
        }

        /**
         * Set ptoPlansBodyInner
         * @param ptoPlansBodyInner The pto-plan to be written (optional)
         * @return UltiproRecordRequestBuilder
         */
        public UltiproRecordRequestBuilder ptoPlansBodyInner(List<PtoPlansBodyInner> ptoPlansBodyInner) {
            this.ptoPlansBodyInner = ptoPlansBodyInner;
            return this;
        }

        /**
         * Build call for ultiproRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<PtoPlansBodyInner> ptoPlansBodyInner = buildBodyParams();
            return ultiproRecordCall(ptoPlansBodyInner, _callback);
        }

        private List<PtoPlansBodyInner> buildBodyParams() {
            return this.ptoPlansBodyInner;
        }

        /**
         * Execute ultiproRecord request
         * @return MultiStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public MultiStatusResponse execute() throws ApiException {
            List<PtoPlansBodyInner> ptoPlansBodyInner = buildBodyParams();
            ApiResponse<MultiStatusResponse> localVarResp = ultiproRecordWithHttpInfo(ptoPlansBodyInner);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute ultiproRecord request with HTTP info returned
         * @return ApiResponse&lt;MultiStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<MultiStatusResponse> executeWithHttpInfo() throws ApiException {
            List<PtoPlansBodyInner> ptoPlansBodyInner = buildBodyParams();
            return ultiproRecordWithHttpInfo(ptoPlansBodyInner);
        }

        /**
         * Execute ultiproRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<MultiStatusResponse> _callback) throws ApiException {
            List<PtoPlansBodyInner> ptoPlansBodyInner = buildBodyParams();
            return ultiproRecordAsync(ptoPlansBodyInner, _callback);
        }
    }

    /**
     * Create A PTO Plan
     * Creates a new UltiPro PTO plan record. Array of objects is permitted for multi-records support. Work Flow or Approvers is not supported. Permissions - Ultipro service account must have \&quot;Add\&quot; role for the \&quot;PTO Plan Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @param ptoPlansBodyInner The pto-plan to be written (required)
     * @return UltiproRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
     </table>
     */
    public UltiproRecordRequestBuilder ultiproRecord() throws IllegalArgumentException {
        return new UltiproRecordRequestBuilder();
    }
}
