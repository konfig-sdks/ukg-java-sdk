/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BusinessRuleFileUpload;
import com.konfigthis.client.model.BusinessRuleImportFileStaging;
import com.konfigthis.client.model.BusinessRuleImportFileStagingStatus;
import com.konfigthis.client.model.BusinessRuleImportRequest;
import com.konfigthis.client.model.FileStatusModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class BusinessRuleImportToolApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public BusinessRuleImportToolApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public BusinessRuleImportToolApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call businessRuleImportFileUploadCall(BusinessRuleImportRequest businessRuleImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessRuleImportRequest;

        // create path and map variables
        String localVarPath = "/configuration/v1/businessruleimport-tool/fileupload";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call businessRuleImportFileUploadValidateBeforeCall(BusinessRuleImportRequest businessRuleImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessRuleImportRequest' is set
        if (businessRuleImportRequest == null) {
            throw new ApiException("Missing the required parameter 'businessRuleImportRequest' when calling businessRuleImportFileUpload(Async)");
        }

        return businessRuleImportFileUploadCall(businessRuleImportRequest, _callback);

    }


    private ApiResponse<Object> businessRuleImportFileUploadWithHttpInfo(BusinessRuleImportRequest businessRuleImportRequest) throws ApiException {
        okhttp3.Call localVarCall = businessRuleImportFileUploadValidateBeforeCall(businessRuleImportRequest, null);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call businessRuleImportFileUploadAsync(BusinessRuleImportRequest businessRuleImportRequest, final ApiCallback<Object> _callback) throws ApiException {

        okhttp3.Call localVarCall = businessRuleImportFileUploadValidateBeforeCall(businessRuleImportRequest, _callback);
        Type localVarReturnType = new TypeToken<Object>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class BusinessRuleImportFileUploadRequestBuilder {
        private String transaction;
        private String uniqueFileName;

        private BusinessRuleImportFileUploadRequestBuilder() {
        }

        /**
         * Set transaction
         * @param transaction The XML Serialized transaction (optional)
         * @return BusinessRuleImportFileUploadRequestBuilder
         */
        public BusinessRuleImportFileUploadRequestBuilder transaction(String transaction) {
            this.transaction = transaction;
            return this;
        }
        
        /**
         * Set uniqueFileName
         * @param uniqueFileName An optionally provided unique file name (optional)
         * @return BusinessRuleImportFileUploadRequestBuilder
         */
        public BusinessRuleImportFileUploadRequestBuilder uniqueFileName(String uniqueFileName) {
            this.uniqueFileName = uniqueFileName;
            return this;
        }
        
        /**
         * Build call for businessRuleImportFileUpload
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            return businessRuleImportFileUploadCall(businessRuleImportRequest, _callback);
        }

        private BusinessRuleImportRequest buildBodyParams() {
            BusinessRuleImportRequest businessRuleImportRequest = new BusinessRuleImportRequest();
            businessRuleImportRequest.transaction(this.transaction);
            businessRuleImportRequest.uniqueFileName(this.uniqueFileName);
            return businessRuleImportRequest;
        }

        /**
         * Execute businessRuleImportFileUpload request
         * @return Object
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public Object execute() throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            ApiResponse<Object> localVarResp = businessRuleImportFileUploadWithHttpInfo(businessRuleImportRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute businessRuleImportFileUpload request with HTTP info returned
         * @return ApiResponse&lt;Object&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Object> executeWithHttpInfo() throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            return businessRuleImportFileUploadWithHttpInfo(businessRuleImportRequest);
        }

        /**
         * Execute businessRuleImportFileUpload request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Object> _callback) throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            return businessRuleImportFileUploadAsync(businessRuleImportRequest, _callback);
        }
    }

    /**
     * Takes an XML transaction and feeds it into the Business Rule Import Tool
     * 
     * @param businessRuleImportRequest  (required)
     * @return BusinessRuleImportFileUploadRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public BusinessRuleImportFileUploadRequestBuilder businessRuleImportFileUpload() throws IllegalArgumentException {
        return new BusinessRuleImportFileUploadRequestBuilder();
    }
    private okhttp3.Call getFileUploadStatusCall(String fileId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/v1/businessruleimport-tool/filestatus/{fileId}"
            .replace("{" + "fileId" + "}", localVarApiClient.escapeString(fileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getFileUploadStatusValidateBeforeCall(String fileId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'fileId' is set
        if (fileId == null) {
            throw new ApiException("Missing the required parameter 'fileId' when calling getFileUploadStatus(Async)");
        }

        return getFileUploadStatusCall(fileId, _callback);

    }


    private ApiResponse<FileStatusModel> getFileUploadStatusWithHttpInfo(String fileId) throws ApiException {
        okhttp3.Call localVarCall = getFileUploadStatusValidateBeforeCall(fileId, null);
        Type localVarReturnType = new TypeToken<FileStatusModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getFileUploadStatusAsync(String fileId, final ApiCallback<FileStatusModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getFileUploadStatusValidateBeforeCall(fileId, _callback);
        Type localVarReturnType = new TypeToken<FileStatusModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetFileUploadStatusRequestBuilder {
        private final String fileId;

        private GetFileUploadStatusRequestBuilder(String fileId) {
            this.fileId = fileId;
        }

        /**
         * Build call for getFileUploadStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getFileUploadStatusCall(fileId, _callback);
        }


        /**
         * Execute getFileUploadStatus request
         * @return FileStatusModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public FileStatusModel execute() throws ApiException {
            ApiResponse<FileStatusModel> localVarResp = getFileUploadStatusWithHttpInfo(fileId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getFileUploadStatus request with HTTP info returned
         * @return ApiResponse&lt;FileStatusModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<FileStatusModel> executeWithHttpInfo() throws ApiException {
            return getFileUploadStatusWithHttpInfo(fileId);
        }

        /**
         * Execute getFileUploadStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<FileStatusModel> _callback) throws ApiException {
            return getFileUploadStatusAsync(fileId, _callback);
        }
    }

    /**
     * Retrieves the status of an Business Rule Import Tool transaction
     * 
     * @param fileId  (required)
     * @return GetFileUploadStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public GetFileUploadStatusRequestBuilder getFileUploadStatus(String fileId) throws IllegalArgumentException {
        if (fileId == null) throw new IllegalArgumentException("\"fileId\" is required but got null");
            

        return new GetFileUploadStatusRequestBuilder(fileId);
    }
    private okhttp3.Call getStagingStatusCall(String stagingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/v1/businessruleimport-tool/transactionstatus/{stagingId}"
            .replace("{" + "stagingId" + "}", localVarApiClient.escapeString(stagingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStagingStatusValidateBeforeCall(String stagingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stagingId' is set
        if (stagingId == null) {
            throw new ApiException("Missing the required parameter 'stagingId' when calling getStagingStatus(Async)");
        }

        return getStagingStatusCall(stagingId, _callback);

    }


    private ApiResponse<BusinessRuleImportFileStagingStatus> getStagingStatusWithHttpInfo(String stagingId) throws ApiException {
        okhttp3.Call localVarCall = getStagingStatusValidateBeforeCall(stagingId, null);
        Type localVarReturnType = new TypeToken<BusinessRuleImportFileStagingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStagingStatusAsync(String stagingId, final ApiCallback<BusinessRuleImportFileStagingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStagingStatusValidateBeforeCall(stagingId, _callback);
        Type localVarReturnType = new TypeToken<BusinessRuleImportFileStagingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStagingStatusRequestBuilder {
        private final String stagingId;

        private GetStagingStatusRequestBuilder(String stagingId) {
            this.stagingId = stagingId;
        }

        /**
         * Build call for getStagingStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStagingStatusCall(stagingId, _callback);
        }


        /**
         * Execute getStagingStatus request
         * @return BusinessRuleImportFileStagingStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public BusinessRuleImportFileStagingStatus execute() throws ApiException {
            ApiResponse<BusinessRuleImportFileStagingStatus> localVarResp = getStagingStatusWithHttpInfo(stagingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStagingStatus request with HTTP info returned
         * @return ApiResponse&lt;BusinessRuleImportFileStagingStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessRuleImportFileStagingStatus> executeWithHttpInfo() throws ApiException {
            return getStagingStatusWithHttpInfo(stagingId);
        }

        /**
         * Execute getStagingStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessRuleImportFileStagingStatus> _callback) throws ApiException {
            return getStagingStatusAsync(stagingId, _callback);
        }
    }

    /**
     * Retrieves the status of an Business Rule Import Tool transaction
     * 
     * @param stagingId  (required)
     * @return GetStagingStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public GetStagingStatusRequestBuilder getStagingStatus(String stagingId) throws IllegalArgumentException {
        if (stagingId == null) throw new IllegalArgumentException("\"stagingId\" is required but got null");
            

        return new GetStagingStatusRequestBuilder(stagingId);
    }
    private okhttp3.Call importsBusinessRuleStagingDataCall(BusinessRuleImportRequest businessRuleImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = businessRuleImportRequest;

        // create path and map variables
        String localVarPath = "/configuration/v1/businessruleimport-tool/transaction";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call importsBusinessRuleStagingDataValidateBeforeCall(BusinessRuleImportRequest businessRuleImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'businessRuleImportRequest' is set
        if (businessRuleImportRequest == null) {
            throw new ApiException("Missing the required parameter 'businessRuleImportRequest' when calling importsBusinessRuleStagingData(Async)");
        }

        return importsBusinessRuleStagingDataCall(businessRuleImportRequest, _callback);

    }


    private ApiResponse<BusinessRuleImportFileStaging> importsBusinessRuleStagingDataWithHttpInfo(BusinessRuleImportRequest businessRuleImportRequest) throws ApiException {
        okhttp3.Call localVarCall = importsBusinessRuleStagingDataValidateBeforeCall(businessRuleImportRequest, null);
        Type localVarReturnType = new TypeToken<BusinessRuleImportFileStaging>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call importsBusinessRuleStagingDataAsync(BusinessRuleImportRequest businessRuleImportRequest, final ApiCallback<BusinessRuleImportFileStaging> _callback) throws ApiException {

        okhttp3.Call localVarCall = importsBusinessRuleStagingDataValidateBeforeCall(businessRuleImportRequest, _callback);
        Type localVarReturnType = new TypeToken<BusinessRuleImportFileStaging>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ImportsBusinessRuleStagingDataRequestBuilder {
        private String transaction;
        private String uniqueFileName;

        private ImportsBusinessRuleStagingDataRequestBuilder() {
        }

        /**
         * Set transaction
         * @param transaction The XML Serialized transaction (optional)
         * @return ImportsBusinessRuleStagingDataRequestBuilder
         */
        public ImportsBusinessRuleStagingDataRequestBuilder transaction(String transaction) {
            this.transaction = transaction;
            return this;
        }
        
        /**
         * Set uniqueFileName
         * @param uniqueFileName An optionally provided unique file name (optional)
         * @return ImportsBusinessRuleStagingDataRequestBuilder
         */
        public ImportsBusinessRuleStagingDataRequestBuilder uniqueFileName(String uniqueFileName) {
            this.uniqueFileName = uniqueFileName;
            return this;
        }
        
        /**
         * Build call for importsBusinessRuleStagingData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            return importsBusinessRuleStagingDataCall(businessRuleImportRequest, _callback);
        }

        private BusinessRuleImportRequest buildBodyParams() {
            BusinessRuleImportRequest businessRuleImportRequest = new BusinessRuleImportRequest();
            businessRuleImportRequest.transaction(this.transaction);
            businessRuleImportRequest.uniqueFileName(this.uniqueFileName);
            return businessRuleImportRequest;
        }

        /**
         * Execute importsBusinessRuleStagingData request
         * @return BusinessRuleImportFileStaging
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public BusinessRuleImportFileStaging execute() throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            ApiResponse<BusinessRuleImportFileStaging> localVarResp = importsBusinessRuleStagingDataWithHttpInfo(businessRuleImportRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute importsBusinessRuleStagingData request with HTTP info returned
         * @return ApiResponse&lt;BusinessRuleImportFileStaging&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BusinessRuleImportFileStaging> executeWithHttpInfo() throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            return importsBusinessRuleStagingDataWithHttpInfo(businessRuleImportRequest);
        }

        /**
         * Execute importsBusinessRuleStagingData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BusinessRuleImportFileStaging> _callback) throws ApiException {
            BusinessRuleImportRequest businessRuleImportRequest = buildBodyParams();
            return importsBusinessRuleStagingDataAsync(businessRuleImportRequest, _callback);
        }
    }

    /**
     * Takes an XML transaction and feeds it into the Business Rule Import Tool (Staging)
     * 
     * @param businessRuleImportRequest  (required)
     * @return ImportsBusinessRuleStagingDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ImportsBusinessRuleStagingDataRequestBuilder importsBusinessRuleStagingData() throws IllegalArgumentException {
        return new ImportsBusinessRuleStagingDataRequestBuilder();
    }
}
