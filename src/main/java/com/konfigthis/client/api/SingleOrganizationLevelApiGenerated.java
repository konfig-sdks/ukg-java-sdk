/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.OrgLevels;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class SingleOrganizationLevelApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public SingleOrganizationLevelApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public SingleOrganizationLevelApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getCall(String level, String code, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/v1/org-levels/{level}/{code}"
            .replace("{" + "level" + "}", localVarApiClient.escapeString(level.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getValidateBeforeCall(String level, String code, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'level' is set
        if (level == null) {
            throw new ApiException("Missing the required parameter 'level' when calling get(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling get(Async)");
        }

        return getCall(level, code, _callback);

    }


    private ApiResponse<OrgLevels> getWithHttpInfo(String level, String code) throws ApiException {
        okhttp3.Call localVarCall = getValidateBeforeCall(level, code, null);
        Type localVarReturnType = new TypeToken<OrgLevels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAsync(String level, String code, final ApiCallback<OrgLevels> _callback) throws ApiException {

        okhttp3.Call localVarCall = getValidateBeforeCall(level, code, _callback);
        Type localVarReturnType = new TypeToken<OrgLevels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetRequestBuilder {
        private final String level;
        private final String code;

        private GetRequestBuilder(String level, String code) {
            this.level = level;
            this.code = code;
        }

        /**
         * Build call for get
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getCall(level, code, _callback);
        }


        /**
         * Execute get request
         * @return OrgLevels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public OrgLevels execute() throws ApiException {
            ApiResponse<OrgLevels> localVarResp = getWithHttpInfo(level, code);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute get request with HTTP info returned
         * @return ApiResponse&lt;OrgLevels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgLevels> executeWithHttpInfo() throws ApiException {
            return getWithHttpInfo(level, code);
        }

        /**
         * Execute get request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgLevels> _callback) throws ApiException {
            return getAsync(level, code, _callback);
        }
    }

    /**
     * Get single org-level
     * The org-levels endpoint returns information about the UltiPro organizational level configurations. The unique identifier for an org-levels configuration, is level and code properties concatenated, therefore both values are needed. Permissions - Ultipro service account must have \&quot;View\&quot; role for the \&quot;Company Configuration Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @param level Description of the org-level. (required)
     * @param code Organization code. (required)
     * @return GetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
     </table>
     */
    public GetRequestBuilder get(String level, String code) throws IllegalArgumentException {
        if (level == null) throw new IllegalArgumentException("\"level\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new GetRequestBuilder(level, code);
    }
    private okhttp3.Call updateOrgLevelCall(String level, String code, OrgLevels orgLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgLevels;

        // create path and map variables
        String localVarPath = "/configuration/v1/org-levels/{level}/{code}"
            .replace("{" + "level" + "}", localVarApiClient.escapeString(level.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateOrgLevelValidateBeforeCall(String level, String code, OrgLevels orgLevels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'level' is set
        if (level == null) {
            throw new ApiException("Missing the required parameter 'level' when calling updateOrgLevel(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateOrgLevel(Async)");
        }

        // verify the required parameter 'orgLevels' is set
        if (orgLevels == null) {
            throw new ApiException("Missing the required parameter 'orgLevels' when calling updateOrgLevel(Async)");
        }

        return updateOrgLevelCall(level, code, orgLevels, _callback);

    }


    private ApiResponse<OrgLevels> updateOrgLevelWithHttpInfo(String level, String code, OrgLevels orgLevels) throws ApiException {
        okhttp3.Call localVarCall = updateOrgLevelValidateBeforeCall(level, code, orgLevels, null);
        Type localVarReturnType = new TypeToken<OrgLevels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateOrgLevelAsync(String level, String code, OrgLevels orgLevels, final ApiCallback<OrgLevels> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateOrgLevelValidateBeforeCall(level, code, orgLevels, _callback);
        Type localVarReturnType = new TypeToken<OrgLevels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateOrgLevelRequestBuilder {
        private final String description;
        private final String code;
        private final Double level;
        private final String level;
        private final String code;
        private String budgetGroup;
        private Double currentYearBudgetFTE;
        private Double currentYearBudgetSalary;
        private String glSegment;
        private Double lastYearBudgetFTE;
        private Double lastYearBudgetSalary;
        private String levelDescription;
        private String reportingCategory;
        private Boolean isActive;

        private UpdateOrgLevelRequestBuilder(String description, String code, double level, String level, String code) {
            this.description = description;
            this.code = code;
            this.level = level;
            this.level = level;
            this.code = code;
        }

        /**
         * Set budgetGroup
         * @param budgetGroup Organizational budget group. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder budgetGroup(String budgetGroup) {
            this.budgetGroup = budgetGroup;
            return this;
        }
        
        /**
         * Set currentYearBudgetFTE
         * @param currentYearBudgetFTE Current year to date budget for full time employee. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder currentYearBudgetFTE(Double currentYearBudgetFTE) {
            this.currentYearBudgetFTE = currentYearBudgetFTE;
            return this;
        }
        
        /**
         * Set currentYearBudgetSalary
         * @param currentYearBudgetSalary Current year to date budget for salary. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder currentYearBudgetSalary(Double currentYearBudgetSalary) {
            this.currentYearBudgetSalary = currentYearBudgetSalary;
            return this;
        }
        
        /**
         * Set glSegment
         * @param glSegment General Ledger Segment. Alpha-numeric and special characters allowed. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder glSegment(String glSegment) {
            this.glSegment = glSegment;
            return this;
        }
        
        /**
         * Set lastYearBudgetFTE
         * @param lastYearBudgetFTE Last year Budget for full time employee. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder lastYearBudgetFTE(Double lastYearBudgetFTE) {
            this.lastYearBudgetFTE = lastYearBudgetFTE;
            return this;
        }
        
        /**
         * Set lastYearBudgetSalary
         * @param lastYearBudgetSalary Last year Budget salary. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder lastYearBudgetSalary(Double lastYearBudgetSalary) {
            this.lastYearBudgetSalary = lastYearBudgetSalary;
            return this;
        }
        
        /**
         * Set levelDescription
         * @param levelDescription Organization description. Cannot be updated. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder levelDescription(String levelDescription) {
            this.levelDescription = levelDescription;
            return this;
        }
        
        /**
         * Set reportingCategory
         * @param reportingCategory The reporting category code. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder reportingCategory(String reportingCategory) {
            this.reportingCategory = reportingCategory;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive The organization level status. (optional)
         * @return UpdateOrgLevelRequestBuilder
         */
        public UpdateOrgLevelRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Build call for updateOrgLevel
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            return updateOrgLevelCall(level, code, orgLevels, _callback);
        }

        private OrgLevels buildBodyParams() {
            OrgLevels orgLevels = new OrgLevels();
            orgLevels.description(this.description);
            orgLevels.budgetGroup(this.budgetGroup);
            orgLevels.code(this.code);
            orgLevels.currentYearBudgetFTE(this.currentYearBudgetFTE);
            orgLevels.currentYearBudgetSalary(this.currentYearBudgetSalary);
            orgLevels.glSegment(this.glSegment);
            orgLevels.lastYearBudgetFTE(this.lastYearBudgetFTE);
            orgLevels.lastYearBudgetSalary(this.lastYearBudgetSalary);
            orgLevels.level(this.level);
            orgLevels.levelDescription(this.levelDescription);
            orgLevels.reportingCategory(this.reportingCategory);
            orgLevels.isActive(this.isActive);
            return orgLevels;
        }

        /**
         * Execute updateOrgLevel request
         * @return OrgLevels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public OrgLevels execute() throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            ApiResponse<OrgLevels> localVarResp = updateOrgLevelWithHttpInfo(level, code, orgLevels);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateOrgLevel request with HTTP info returned
         * @return ApiResponse&lt;OrgLevels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgLevels> executeWithHttpInfo() throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            return updateOrgLevelWithHttpInfo(level, code, orgLevels);
        }

        /**
         * Execute updateOrgLevel request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgLevels> _callback) throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            return updateOrgLevelAsync(level, code, orgLevels, _callback);
        }
    }

    /**
     * Update one org-level
     * Allows the ability update a single organizational level configuration. Permissions - Ultipro service account must have \&quot;Edit\&quot; role for the \&quot;Company Configuration Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @param level Description of the org-level. (required)
     * @param code Organization code. (required)
     * @param orgLevels The org-level to be written. (required)
     * @return UpdateOrgLevelRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
     </table>
     */
    public UpdateOrgLevelRequestBuilder updateOrgLevel(String description, String code, double level, String level, String code) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        
        if (level == null) throw new IllegalArgumentException("\"level\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new UpdateOrgLevelRequestBuilder(description, code, level, level, code);
    }
    private okhttp3.Call updatePropertiesCall(String level, String code, OrgLevels orgLevels, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = orgLevels;

        // create path and map variables
        String localVarPath = "/configuration/v1/org-levels/{level}/{code}"
            .replace("{" + "level" + "}", localVarApiClient.escapeString(level.toString()))
            .replace("{" + "code" + "}", localVarApiClient.escapeString(code.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updatePropertiesValidateBeforeCall(String level, String code, OrgLevels orgLevels, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'level' is set
        if (level == null) {
            throw new ApiException("Missing the required parameter 'level' when calling updateProperties(Async)");
        }

        // verify the required parameter 'code' is set
        if (code == null) {
            throw new ApiException("Missing the required parameter 'code' when calling updateProperties(Async)");
        }

        // verify the required parameter 'orgLevels' is set
        if (orgLevels == null) {
            throw new ApiException("Missing the required parameter 'orgLevels' when calling updateProperties(Async)");
        }

        return updatePropertiesCall(level, code, orgLevels, _callback);

    }


    private ApiResponse<OrgLevels> updatePropertiesWithHttpInfo(String level, String code, OrgLevels orgLevels) throws ApiException {
        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(level, code, orgLevels, null);
        Type localVarReturnType = new TypeToken<OrgLevels>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updatePropertiesAsync(String level, String code, OrgLevels orgLevels, final ApiCallback<OrgLevels> _callback) throws ApiException {

        okhttp3.Call localVarCall = updatePropertiesValidateBeforeCall(level, code, orgLevels, _callback);
        Type localVarReturnType = new TypeToken<OrgLevels>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdatePropertiesRequestBuilder {
        private final String description;
        private final String code;
        private final Double level;
        private final String level;
        private final String code;
        private String budgetGroup;
        private Double currentYearBudgetFTE;
        private Double currentYearBudgetSalary;
        private String glSegment;
        private Double lastYearBudgetFTE;
        private Double lastYearBudgetSalary;
        private String levelDescription;
        private String reportingCategory;
        private Boolean isActive;

        private UpdatePropertiesRequestBuilder(String description, String code, double level, String level, String code) {
            this.description = description;
            this.code = code;
            this.level = level;
            this.level = level;
            this.code = code;
        }

        /**
         * Set budgetGroup
         * @param budgetGroup Organizational budget group. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder budgetGroup(String budgetGroup) {
            this.budgetGroup = budgetGroup;
            return this;
        }
        
        /**
         * Set currentYearBudgetFTE
         * @param currentYearBudgetFTE Current year to date budget for full time employee. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder currentYearBudgetFTE(Double currentYearBudgetFTE) {
            this.currentYearBudgetFTE = currentYearBudgetFTE;
            return this;
        }
        
        /**
         * Set currentYearBudgetSalary
         * @param currentYearBudgetSalary Current year to date budget for salary. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder currentYearBudgetSalary(Double currentYearBudgetSalary) {
            this.currentYearBudgetSalary = currentYearBudgetSalary;
            return this;
        }
        
        /**
         * Set glSegment
         * @param glSegment General Ledger Segment. Alpha-numeric and special characters allowed. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder glSegment(String glSegment) {
            this.glSegment = glSegment;
            return this;
        }
        
        /**
         * Set lastYearBudgetFTE
         * @param lastYearBudgetFTE Last year Budget for full time employee. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder lastYearBudgetFTE(Double lastYearBudgetFTE) {
            this.lastYearBudgetFTE = lastYearBudgetFTE;
            return this;
        }
        
        /**
         * Set lastYearBudgetSalary
         * @param lastYearBudgetSalary Last year Budget salary. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder lastYearBudgetSalary(Double lastYearBudgetSalary) {
            this.lastYearBudgetSalary = lastYearBudgetSalary;
            return this;
        }
        
        /**
         * Set levelDescription
         * @param levelDescription Organization description. Cannot be updated. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder levelDescription(String levelDescription) {
            this.levelDescription = levelDescription;
            return this;
        }
        
        /**
         * Set reportingCategory
         * @param reportingCategory The reporting category code. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder reportingCategory(String reportingCategory) {
            this.reportingCategory = reportingCategory;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive The organization level status. (optional)
         * @return UpdatePropertiesRequestBuilder
         */
        public UpdatePropertiesRequestBuilder isActive(Boolean isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Build call for updateProperties
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            return updatePropertiesCall(level, code, orgLevels, _callback);
        }

        private OrgLevels buildBodyParams() {
            OrgLevels orgLevels = new OrgLevels();
            orgLevels.description(this.description);
            orgLevels.budgetGroup(this.budgetGroup);
            orgLevels.code(this.code);
            orgLevels.currentYearBudgetFTE(this.currentYearBudgetFTE);
            orgLevels.currentYearBudgetSalary(this.currentYearBudgetSalary);
            orgLevels.glSegment(this.glSegment);
            orgLevels.lastYearBudgetFTE(this.lastYearBudgetFTE);
            orgLevels.lastYearBudgetSalary(this.lastYearBudgetSalary);
            orgLevels.level(this.level);
            orgLevels.levelDescription(this.levelDescription);
            orgLevels.reportingCategory(this.reportingCategory);
            orgLevels.isActive(this.isActive);
            return orgLevels;
        }

        /**
         * Execute updateProperties request
         * @return OrgLevels
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public OrgLevels execute() throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            ApiResponse<OrgLevels> localVarResp = updatePropertiesWithHttpInfo(level, code, orgLevels);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateProperties request with HTTP info returned
         * @return ApiResponse&lt;OrgLevels&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<OrgLevels> executeWithHttpInfo() throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            return updatePropertiesWithHttpInfo(level, code, orgLevels);
        }

        /**
         * Execute updateProperties request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<OrgLevels> _callback) throws ApiException {
            OrgLevels orgLevels = buildBodyParams();
            return updatePropertiesAsync(level, code, orgLevels, _callback);
        }
    }

    /**
     * Patch one org-level
     * Allows the ability update one or more properties of a single org-level configuration. Permissions - Ultipro service account must have \&quot;Edit\&quot; role for the \&quot;Company Configuration Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @param level Description of the org-level. (required)
     * @param code Organization code. (required)
     * @param orgLevels The org-level to be written. (required)
     * @return UpdatePropertiesRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
     </table>
     */
    public UpdatePropertiesRequestBuilder updateProperties(String description, String code, double level, String level, String code) throws IllegalArgumentException {
        if (description == null) throw new IllegalArgumentException("\"description\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        
        if (level == null) throw new IllegalArgumentException("\"level\" is required but got null");
            

        if (code == null) throw new IllegalArgumentException("\"code\" is required but got null");
            

        return new UpdatePropertiesRequestBuilder(description, code, level, level, code);
    }
}
