/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeEmploymentDetails;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeEmploymentDetailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeEmploymentDetailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeEmploymentDetailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getDetailsCall(String companyID, String employeeID, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorId, OffsetDateTime originalHireDate, OffsetDateTime lastHireDate, OffsetDateTime dateOfTermination, OffsetDateTime dateOfRetirement, OffsetDateTime dateTimeCreated, OffsetDateTime dateTimeChanged, OffsetDateTime dateLastPayDatePaid, String payGroup, String isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/employee-employment-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyID", companyID));
        }

        if (employeeID != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeID", employeeID));
        }

        if (primaryJobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryJobCode", primaryJobCode));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (fullTimeOrPartTimeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullTimeOrPartTimeCode", fullTimeOrPartTimeCode));
        }

        if (primaryWorkLocationCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryWorkLocationCode", primaryWorkLocationCode));
        }

        if (primaryProjectCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryProjectCode", primaryProjectCode));
        }

        if (deductionGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("deductionGroupCode", deductionGroupCode));
        }

        if (earningGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earningGroupCode", earningGroupCode));
        }

        if (employeeTypeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeTypeCode", employeeTypeCode));
        }

        if (employeeStatusCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeStatusCode", employeeStatusCode));
        }

        if (employeeNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeNumber", employeeNumber));
        }

        if (supervisorId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("supervisorId", supervisorId));
        }

        if (originalHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("originalHireDate", originalHireDate));
        }

        if (lastHireDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastHireDate", lastHireDate));
        }

        if (dateOfTermination != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfTermination", dateOfTermination));
        }

        if (dateOfRetirement != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfRetirement", dateOfRetirement));
        }

        if (dateTimeCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeCreated", dateTimeCreated));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (dateLastPayDatePaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateLastPayDatePaid", dateLastPayDatePaid));
        }

        if (payGroup != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroup", payGroup));
        }

        if (isHomeCompany != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHomeCompany", isHomeCompany));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getDetailsValidateBeforeCall(String companyID, String employeeID, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorId, OffsetDateTime originalHireDate, OffsetDateTime lastHireDate, OffsetDateTime dateOfTermination, OffsetDateTime dateOfRetirement, OffsetDateTime dateTimeCreated, OffsetDateTime dateTimeChanged, OffsetDateTime dateLastPayDatePaid, String payGroup, String isHomeCompany, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getDetailsCall(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);

    }


    private ApiResponse<List<EmployeeEmploymentDetails>> getDetailsWithHttpInfo(String companyID, String employeeID, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorId, OffsetDateTime originalHireDate, OffsetDateTime lastHireDate, OffsetDateTime dateOfTermination, OffsetDateTime dateOfRetirement, OffsetDateTime dateTimeCreated, OffsetDateTime dateTimeChanged, OffsetDateTime dateLastPayDatePaid, String payGroup, String isHomeCompany, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmployeeEmploymentDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getDetailsAsync(String companyID, String employeeID, String primaryJobCode, String jobTitle, String fullTimeOrPartTimeCode, String primaryWorkLocationCode, String primaryProjectCode, String deductionGroupCode, String earningGroupCode, String employeeTypeCode, String employeeStatusCode, String employeeNumber, String supervisorId, OffsetDateTime originalHireDate, OffsetDateTime lastHireDate, OffsetDateTime dateOfTermination, OffsetDateTime dateOfRetirement, OffsetDateTime dateTimeCreated, OffsetDateTime dateTimeChanged, OffsetDateTime dateLastPayDatePaid, String payGroup, String isHomeCompany, Integer page, Integer perPage, final ApiCallback<List<EmployeeEmploymentDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getDetailsValidateBeforeCall(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeEmploymentDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetDetailsRequestBuilder {
        private String companyID;
        private String employeeID;
        private String primaryJobCode;
        private String jobTitle;
        private String fullTimeOrPartTimeCode;
        private String primaryWorkLocationCode;
        private String primaryProjectCode;
        private String deductionGroupCode;
        private String earningGroupCode;
        private String employeeTypeCode;
        private String employeeStatusCode;
        private String employeeNumber;
        private String supervisorId;
        private OffsetDateTime originalHireDate;
        private OffsetDateTime lastHireDate;
        private OffsetDateTime dateOfTermination;
        private OffsetDateTime dateOfRetirement;
        private OffsetDateTime dateTimeCreated;
        private OffsetDateTime dateTimeChanged;
        private OffsetDateTime dateLastPayDatePaid;
        private String payGroup;
        private String isHomeCompany;
        private Integer page;
        private Integer perPage;

        private GetDetailsRequestBuilder() {
        }

        /**
         * Set companyID
         * @param companyID  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder companyID(String companyID) {
            this.companyID = companyID;
            return this;
        }
        
        /**
         * Set employeeID
         * @param employeeID  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeID(String employeeID) {
            this.employeeID = employeeID;
            return this;
        }
        
        /**
         * Set primaryJobCode
         * @param primaryJobCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder primaryJobCode(String primaryJobCode) {
            this.primaryJobCode = primaryJobCode;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set fullTimeOrPartTimeCode
         * @param fullTimeOrPartTimeCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
            this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
            return this;
        }
        
        /**
         * Set primaryWorkLocationCode
         * @param primaryWorkLocationCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder primaryWorkLocationCode(String primaryWorkLocationCode) {
            this.primaryWorkLocationCode = primaryWorkLocationCode;
            return this;
        }
        
        /**
         * Set primaryProjectCode
         * @param primaryProjectCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder primaryProjectCode(String primaryProjectCode) {
            this.primaryProjectCode = primaryProjectCode;
            return this;
        }
        
        /**
         * Set deductionGroupCode
         * @param deductionGroupCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder deductionGroupCode(String deductionGroupCode) {
            this.deductionGroupCode = deductionGroupCode;
            return this;
        }
        
        /**
         * Set earningGroupCode
         * @param earningGroupCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder earningGroupCode(String earningGroupCode) {
            this.earningGroupCode = earningGroupCode;
            return this;
        }
        
        /**
         * Set employeeTypeCode
         * @param employeeTypeCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeTypeCode(String employeeTypeCode) {
            this.employeeTypeCode = employeeTypeCode;
            return this;
        }
        
        /**
         * Set employeeStatusCode
         * @param employeeStatusCode  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeStatusCode(String employeeStatusCode) {
            this.employeeStatusCode = employeeStatusCode;
            return this;
        }
        
        /**
         * Set employeeNumber
         * @param employeeNumber  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder employeeNumber(String employeeNumber) {
            this.employeeNumber = employeeNumber;
            return this;
        }
        
        /**
         * Set supervisorId
         * @param supervisorId  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder supervisorId(String supervisorId) {
            this.supervisorId = supervisorId;
            return this;
        }
        
        /**
         * Set originalHireDate
         * @param originalHireDate  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder originalHireDate(OffsetDateTime originalHireDate) {
            this.originalHireDate = originalHireDate;
            return this;
        }
        
        /**
         * Set lastHireDate
         * @param lastHireDate  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder lastHireDate(OffsetDateTime lastHireDate) {
            this.lastHireDate = lastHireDate;
            return this;
        }
        
        /**
         * Set dateOfTermination
         * @param dateOfTermination  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateOfTermination(OffsetDateTime dateOfTermination) {
            this.dateOfTermination = dateOfTermination;
            return this;
        }
        
        /**
         * Set dateOfRetirement
         * @param dateOfRetirement  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateOfRetirement(OffsetDateTime dateOfRetirement) {
            this.dateOfRetirement = dateOfRetirement;
            return this;
        }
        
        /**
         * Set dateTimeCreated
         * @param dateTimeCreated  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateTimeCreated(OffsetDateTime dateTimeCreated) {
            this.dateTimeCreated = dateTimeCreated;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateTimeChanged(OffsetDateTime dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set dateLastPayDatePaid
         * @param dateLastPayDatePaid  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder dateLastPayDatePaid(OffsetDateTime dateLastPayDatePaid) {
            this.dateLastPayDatePaid = dateLastPayDatePaid;
            return this;
        }
        
        /**
         * Set payGroup
         * @param payGroup  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder payGroup(String payGroup) {
            this.payGroup = payGroup;
            return this;
        }
        
        /**
         * Set isHomeCompany
         * @param isHomeCompany  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder isHomeCompany(String isHomeCompany) {
            this.isHomeCompany = isHomeCompany;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetDetailsRequestBuilder
         */
        public GetDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getDetailsCall(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }


        /**
         * Execute getDetails request
         * @return List&lt;EmployeeEmploymentDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeEmploymentDetails> execute() throws ApiException {
            ApiResponse<List<EmployeeEmploymentDetails>> localVarResp = getDetailsWithHttpInfo(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeEmploymentDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeEmploymentDetails>> executeWithHttpInfo() throws ApiException {
            return getDetailsWithHttpInfo(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage);
        }

        /**
         * Execute getDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeEmploymentDetails>> _callback) throws ApiException {
            return getDetailsAsync(companyID, employeeID, primaryJobCode, jobTitle, fullTimeOrPartTimeCode, primaryWorkLocationCode, primaryProjectCode, deductionGroupCode, earningGroupCode, employeeTypeCode, employeeStatusCode, employeeNumber, supervisorId, originalHireDate, lastHireDate, dateOfTermination, dateOfRetirement, dateTimeCreated, dateTimeChanged, dateLastPayDatePaid, payGroup, isHomeCompany, page, perPage, _callback);
        }
    }

    /**
     * Get Employee Employment Details
     * If no pagination parameters specified, the default/max is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Personnel Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}) &lt;ul&gt; &lt;li&gt;Company ID parameter can take in multiple deduction codes separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Primary Job Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Primary Work Location Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Primary Project Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Deduction Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Earning Group Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Employee Type Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Employee Status Code parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;li&gt;Pay Group parameter can take in multiple pay frequencies separated by coma. ex: [ABC, DEF]&lt;/li&gt; &lt;/ul&gt; 
     * @return GetDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public GetDetailsRequestBuilder getDetails() throws IllegalArgumentException {
        return new GetDetailsRequestBuilder();
    }
}
