/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Earning;
import com.konfigthis.client.model.EarningStatusResponse;
import com.konfigthis.client.model.EarningsAddTimeClockDataRequest;
import com.konfigthis.client.model.EarningsAddTimeClockDataResponse;
import com.konfigthis.client.model.EarningsDto;
import com.konfigthis.client.model.MultiStatusResponse;
import java.util.UUID;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EarningsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EarningsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EarningsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addTimeClockDataCall(UUID xCorrelationId, String usClientId, EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest, Boolean failAllOnRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = earningsAddTimeClockDataRequest;

        // create path and map variables
        String localVarPath = "/services/payroll/v1/import-pay-items/earnings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (failAllOnRequest != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("failAllOnRequest", failAllOnRequest));
        }

        if (xCorrelationId != null) {
            localVarHeaderParams.put("X-Correlation-Id", localVarApiClient.parameterToString(xCorrelationId));
        }

        if (usClientId != null) {
            localVarHeaderParams.put("US-Client-Id", localVarApiClient.parameterToString(usClientId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addTimeClockDataValidateBeforeCall(UUID xCorrelationId, String usClientId, EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest, Boolean failAllOnRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xCorrelationId' is set
        if (xCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationId' when calling addTimeClockData(Async)");
        }

        // verify the required parameter 'usClientId' is set
        if (usClientId == null) {
            throw new ApiException("Missing the required parameter 'usClientId' when calling addTimeClockData(Async)");
        }

        // verify the required parameter 'earningsAddTimeClockDataRequest' is set
        if (earningsAddTimeClockDataRequest == null) {
            throw new ApiException("Missing the required parameter 'earningsAddTimeClockDataRequest' when calling addTimeClockData(Async)");
        }

        return addTimeClockDataCall(xCorrelationId, usClientId, earningsAddTimeClockDataRequest, failAllOnRequest, _callback);

    }


    private ApiResponse<EarningsAddTimeClockDataResponse> addTimeClockDataWithHttpInfo(UUID xCorrelationId, String usClientId, EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest, Boolean failAllOnRequest) throws ApiException {
        okhttp3.Call localVarCall = addTimeClockDataValidateBeforeCall(xCorrelationId, usClientId, earningsAddTimeClockDataRequest, failAllOnRequest, null);
        Type localVarReturnType = new TypeToken<EarningsAddTimeClockDataResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addTimeClockDataAsync(UUID xCorrelationId, String usClientId, EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest, Boolean failAllOnRequest, final ApiCallback<EarningsAddTimeClockDataResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = addTimeClockDataValidateBeforeCall(xCorrelationId, usClientId, earningsAddTimeClockDataRequest, failAllOnRequest, _callback);
        Type localVarReturnType = new TypeToken<EarningsAddTimeClockDataResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddTimeClockDataRequestBuilder {
        private final UUID xCorrelationId;
        private final String usClientId;
        private List<Earning> earnings;
        private Boolean failAllOnRequest;

        private AddTimeClockDataRequestBuilder(UUID xCorrelationId, String usClientId) {
            this.xCorrelationId = xCorrelationId;
            this.usClientId = usClientId;
        }

        /**
         * Set earnings
         * @param earnings  (optional)
         * @return AddTimeClockDataRequestBuilder
         */
        public AddTimeClockDataRequestBuilder earnings(List<Earning> earnings) {
            this.earnings = earnings;
            return this;
        }
        
        /**
         * Set failAllOnRequest
         * @param failAllOnRequest failAllOnRequest, evaluating this to true will cause the entire request to fail given any errors, otherwise valid earnings will be staged for import. (optional, default to true)
         * @return AddTimeClockDataRequestBuilder
         */
        public AddTimeClockDataRequestBuilder failAllOnRequest(Boolean failAllOnRequest) {
            this.failAllOnRequest = failAllOnRequest;
            return this;
        }
        
        /**
         * Build call for addTimeClockData
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest = buildBodyParams();
            return addTimeClockDataCall(xCorrelationId, usClientId, earningsAddTimeClockDataRequest, failAllOnRequest, _callback);
        }

        private EarningsAddTimeClockDataRequest buildBodyParams() {
            EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest = new EarningsAddTimeClockDataRequest();
            earningsAddTimeClockDataRequest.earnings(this.earnings);
            return earningsAddTimeClockDataRequest;
        }

        /**
         * Execute addTimeClockData request
         * @return EarningsAddTimeClockDataResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
         </table>
         */
        public EarningsAddTimeClockDataResponse execute() throws ApiException {
            EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest = buildBodyParams();
            ApiResponse<EarningsAddTimeClockDataResponse> localVarResp = addTimeClockDataWithHttpInfo(xCorrelationId, usClientId, earningsAddTimeClockDataRequest, failAllOnRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addTimeClockData request with HTTP info returned
         * @return ApiResponse&lt;EarningsAddTimeClockDataResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EarningsAddTimeClockDataResponse> executeWithHttpInfo() throws ApiException {
            EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest = buildBodyParams();
            return addTimeClockDataWithHttpInfo(xCorrelationId, usClientId, earningsAddTimeClockDataRequest, failAllOnRequest);
        }

        /**
         * Execute addTimeClockData request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EarningsAddTimeClockDataResponse> _callback) throws ApiException {
            EarningsAddTimeClockDataRequest earningsAddTimeClockDataRequest = buildBodyParams();
            return addTimeClockDataAsync(xCorrelationId, usClientId, earningsAddTimeClockDataRequest, failAllOnRequest, _callback);
        }
    }

    /**
     * Add UKG Pro time clock data
     * 
     * @param xCorrelationId  (required)
     * @param usClientId  (required)
     * @param earningsAddTimeClockDataRequest Add earnings from WFM for the purpose of processing payroll. (required)
     * @return AddTimeClockDataRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Created </td><td>  -  </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
     </table>
     */
    public AddTimeClockDataRequestBuilder addTimeClockData(UUID xCorrelationId, String usClientId) throws IllegalArgumentException {
        if (xCorrelationId == null) throw new IllegalArgumentException("\"xCorrelationId\" is required but got null");
            

        if (usClientId == null) throw new IllegalArgumentException("\"usClientId\" is required but got null");
            

        return new AddTimeClockDataRequestBuilder(xCorrelationId, usClientId);
    }
    private okhttp3.Call deleteEarningCall(UUID xCorrelationId, String usClientId, String refId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/payroll/v1/import-pay-items/earnings/{refId}"
            .replace("{" + "refId" + "}", localVarApiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCorrelationId != null) {
            localVarHeaderParams.put("X-Correlation-Id", localVarApiClient.parameterToString(xCorrelationId));
        }

        if (usClientId != null) {
            localVarHeaderParams.put("US-Client-Id", localVarApiClient.parameterToString(usClientId));
        }

        final String[] localVarAccepts = {
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call deleteEarningValidateBeforeCall(UUID xCorrelationId, String usClientId, String refId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xCorrelationId' is set
        if (xCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationId' when calling deleteEarning(Async)");
        }

        // verify the required parameter 'usClientId' is set
        if (usClientId == null) {
            throw new ApiException("Missing the required parameter 'usClientId' when calling deleteEarning(Async)");
        }

        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling deleteEarning(Async)");
        }

        return deleteEarningCall(xCorrelationId, usClientId, refId, _callback);

    }


    private ApiResponse<Void> deleteEarningWithHttpInfo(UUID xCorrelationId, String usClientId, String refId) throws ApiException {
        okhttp3.Call localVarCall = deleteEarningValidateBeforeCall(xCorrelationId, usClientId, refId, null);
        return localVarApiClient.execute(localVarCall);
    }

    private okhttp3.Call deleteEarningAsync(UUID xCorrelationId, String usClientId, String refId, final ApiCallback<Void> _callback) throws ApiException {

        okhttp3.Call localVarCall = deleteEarningValidateBeforeCall(xCorrelationId, usClientId, refId, _callback);
        localVarApiClient.executeAsync(localVarCall, _callback);
        return localVarCall;
    }

    public class DeleteEarningRequestBuilder {
        private final UUID xCorrelationId;
        private final String usClientId;
        private final String refId;

        private DeleteEarningRequestBuilder(UUID xCorrelationId, String usClientId, String refId) {
            this.xCorrelationId = xCorrelationId;
            this.usClientId = usClientId;
            this.refId = refId;
        }

        /**
         * Build call for deleteEarning
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return deleteEarningCall(xCorrelationId, usClientId, refId, _callback);
        }


        /**
         * Execute deleteEarning request
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
         </table>
         */
        public void execute() throws ApiException {
            deleteEarningWithHttpInfo(xCorrelationId, usClientId, refId);
        }

        /**
         * Execute deleteEarning request with HTTP info returned
         * @return ApiResponse&lt;Void&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Void> executeWithHttpInfo() throws ApiException {
            return deleteEarningWithHttpInfo(xCorrelationId, usClientId, refId);
        }

        /**
         * Execute deleteEarning request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Void> _callback) throws ApiException {
            return deleteEarningAsync(xCorrelationId, usClientId, refId, _callback);
        }
    }

    /**
     * Delete a earning
     * 
     * @param xCorrelationId  (required)
     * @param usClientId  (required)
     * @param refId Earning unique Identifier for earning (required)
     * @return DeleteEarningRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 204 </td><td> Deleted </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 405 </td><td> Method not allowed </td><td>  -  </td></tr>
     </table>
     */
    public DeleteEarningRequestBuilder deleteEarning(UUID xCorrelationId, String usClientId, String refId) throws IllegalArgumentException {
        if (xCorrelationId == null) throw new IllegalArgumentException("\"xCorrelationId\" is required but got null");
            

        if (usClientId == null) throw new IllegalArgumentException("\"usClientId\" is required but got null");
            

        if (refId == null) throw new IllegalArgumentException("\"refId\" is required but got null");
            

        return new DeleteEarningRequestBuilder(xCorrelationId, usClientId, refId);
    }
    private okhttp3.Call getConfigurationsFilteredByParameterCall(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/v1/earnings/{calculationRule}/{taxCategory}/{useDeductionOffset}/{countryCode}/{includeInShiftDiffrential}/{includeInManualCheck}"
            .replace("{" + "calculationRule" + "}", localVarApiClient.escapeString(calculationRule.toString()))
            .replace("{" + "taxCategory" + "}", localVarApiClient.escapeString(taxCategory.toString()))
            .replace("{" + "useDeductionOffset" + "}", localVarApiClient.escapeString(useDeductionOffset.toString()))
            .replace("{" + "countryCode" + "}", localVarApiClient.escapeString(countryCode.toString()))
            .replace("{" + "includeInShiftDiffrential" + "}", localVarApiClient.escapeString(includeInShiftDiffrential.toString()))
            .replace("{" + "includeInManualCheck" + "}", localVarApiClient.escapeString(includeInManualCheck.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (earningCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earningCode", earningCode));
        }

        if (includeInAccruals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInAccruals", includeInAccruals));
        }

        if (includeInDeferredCompensation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInDeferredCompensation", includeInDeferredCompensation));
        }

        if (includeInDeferredCompensationHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInDeferredCompensationHours", includeInDeferredCompensationHours));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getConfigurationsFilteredByParameterValidateBeforeCall(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'calculationRule' is set
        if (calculationRule == null) {
            throw new ApiException("Missing the required parameter 'calculationRule' when calling getConfigurationsFilteredByParameter(Async)");
        }

        // verify the required parameter 'taxCategory' is set
        if (taxCategory == null) {
            throw new ApiException("Missing the required parameter 'taxCategory' when calling getConfigurationsFilteredByParameter(Async)");
        }

        // verify the required parameter 'useDeductionOffset' is set
        if (useDeductionOffset == null) {
            throw new ApiException("Missing the required parameter 'useDeductionOffset' when calling getConfigurationsFilteredByParameter(Async)");
        }

        // verify the required parameter 'countryCode' is set
        if (countryCode == null) {
            throw new ApiException("Missing the required parameter 'countryCode' when calling getConfigurationsFilteredByParameter(Async)");
        }

        // verify the required parameter 'includeInShiftDiffrential' is set
        if (includeInShiftDiffrential == null) {
            throw new ApiException("Missing the required parameter 'includeInShiftDiffrential' when calling getConfigurationsFilteredByParameter(Async)");
        }

        // verify the required parameter 'includeInManualCheck' is set
        if (includeInManualCheck == null) {
            throw new ApiException("Missing the required parameter 'includeInManualCheck' when calling getConfigurationsFilteredByParameter(Async)");
        }

        return getConfigurationsFilteredByParameterCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);

    }


    private ApiResponse<List<EarningsDto>> getConfigurationsFilteredByParameterWithHttpInfo(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getConfigurationsFilteredByParameterValidateBeforeCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EarningsDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getConfigurationsFilteredByParameterAsync(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback<List<EarningsDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getConfigurationsFilteredByParameterValidateBeforeCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EarningsDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetConfigurationsFilteredByParameterRequestBuilder {
        private final String calculationRule;
        private final String taxCategory;
        private final String useDeductionOffset;
        private final String countryCode;
        private final String includeInShiftDiffrential;
        private final String includeInManualCheck;
        private String earningCode;
        private String includeInAccruals;
        private Boolean includeInDeferredCompensation;
        private Boolean includeInDeferredCompensationHours;
        private Integer page;
        private Integer perPage;

        private GetConfigurationsFilteredByParameterRequestBuilder(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck) {
            this.calculationRule = calculationRule;
            this.taxCategory = taxCategory;
            this.useDeductionOffset = useDeductionOffset;
            this.countryCode = countryCode;
            this.includeInShiftDiffrential = includeInShiftDiffrential;
            this.includeInManualCheck = includeInManualCheck;
        }

        /**
         * Set earningCode
         * @param earningCode  (optional)
         * @return GetConfigurationsFilteredByParameterRequestBuilder
         */
        public GetConfigurationsFilteredByParameterRequestBuilder earningCode(String earningCode) {
            this.earningCode = earningCode;
            return this;
        }
        
        /**
         * Set includeInAccruals
         * @param includeInAccruals  (optional)
         * @return GetConfigurationsFilteredByParameterRequestBuilder
         */
        public GetConfigurationsFilteredByParameterRequestBuilder includeInAccruals(String includeInAccruals) {
            this.includeInAccruals = includeInAccruals;
            return this;
        }
        
        /**
         * Set includeInDeferredCompensation
         * @param includeInDeferredCompensation  (optional)
         * @return GetConfigurationsFilteredByParameterRequestBuilder
         */
        public GetConfigurationsFilteredByParameterRequestBuilder includeInDeferredCompensation(Boolean includeInDeferredCompensation) {
            this.includeInDeferredCompensation = includeInDeferredCompensation;
            return this;
        }
        
        /**
         * Set includeInDeferredCompensationHours
         * @param includeInDeferredCompensationHours  (optional)
         * @return GetConfigurationsFilteredByParameterRequestBuilder
         */
        public GetConfigurationsFilteredByParameterRequestBuilder includeInDeferredCompensationHours(Boolean includeInDeferredCompensationHours) {
            this.includeInDeferredCompensationHours = includeInDeferredCompensationHours;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetConfigurationsFilteredByParameterRequestBuilder
         */
        public GetConfigurationsFilteredByParameterRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetConfigurationsFilteredByParameterRequestBuilder
         */
        public GetConfigurationsFilteredByParameterRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getConfigurationsFilteredByParameter
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getConfigurationsFilteredByParameterCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        }


        /**
         * Execute getConfigurationsFilteredByParameter request
         * @return List&lt;EarningsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public List<EarningsDto> execute() throws ApiException {
            ApiResponse<List<EarningsDto>> localVarResp = getConfigurationsFilteredByParameterWithHttpInfo(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getConfigurationsFilteredByParameter request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EarningsDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EarningsDto>> executeWithHttpInfo() throws ApiException {
            return getConfigurationsFilteredByParameterWithHttpInfo(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage);
        }

        /**
         * Execute getConfigurationsFilteredByParameter request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EarningsDto>> _callback) throws ApiException {
            return getConfigurationsFilteredByParameterAsync(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        }
    }

    /**
     * Get list of earnings configurations filtered by Parameter including pagination params
     * Get all the earning configuration filtered by the parameter(s) passed. &lt;/br&gt;If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     * @param calculationRule  (required)
     * @param taxCategory  (required)
     * @param useDeductionOffset  (required)
     * @param countryCode  (required)
     * @param includeInShiftDiffrential  (required)
     * @param includeInManualCheck  (required)
     * @return GetConfigurationsFilteredByParameterRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public GetConfigurationsFilteredByParameterRequestBuilder getConfigurationsFilteredByParameter(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck) throws IllegalArgumentException {
        if (calculationRule == null) throw new IllegalArgumentException("\"calculationRule\" is required but got null");
            

        if (taxCategory == null) throw new IllegalArgumentException("\"taxCategory\" is required but got null");
            

        if (useDeductionOffset == null) throw new IllegalArgumentException("\"useDeductionOffset\" is required but got null");
            

        if (countryCode == null) throw new IllegalArgumentException("\"countryCode\" is required but got null");
            

        if (includeInShiftDiffrential == null) throw new IllegalArgumentException("\"includeInShiftDiffrential\" is required but got null");
            

        if (includeInManualCheck == null) throw new IllegalArgumentException("\"includeInManualCheck\" is required but got null");
            

        return new GetConfigurationsFilteredByParameterRequestBuilder(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck);
    }
    private okhttp3.Call getStatusDetailsCall(UUID xCorrelationId, String usClientId, String refId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/services/payroll/v1/import-pay-items/earnings/{refId}"
            .replace("{" + "refId" + "}", localVarApiClient.escapeString(refId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (xCorrelationId != null) {
            localVarHeaderParams.put("X-Correlation-Id", localVarApiClient.parameterToString(xCorrelationId));
        }

        if (usClientId != null) {
            localVarHeaderParams.put("US-Client-Id", localVarApiClient.parameterToString(usClientId));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "basicAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusDetailsValidateBeforeCall(UUID xCorrelationId, String usClientId, String refId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'xCorrelationId' is set
        if (xCorrelationId == null) {
            throw new ApiException("Missing the required parameter 'xCorrelationId' when calling getStatusDetails(Async)");
        }

        // verify the required parameter 'usClientId' is set
        if (usClientId == null) {
            throw new ApiException("Missing the required parameter 'usClientId' when calling getStatusDetails(Async)");
        }

        // verify the required parameter 'refId' is set
        if (refId == null) {
            throw new ApiException("Missing the required parameter 'refId' when calling getStatusDetails(Async)");
        }

        return getStatusDetailsCall(xCorrelationId, usClientId, refId, _callback);

    }


    private ApiResponse<EarningStatusResponse> getStatusDetailsWithHttpInfo(UUID xCorrelationId, String usClientId, String refId) throws ApiException {
        okhttp3.Call localVarCall = getStatusDetailsValidateBeforeCall(xCorrelationId, usClientId, refId, null);
        Type localVarReturnType = new TypeToken<EarningStatusResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusDetailsAsync(UUID xCorrelationId, String usClientId, String refId, final ApiCallback<EarningStatusResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusDetailsValidateBeforeCall(xCorrelationId, usClientId, refId, _callback);
        Type localVarReturnType = new TypeToken<EarningStatusResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusDetailsRequestBuilder {
        private final UUID xCorrelationId;
        private final String usClientId;
        private final String refId;

        private GetStatusDetailsRequestBuilder(UUID xCorrelationId, String usClientId, String refId) {
            this.xCorrelationId = xCorrelationId;
            this.usClientId = usClientId;
            this.refId = refId;
        }

        /**
         * Build call for getStatusDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusDetailsCall(xCorrelationId, usClientId, refId, _callback);
        }


        /**
         * Execute getStatusDetails request
         * @return EarningStatusResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public EarningStatusResponse execute() throws ApiException {
            ApiResponse<EarningStatusResponse> localVarResp = getStatusDetailsWithHttpInfo(xCorrelationId, usClientId, refId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatusDetails request with HTTP info returned
         * @return ApiResponse&lt;EarningStatusResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EarningStatusResponse> executeWithHttpInfo() throws ApiException {
            return getStatusDetailsWithHttpInfo(xCorrelationId, usClientId, refId);
        }

        /**
         * Execute getStatusDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EarningStatusResponse> _callback) throws ApiException {
            return getStatusDetailsAsync(xCorrelationId, usClientId, refId, _callback);
        }
    }

    /**
     * Get status details for specified earning
     * 
     * @param xCorrelationId  (required)
     * @param usClientId  (required)
     * @param refId Earning unique Identifier for earning (required)
     * @return GetStatusDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Sucess </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusDetailsRequestBuilder getStatusDetails(UUID xCorrelationId, String usClientId, String refId) throws IllegalArgumentException {
        if (xCorrelationId == null) throw new IllegalArgumentException("\"xCorrelationId\" is required but got null");
            

        if (usClientId == null) throw new IllegalArgumentException("\"usClientId\" is required but got null");
            

        if (refId == null) throw new IllegalArgumentException("\"refId\" is required but got null");
            

        return new GetStatusDetailsRequestBuilder(xCorrelationId, usClientId, refId);
    }
    private okhttp3.Call listEarningsConfigurationsCall(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/v1/earnings";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (calculationRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculationRule", calculationRule));
        }

        if (taxCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxCategory", taxCategory));
        }

        if (useDeductionOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDeductionOffset", useDeductionOffset));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (includeInShiftDiffrential != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInShiftDiffrential", includeInShiftDiffrential));
        }

        if (includeInManualCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInManualCheck", includeInManualCheck));
        }

        if (earningCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earningCode", earningCode));
        }

        if (includeInAccruals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInAccruals", includeInAccruals));
        }

        if (includeInDeferredCompensation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInDeferredCompensation", includeInDeferredCompensation));
        }

        if (includeInDeferredCompensationHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInDeferredCompensationHours", includeInDeferredCompensationHours));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEarningsConfigurationsValidateBeforeCall(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listEarningsConfigurationsCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);

    }


    private ApiResponse<List<EarningsDto>> listEarningsConfigurationsWithHttpInfo(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listEarningsConfigurationsValidateBeforeCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EarningsDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEarningsConfigurationsAsync(String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback<List<EarningsDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEarningsConfigurationsValidateBeforeCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EarningsDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEarningsConfigurationsRequestBuilder {
        private String calculationRule;
        private String taxCategory;
        private String useDeductionOffset;
        private String countryCode;
        private String includeInShiftDiffrential;
        private String includeInManualCheck;
        private String earningCode;
        private String includeInAccruals;
        private Boolean includeInDeferredCompensation;
        private Boolean includeInDeferredCompensationHours;
        private Integer page;
        private Integer perPage;

        private ListEarningsConfigurationsRequestBuilder() {
        }

        /**
         * Set calculationRule
         * @param calculationRule  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder calculationRule(String calculationRule) {
            this.calculationRule = calculationRule;
            return this;
        }
        
        /**
         * Set taxCategory
         * @param taxCategory  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder taxCategory(String taxCategory) {
            this.taxCategory = taxCategory;
            return this;
        }
        
        /**
         * Set useDeductionOffset
         * @param useDeductionOffset  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder useDeductionOffset(String useDeductionOffset) {
            this.useDeductionOffset = useDeductionOffset;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set includeInShiftDiffrential
         * @param includeInShiftDiffrential  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder includeInShiftDiffrential(String includeInShiftDiffrential) {
            this.includeInShiftDiffrential = includeInShiftDiffrential;
            return this;
        }
        
        /**
         * Set includeInManualCheck
         * @param includeInManualCheck  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder includeInManualCheck(String includeInManualCheck) {
            this.includeInManualCheck = includeInManualCheck;
            return this;
        }
        
        /**
         * Set earningCode
         * @param earningCode  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder earningCode(String earningCode) {
            this.earningCode = earningCode;
            return this;
        }
        
        /**
         * Set includeInAccruals
         * @param includeInAccruals  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder includeInAccruals(String includeInAccruals) {
            this.includeInAccruals = includeInAccruals;
            return this;
        }
        
        /**
         * Set includeInDeferredCompensation
         * @param includeInDeferredCompensation  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder includeInDeferredCompensation(Boolean includeInDeferredCompensation) {
            this.includeInDeferredCompensation = includeInDeferredCompensation;
            return this;
        }
        
        /**
         * Set includeInDeferredCompensationHours
         * @param includeInDeferredCompensationHours  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder includeInDeferredCompensationHours(Boolean includeInDeferredCompensationHours) {
            this.includeInDeferredCompensationHours = includeInDeferredCompensationHours;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return ListEarningsConfigurationsRequestBuilder
         */
        public ListEarningsConfigurationsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listEarningsConfigurations
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEarningsConfigurationsCall(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        }


        /**
         * Execute listEarningsConfigurations request
         * @return List&lt;EarningsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public List<EarningsDto> execute() throws ApiException {
            ApiResponse<List<EarningsDto>> localVarResp = listEarningsConfigurationsWithHttpInfo(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEarningsConfigurations request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EarningsDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EarningsDto>> executeWithHttpInfo() throws ApiException {
            return listEarningsConfigurationsWithHttpInfo(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage);
        }

        /**
         * Execute listEarningsConfigurations request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EarningsDto>> _callback) throws ApiException {
            return listEarningsConfigurationsAsync(calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        }
    }

    /**
     * Get a list of all earnings configurations
     * Get details of all earnings configuration setup at company level. &lt;/br&gt;If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     * @return ListEarningsConfigurationsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public ListEarningsConfigurationsRequestBuilder listEarningsConfigurations() throws IllegalArgumentException {
        return new ListEarningsConfigurationsRequestBuilder();
    }
    private okhttp3.Call specificConfigurationGetCall(String earningCode, String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode2, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/configuration/v1/earnings/{earningCode}"
            .replace("{" + "earningCode" + "}", localVarApiClient.escapeString(earningCode.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (calculationRule != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("calculationRule", calculationRule));
        }

        if (taxCategory != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("taxCategory", taxCategory));
        }

        if (useDeductionOffset != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("useDeductionOffset", useDeductionOffset));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (includeInShiftDiffrential != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInShiftDiffrential", includeInShiftDiffrential));
        }

        if (includeInManualCheck != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInManualCheck", includeInManualCheck));
        }

        if (earningCode2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("earningCode", earningCode2));
        }

        if (includeInAccruals != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInAccruals", includeInAccruals));
        }

        if (includeInDeferredCompensation != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInDeferredCompensation", includeInDeferredCompensation));
        }

        if (includeInDeferredCompensationHours != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("includeInDeferredCompensationHours", includeInDeferredCompensationHours));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call specificConfigurationGetValidateBeforeCall(String earningCode, String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode2, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'earningCode' is set
        if (earningCode == null) {
            throw new ApiException("Missing the required parameter 'earningCode' when calling specificConfigurationGet(Async)");
        }

        return specificConfigurationGetCall(earningCode, calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode2, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);

    }


    private ApiResponse<List<EarningsDto>> specificConfigurationGetWithHttpInfo(String earningCode, String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode2, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = specificConfigurationGetValidateBeforeCall(earningCode, calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode2, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EarningsDto>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call specificConfigurationGetAsync(String earningCode, String calculationRule, String taxCategory, String useDeductionOffset, String countryCode, String includeInShiftDiffrential, String includeInManualCheck, String earningCode2, String includeInAccruals, Boolean includeInDeferredCompensation, Boolean includeInDeferredCompensationHours, Integer page, Integer perPage, final ApiCallback<List<EarningsDto>> _callback) throws ApiException {

        okhttp3.Call localVarCall = specificConfigurationGetValidateBeforeCall(earningCode, calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode2, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EarningsDto>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class SpecificConfigurationGetRequestBuilder {
        private final String earningCode;
        private String calculationRule;
        private String taxCategory;
        private String useDeductionOffset;
        private String countryCode;
        private String includeInShiftDiffrential;
        private String includeInManualCheck;
        private String earningCode2;
        private String includeInAccruals;
        private Boolean includeInDeferredCompensation;
        private Boolean includeInDeferredCompensationHours;
        private Integer page;
        private Integer perPage;

        private SpecificConfigurationGetRequestBuilder(String earningCode) {
            this.earningCode = earningCode;
        }

        /**
         * Set calculationRule
         * @param calculationRule  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder calculationRule(String calculationRule) {
            this.calculationRule = calculationRule;
            return this;
        }
        
        /**
         * Set taxCategory
         * @param taxCategory  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder taxCategory(String taxCategory) {
            this.taxCategory = taxCategory;
            return this;
        }
        
        /**
         * Set useDeductionOffset
         * @param useDeductionOffset  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder useDeductionOffset(String useDeductionOffset) {
            this.useDeductionOffset = useDeductionOffset;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set includeInShiftDiffrential
         * @param includeInShiftDiffrential  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder includeInShiftDiffrential(String includeInShiftDiffrential) {
            this.includeInShiftDiffrential = includeInShiftDiffrential;
            return this;
        }
        
        /**
         * Set includeInManualCheck
         * @param includeInManualCheck  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder includeInManualCheck(String includeInManualCheck) {
            this.includeInManualCheck = includeInManualCheck;
            return this;
        }
        
        /**
         * Set earningCode2
         * @param earningCode2  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder earningCode2(String earningCode2) {
            this.earningCode2 = earningCode2;
            return this;
        }
        
        /**
         * Set includeInAccruals
         * @param includeInAccruals  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder includeInAccruals(String includeInAccruals) {
            this.includeInAccruals = includeInAccruals;
            return this;
        }
        
        /**
         * Set includeInDeferredCompensation
         * @param includeInDeferredCompensation  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder includeInDeferredCompensation(Boolean includeInDeferredCompensation) {
            this.includeInDeferredCompensation = includeInDeferredCompensation;
            return this;
        }
        
        /**
         * Set includeInDeferredCompensationHours
         * @param includeInDeferredCompensationHours  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder includeInDeferredCompensationHours(Boolean includeInDeferredCompensationHours) {
            this.includeInDeferredCompensationHours = includeInDeferredCompensationHours;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return SpecificConfigurationGetRequestBuilder
         */
        public SpecificConfigurationGetRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for specificConfigurationGet
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return specificConfigurationGetCall(earningCode, calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode2, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        }


        /**
         * Execute specificConfigurationGet request
         * @return List&lt;EarningsDto&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public List<EarningsDto> execute() throws ApiException {
            ApiResponse<List<EarningsDto>> localVarResp = specificConfigurationGetWithHttpInfo(earningCode, calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode2, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute specificConfigurationGet request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EarningsDto&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EarningsDto>> executeWithHttpInfo() throws ApiException {
            return specificConfigurationGetWithHttpInfo(earningCode, calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode2, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage);
        }

        /**
         * Execute specificConfigurationGet request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EarningsDto>> _callback) throws ApiException {
            return specificConfigurationGetAsync(earningCode, calculationRule, taxCategory, useDeductionOffset, countryCode, includeInShiftDiffrential, includeInManualCheck, earningCode2, includeInAccruals, includeInDeferredCompensation, includeInDeferredCompensationHours, page, perPage, _callback);
        }
    }

    /**
     * Get a specific earning configuration
     * Get details of the earning configuration requested. &lt;/br&gt;If no pagination parameters specified, the default/max is applied. It is a public API that user can access once they have a valid username and password. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}).
     * @param earningCode  (required)
     * @return SpecificConfigurationGetRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public SpecificConfigurationGetRequestBuilder specificConfigurationGet(String earningCode) throws IllegalArgumentException {
        if (earningCode == null) throw new IllegalArgumentException("\"earningCode\" is required but got null");
            

        return new SpecificConfigurationGetRequestBuilder(earningCode);
    }
}
