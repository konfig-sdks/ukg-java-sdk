/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PtoPlans;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PtoPlanPatchApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PtoPlanPatchApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PtoPlanPatchApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call onePtoPlanCall(String companyId, String employeeId, String ptoPlan, PtoPlans ptoPlans, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ptoPlans;

        // create path and map variables
        String localVarPath = "/personnel/v1/companies/{companyId}/employees/{employeeId}/pto-plans/{ptoPlan}"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()))
            .replace("{" + "ptoPlan" + "}", localVarApiClient.escapeString(ptoPlan.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "application/problem+json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PATCH", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call onePtoPlanValidateBeforeCall(String companyId, String employeeId, String ptoPlan, PtoPlans ptoPlans, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling onePtoPlan(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling onePtoPlan(Async)");
        }

        // verify the required parameter 'ptoPlan' is set
        if (ptoPlan == null) {
            throw new ApiException("Missing the required parameter 'ptoPlan' when calling onePtoPlan(Async)");
        }

        // verify the required parameter 'ptoPlans' is set
        if (ptoPlans == null) {
            throw new ApiException("Missing the required parameter 'ptoPlans' when calling onePtoPlan(Async)");
        }

        return onePtoPlanCall(companyId, employeeId, ptoPlan, ptoPlans, _callback);

    }


    private ApiResponse<PtoPlans> onePtoPlanWithHttpInfo(String companyId, String employeeId, String ptoPlan, PtoPlans ptoPlans) throws ApiException {
        okhttp3.Call localVarCall = onePtoPlanValidateBeforeCall(companyId, employeeId, ptoPlan, ptoPlans, null);
        Type localVarReturnType = new TypeToken<PtoPlans>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call onePtoPlanAsync(String companyId, String employeeId, String ptoPlan, PtoPlans ptoPlans, final ApiCallback<PtoPlans> _callback) throws ApiException {

        okhttp3.Call localVarCall = onePtoPlanValidateBeforeCall(companyId, employeeId, ptoPlan, ptoPlans, _callback);
        Type localVarReturnType = new TypeToken<PtoPlans>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class OnePtoPlanRequestBuilder {
        private final String employeeId;
        private final String companyId;
        private final String ptoPlan;
        private final String companyId;
        private final String employeeId;
        private final String ptoPlan;
        private Double earned;
        private Double taken;
        private Double pendingBalance;
        private String earnedThroughDate;
        private String reset;
        private String pendingMoveDate;

        private OnePtoPlanRequestBuilder(String employeeId, String companyId, String ptoPlan, String companyId, String employeeId, String ptoPlan) {
            this.employeeId = employeeId;
            this.companyId = companyId;
            this.ptoPlan = ptoPlan;
            this.companyId = companyId;
            this.employeeId = employeeId;
            this.ptoPlan = ptoPlan;
        }

        /**
         * Set earned
         * @param earned Amount of hours earned for PTO (optional)
         * @return OnePtoPlanRequestBuilder
         */
        public OnePtoPlanRequestBuilder earned(Double earned) {
            this.earned = earned;
            return this;
        }
        
        /**
         * Set taken
         * @param taken Amount of hours taken for PTO (optional)
         * @return OnePtoPlanRequestBuilder
         */
        public OnePtoPlanRequestBuilder taken(Double taken) {
            this.taken = taken;
            return this;
        }
        
        /**
         * Set pendingBalance
         * @param pendingBalance Balance of PTO hours (optional)
         * @return OnePtoPlanRequestBuilder
         */
        public OnePtoPlanRequestBuilder pendingBalance(Double pendingBalance) {
            this.pendingBalance = pendingBalance;
            return this;
        }
        
        /**
         * Set earnedThroughDate
         * @param earnedThroughDate Date in which PTO is earned through, format should be YYYY-MM-DD (optional)
         * @return OnePtoPlanRequestBuilder
         */
        public OnePtoPlanRequestBuilder earnedThroughDate(String earnedThroughDate) {
            this.earnedThroughDate = earnedThroughDate;
            return this;
        }
        
        /**
         * Set reset
         * @param reset Date in which the PTO reset&#39;s, format should be YYYY-MM-DD (optional)
         * @return OnePtoPlanRequestBuilder
         */
        public OnePtoPlanRequestBuilder reset(String reset) {
            this.reset = reset;
            return this;
        }
        
        /**
         * Set pendingMoveDate
         * @param pendingMoveDate Date to be used if pending rules are relevant, format should be YYYY-MM-DD (optional)
         * @return OnePtoPlanRequestBuilder
         */
        public OnePtoPlanRequestBuilder pendingMoveDate(String pendingMoveDate) {
            this.pendingMoveDate = pendingMoveDate;
            return this;
        }
        
        /**
         * Build call for onePtoPlan
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PtoPlans ptoPlans = buildBodyParams();
            return onePtoPlanCall(companyId, employeeId, ptoPlan, ptoPlans, _callback);
        }

        private PtoPlans buildBodyParams() {
            PtoPlans ptoPlans = new PtoPlans();
            ptoPlans.employeeId(this.employeeId);
            ptoPlans.companyId(this.companyId);
            ptoPlans.ptoPlan(this.ptoPlan);
            ptoPlans.earned(this.earned);
            ptoPlans.taken(this.taken);
            ptoPlans.pendingBalance(this.pendingBalance);
            ptoPlans.earnedThroughDate(this.earnedThroughDate);
            ptoPlans.reset(this.reset);
            ptoPlans.pendingMoveDate(this.pendingMoveDate);
            return ptoPlans;
        }

        /**
         * Execute onePtoPlan request
         * @return PtoPlans
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public PtoPlans execute() throws ApiException {
            PtoPlans ptoPlans = buildBodyParams();
            ApiResponse<PtoPlans> localVarResp = onePtoPlanWithHttpInfo(companyId, employeeId, ptoPlan, ptoPlans);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute onePtoPlan request with HTTP info returned
         * @return ApiResponse&lt;PtoPlans&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<PtoPlans> executeWithHttpInfo() throws ApiException {
            PtoPlans ptoPlans = buildBodyParams();
            return onePtoPlanWithHttpInfo(companyId, employeeId, ptoPlan, ptoPlans);
        }

        /**
         * Execute onePtoPlan request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<PtoPlans> _callback) throws ApiException {
            PtoPlans ptoPlans = buildBodyParams();
            return onePtoPlanAsync(companyId, employeeId, ptoPlan, ptoPlans, _callback);
        }
    }

    /**
     * Patch one PTO Plan
     * Allows the ability to update one PTO Plan for an employee. Work Flow or Approvers is not supported. Permissions - Ultipro service account must have \&quot;Edit\&quot; role for the \&quot;PTO Plan Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). 
     * @param companyId Company Identifier (required)
     * @param employeeId Employee Identifier (required)
     * @param ptoPlan PTO Plan Identifier (required)
     * @param ptoPlans The pto-plan to be written (required)
     * @return OnePtoPlanRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not Found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
     </table>
     */
    public OnePtoPlanRequestBuilder onePtoPlan(String employeeId, String companyId, String ptoPlan, String companyId, String employeeId, String ptoPlan) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (ptoPlan == null) throw new IllegalArgumentException("\"ptoPlan\" is required but got null");
            

        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        if (ptoPlan == null) throw new IllegalArgumentException("\"ptoPlan\" is required but got null");
            

        return new OnePtoPlanRequestBuilder(employeeId, companyId, ptoPlan, companyId, employeeId, ptoPlan);
    }
}
