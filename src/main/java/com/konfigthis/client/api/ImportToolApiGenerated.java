/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging;
import com.konfigthis.client.model.UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus;
import com.konfigthis.client.model.UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ImportToolApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ImportToolApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ImportToolApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getStatusCall(String stagingId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/import-tool/status/{stagingId}"
            .replace("{" + "stagingId" + "}", localVarApiClient.escapeString(stagingId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getStatusValidateBeforeCall(String stagingId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'stagingId' is set
        if (stagingId == null) {
            throw new ApiException("Missing the required parameter 'stagingId' when calling getStatus(Async)");
        }

        return getStatusCall(stagingId, _callback);

    }


    private ApiResponse<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus> getStatusWithHttpInfo(String stagingId) throws ApiException {
        okhttp3.Call localVarCall = getStatusValidateBeforeCall(stagingId, null);
        Type localVarReturnType = new TypeToken<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getStatusAsync(String stagingId, final ApiCallback<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus> _callback) throws ApiException {

        okhttp3.Call localVarCall = getStatusValidateBeforeCall(stagingId, _callback);
        Type localVarReturnType = new TypeToken<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetStatusRequestBuilder {
        private final String stagingId;

        private GetStatusRequestBuilder(String stagingId) {
            this.stagingId = stagingId;
        }

        /**
         * Build call for getStatus
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getStatusCall(stagingId, _callback);
        }


        /**
         * Execute getStatus request
         * @return UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus execute() throws ApiException {
            ApiResponse<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus> localVarResp = getStatusWithHttpInfo(stagingId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getStatus request with HTTP info returned
         * @return ApiResponse&lt;UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus> executeWithHttpInfo() throws ApiException {
            return getStatusWithHttpInfo(stagingId);
        }

        /**
         * Execute getStatus request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStagingStatus> _callback) throws ApiException {
            return getStatusAsync(stagingId, _callback);
        }
    }

    /**
     * Retrieves the status of an import tool transaction
     * Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have View role for the Personnel Integration Web Service. This GET call has a requirement of PersonnelResourceAuthorize(ApiOperation.Read)
     * @param stagingId  (required)
     * @return GetStatusRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public GetStatusRequestBuilder getStatus(String stagingId) throws IllegalArgumentException {
        if (stagingId == null) throw new IllegalArgumentException("\"stagingId\" is required but got null");
            

        return new GetStatusRequestBuilder(stagingId);
    }
    private okhttp3.Call postCall(UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest;

        // create path and map variables
        String localVarPath = "/personnel/v1/import-tool";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call postValidateBeforeCall(UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest' is set
        if (ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest == null) {
            throw new ApiException("Missing the required parameter 'ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest' when calling post(Async)");
        }

        return postCall(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, _callback);

    }


    private ApiResponse<List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>> postWithHttpInfo(UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest) throws ApiException {
        okhttp3.Call localVarCall = postValidateBeforeCall(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, null);
        Type localVarReturnType = new TypeToken<List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call postAsync(UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, final ApiCallback<List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>> _callback) throws ApiException {

        okhttp3.Call localVarCall = postValidateBeforeCall(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, _callback);
        Type localVarReturnType = new TypeToken<List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class PostRequestBuilder {
        private String transaction;
        private String uniqueFileName;

        private PostRequestBuilder() {
        }

        /**
         * Set transaction
         * @param transaction The XML Serialized transaction (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder transaction(String transaction) {
            this.transaction = transaction;
            return this;
        }
        
        /**
         * Set uniqueFileName
         * @param uniqueFileName An optionally provided unique file name (optional)
         * @return PostRequestBuilder
         */
        public PostRequestBuilder uniqueFileName(String uniqueFileName) {
            this.uniqueFileName = uniqueFileName;
            return this;
        }
        
        /**
         * Build call for post
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest = buildBodyParams();
            return postCall(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, _callback);
        }

        private UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest buildBodyParams() {
            UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest = new UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest();
            ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest.transaction(this.transaction);
            ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest.uniqueFileName(this.uniqueFileName);
            return ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest;
        }

        /**
         * Execute post request
         * @return List&lt;UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging> execute() throws ApiException {
            UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest = buildBodyParams();
            ApiResponse<List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>> localVarResp = postWithHttpInfo(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute post request with HTTP info returned
         * @return ApiResponse&lt;List&lt;UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>> executeWithHttpInfo() throws ApiException {
            UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest = buildBodyParams();
            return postWithHttpInfo(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest);
        }

        /**
         * Execute post request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsFileStaging>> _callback) throws ApiException {
            UltimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest = buildBodyParams();
            return postAsync(ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest, _callback);
        }
    }

    /**
     * Takes an XML transaction and feeds it into the Import Tool
     * Submits an encoded XML transaction to the Import Tool. Transaction results can be viewed on the Administration &gt; Integration Studio &gt; Import Tool &gt; Results page. Reference the Import Tool XML and Configuration Settings Guide for transaction details. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). UltiPro service account must have the View and Add roles for the Personnel Integration Web Service. This POST call has a requirement of PersonnelResourceAuthorize(ApiOperation.Create)
     * @param ultimateSoftwareFoundationServicesApiUltiProPersonnelImportToolModelsImportRequest  (required)
     * @return PostRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public PostRequestBuilder post() throws IllegalArgumentException {
        return new PostRequestBuilder();
    }
}
