/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmpPersonDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PersonDetailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PersonDetailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PersonDetailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllDetailsCall(String companyId, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/person-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (addressState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressState", addressState));
        }

        if (addressCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressCountry", addressCountry));
        }

        if (cobraIsActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraIsActive", cobraIsActive));
        }

        if (cobraStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraStatus", cobraStatus));
        }

        if (dateOfCobraEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfCobraEvent", dateOfCobraEvent));
        }

        if (dateTimeCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeCreated", dateTimeCreated));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (nationalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalId", nationalId));
        }

        if (nationalIdCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalIdCountry", nationalIdCountry));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDetailsValidateBeforeCall(String companyId, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getAllDetailsCall(companyId, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);

    }


    private ApiResponse<List<EmpPersonDetails>> getAllDetailsWithHttpInfo(String companyId, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllDetailsValidateBeforeCall(companyId, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpPersonDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllDetailsAsync(String companyId, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback<List<EmpPersonDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDetailsValidateBeforeCall(companyId, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpPersonDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllDetailsRequestBuilder {
        private String companyId;
        private String employeeId;
        private String lastName;
        private String emailAddress;
        private String addressState;
        private String addressCountry;
        private String cobraIsActive;
        private String cobraStatus;
        private String dateOfCobraEvent;
        private String dateTimeCreated;
        private String dateTimeChanged;
        private String nationalId;
        private String nationalIdCountry;
        private Integer page;
        private Integer perPage;

        private GetAllDetailsRequestBuilder() {
        }

        /**
         * Set companyId
         * @param companyId  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set emailAddress
         * @param emailAddress  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set addressState
         * @param addressState  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder addressState(String addressState) {
            this.addressState = addressState;
            return this;
        }
        
        /**
         * Set addressCountry
         * @param addressCountry  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder addressCountry(String addressCountry) {
            this.addressCountry = addressCountry;
            return this;
        }
        
        /**
         * Set cobraIsActive
         * @param cobraIsActive  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder cobraIsActive(String cobraIsActive) {
            this.cobraIsActive = cobraIsActive;
            return this;
        }
        
        /**
         * Set cobraStatus
         * @param cobraStatus  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder cobraStatus(String cobraStatus) {
            this.cobraStatus = cobraStatus;
            return this;
        }
        
        /**
         * Set dateOfCobraEvent
         * @param dateOfCobraEvent Used to find date of COBRA event less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder dateOfCobraEvent(String dateOfCobraEvent) {
            this.dateOfCobraEvent = dateOfCobraEvent;
            return this;
        }
        
        /**
         * Set dateTimeCreated
         * @param dateTimeCreated Used to find person record created less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder dateTimeCreated(String dateTimeCreated) {
            this.dateTimeCreated = dateTimeCreated;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged Used to find person record changed less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set nationalId
         * @param nationalId  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder nationalId(String nationalId) {
            this.nationalId = nationalId;
            return this;
        }
        
        /**
         * Set nationalIdCountry
         * @param nationalIdCountry  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder nationalIdCountry(String nationalIdCountry) {
            this.nationalIdCountry = nationalIdCountry;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllDetailsCall(companyId, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        }


        /**
         * Execute getAllDetails request
         * @return List&lt;EmpPersonDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpPersonDetails> execute() throws ApiException {
            ApiResponse<List<EmpPersonDetails>> localVarResp = getAllDetailsWithHttpInfo(companyId, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpPersonDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpPersonDetails>> executeWithHttpInfo() throws ApiException {
            return getAllDetailsWithHttpInfo(companyId, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage);
        }

        /**
         * Execute getAllDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpPersonDetails>> _callback) throws ApiException {
            return getAllDetailsAsync(companyId, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        }
    }

    /**
     * Get all person details
     * Get all person details.  If no pagination parameters specified, the default/max is applied.   Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Person Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /person-details?dateTimeCreated&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /person-details?dateTimeCreated&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /person-details?dateTimeCreated&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /person-details?dateTimeCreated&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @return GetAllDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public GetAllDetailsRequestBuilder getAllDetails() throws IllegalArgumentException {
        return new GetAllDetailsRequestBuilder();
    }
    private okhttp3.Call getSingleCompanyDetailsCall(String companyId, String companyId2, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/companies/{companyId}/person-details"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId2));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (addressState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressState", addressState));
        }

        if (addressCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressCountry", addressCountry));
        }

        if (cobraIsActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraIsActive", cobraIsActive));
        }

        if (cobraStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraStatus", cobraStatus));
        }

        if (dateOfCobraEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfCobraEvent", dateOfCobraEvent));
        }

        if (dateTimeCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeCreated", dateTimeCreated));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (nationalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalId", nationalId));
        }

        if (nationalIdCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalIdCountry", nationalIdCountry));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleCompanyDetailsValidateBeforeCall(String companyId, String companyId2, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSingleCompanyDetails(Async)");
        }

        return getSingleCompanyDetailsCall(companyId, companyId2, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);

    }


    private ApiResponse<List<EmpPersonDetails>> getSingleCompanyDetailsWithHttpInfo(String companyId, String companyId2, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getSingleCompanyDetailsValidateBeforeCall(companyId, companyId2, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpPersonDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleCompanyDetailsAsync(String companyId, String companyId2, String employeeId, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback<List<EmpPersonDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleCompanyDetailsValidateBeforeCall(companyId, companyId2, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpPersonDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleCompanyDetailsRequestBuilder {
        private final String companyId;
        private String companyId2;
        private String employeeId;
        private String lastName;
        private String emailAddress;
        private String addressState;
        private String addressCountry;
        private String cobraIsActive;
        private String cobraStatus;
        private String dateOfCobraEvent;
        private String dateTimeCreated;
        private String dateTimeChanged;
        private String nationalId;
        private String nationalIdCountry;
        private Integer page;
        private Integer perPage;

        private GetSingleCompanyDetailsRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set companyId2
         * @param companyId2  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder companyId2(String companyId2) {
            this.companyId2 = companyId2;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set emailAddress
         * @param emailAddress  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set addressState
         * @param addressState  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder addressState(String addressState) {
            this.addressState = addressState;
            return this;
        }
        
        /**
         * Set addressCountry
         * @param addressCountry  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder addressCountry(String addressCountry) {
            this.addressCountry = addressCountry;
            return this;
        }
        
        /**
         * Set cobraIsActive
         * @param cobraIsActive  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder cobraIsActive(String cobraIsActive) {
            this.cobraIsActive = cobraIsActive;
            return this;
        }
        
        /**
         * Set cobraStatus
         * @param cobraStatus  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder cobraStatus(String cobraStatus) {
            this.cobraStatus = cobraStatus;
            return this;
        }
        
        /**
         * Set dateOfCobraEvent
         * @param dateOfCobraEvent Used to find date of COBRA event less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder dateOfCobraEvent(String dateOfCobraEvent) {
            this.dateOfCobraEvent = dateOfCobraEvent;
            return this;
        }
        
        /**
         * Set dateTimeCreated
         * @param dateTimeCreated Used to find person record created less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder dateTimeCreated(String dateTimeCreated) {
            this.dateTimeCreated = dateTimeCreated;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged Used to find person record changed less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set nationalId
         * @param nationalId  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder nationalId(String nationalId) {
            this.nationalId = nationalId;
            return this;
        }
        
        /**
         * Set nationalIdCountry
         * @param nationalIdCountry  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder nationalIdCountry(String nationalIdCountry) {
            this.nationalIdCountry = nationalIdCountry;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetSingleCompanyDetailsRequestBuilder
         */
        public GetSingleCompanyDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getSingleCompanyDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleCompanyDetailsCall(companyId, companyId2, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        }


        /**
         * Execute getSingleCompanyDetails request
         * @return List&lt;EmpPersonDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpPersonDetails> execute() throws ApiException {
            ApiResponse<List<EmpPersonDetails>> localVarResp = getSingleCompanyDetailsWithHttpInfo(companyId, companyId2, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleCompanyDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpPersonDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpPersonDetails>> executeWithHttpInfo() throws ApiException {
            return getSingleCompanyDetailsWithHttpInfo(companyId, companyId2, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage);
        }

        /**
         * Execute getSingleCompanyDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpPersonDetails>> _callback) throws ApiException {
            return getSingleCompanyDetailsAsync(companyId, companyId2, employeeId, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        }
    }

    /**
     * Get all person details for a single company
     * Get all person details for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Person Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/person-details?dateTimeCreated&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/person-details?dateTimeCreated&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/person-details?dateTimeCreated&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/person-details?dateTimeCreated&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param companyId  (required)
     * @return GetSingleCompanyDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleCompanyDetailsRequestBuilder getSingleCompanyDetails(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetSingleCompanyDetailsRequestBuilder(companyId);
    }
    private okhttp3.Call getSingleDetailRecordCall(String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/person-details/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleDetailRecordValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getSingleDetailRecord(Async)");
        }

        return getSingleDetailRecordCall(employeeId, _callback);

    }


    private ApiResponse<EmpPersonDetails> getSingleDetailRecordWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getSingleDetailRecordValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<EmpPersonDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleDetailRecordAsync(String employeeId, final ApiCallback<EmpPersonDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleDetailRecordValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<EmpPersonDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleDetailRecordRequestBuilder {
        private final String employeeId;

        private GetSingleDetailRecordRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for getSingleDetailRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleDetailRecordCall(employeeId, _callback);
        }


        /**
         * Execute getSingleDetailRecord request
         * @return EmpPersonDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public EmpPersonDetails execute() throws ApiException {
            ApiResponse<EmpPersonDetails> localVarResp = getSingleDetailRecordWithHttpInfo(employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleDetailRecord request with HTTP info returned
         * @return ApiResponse&lt;EmpPersonDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmpPersonDetails> executeWithHttpInfo() throws ApiException {
            return getSingleDetailRecordWithHttpInfo(employeeId);
        }

        /**
         * Execute getSingleDetailRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmpPersonDetails> _callback) throws ApiException {
            return getSingleDetailRecordAsync(employeeId, _callback);
        }
    }

    /**
     * Get a single person detail record
     * Get a single person detail record.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Person Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /person-details/{employeeId}?dateTimeCreated&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /person-details/{employeeId}?dateTimeCreated&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /person-details/{employeeId}?dateTimeCreated&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /person-details/{employeeId}?dateTimeCreated&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param employeeId  (required)
     * @return GetSingleDetailRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleDetailRecordRequestBuilder getSingleDetailRecord(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetSingleDetailRecordRequestBuilder(employeeId);
    }
    private okhttp3.Call getSingleRecordCall(String companyId, String employeeId, String companyId2, String employeeId2, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/companies/{companyId}/employees/{employeeId}/person-details"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId2));
        }

        if (employeeId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId2));
        }

        if (lastName != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("lastName", lastName));
        }

        if (emailAddress != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("emailAddress", emailAddress));
        }

        if (addressState != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressState", addressState));
        }

        if (addressCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("addressCountry", addressCountry));
        }

        if (cobraIsActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraIsActive", cobraIsActive));
        }

        if (cobraStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraStatus", cobraStatus));
        }

        if (dateOfCobraEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfCobraEvent", dateOfCobraEvent));
        }

        if (dateTimeCreated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeCreated", dateTimeCreated));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (nationalId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalId", nationalId));
        }

        if (nationalIdCountry != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("nationalIdCountry", nationalIdCountry));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getSingleRecordValidateBeforeCall(String companyId, String employeeId, String companyId2, String employeeId2, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getSingleRecord(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getSingleRecord(Async)");
        }

        return getSingleRecordCall(companyId, employeeId, companyId2, employeeId2, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);

    }


    private ApiResponse<List<EmpPersonDetails>> getSingleRecordWithHttpInfo(String companyId, String employeeId, String companyId2, String employeeId2, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getSingleRecordValidateBeforeCall(companyId, employeeId, companyId2, employeeId2, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpPersonDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getSingleRecordAsync(String companyId, String employeeId, String companyId2, String employeeId2, String lastName, String emailAddress, String addressState, String addressCountry, String cobraIsActive, String cobraStatus, String dateOfCobraEvent, String dateTimeCreated, String dateTimeChanged, String nationalId, String nationalIdCountry, Integer page, Integer perPage, final ApiCallback<List<EmpPersonDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getSingleRecordValidateBeforeCall(companyId, employeeId, companyId2, employeeId2, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpPersonDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetSingleRecordRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private String companyId2;
        private String employeeId2;
        private String lastName;
        private String emailAddress;
        private String addressState;
        private String addressCountry;
        private String cobraIsActive;
        private String cobraStatus;
        private String dateOfCobraEvent;
        private String dateTimeCreated;
        private String dateTimeChanged;
        private String nationalId;
        private String nationalIdCountry;
        private Integer page;
        private Integer perPage;

        private GetSingleRecordRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set companyId2
         * @param companyId2  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder companyId2(String companyId2) {
            this.companyId2 = companyId2;
            return this;
        }
        
        /**
         * Set employeeId2
         * @param employeeId2  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder employeeId2(String employeeId2) {
            this.employeeId2 = employeeId2;
            return this;
        }
        
        /**
         * Set lastName
         * @param lastName  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder lastName(String lastName) {
            this.lastName = lastName;
            return this;
        }
        
        /**
         * Set emailAddress
         * @param emailAddress  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder emailAddress(String emailAddress) {
            this.emailAddress = emailAddress;
            return this;
        }
        
        /**
         * Set addressState
         * @param addressState  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder addressState(String addressState) {
            this.addressState = addressState;
            return this;
        }
        
        /**
         * Set addressCountry
         * @param addressCountry  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder addressCountry(String addressCountry) {
            this.addressCountry = addressCountry;
            return this;
        }
        
        /**
         * Set cobraIsActive
         * @param cobraIsActive  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder cobraIsActive(String cobraIsActive) {
            this.cobraIsActive = cobraIsActive;
            return this;
        }
        
        /**
         * Set cobraStatus
         * @param cobraStatus  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder cobraStatus(String cobraStatus) {
            this.cobraStatus = cobraStatus;
            return this;
        }
        
        /**
         * Set dateOfCobraEvent
         * @param dateOfCobraEvent Used to find date of COBRA event less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder dateOfCobraEvent(String dateOfCobraEvent) {
            this.dateOfCobraEvent = dateOfCobraEvent;
            return this;
        }
        
        /**
         * Set dateTimeCreated
         * @param dateTimeCreated Used to find person record created less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder dateTimeCreated(String dateTimeCreated) {
            this.dateTimeCreated = dateTimeCreated;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged Used to find person record changed less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set nationalId
         * @param nationalId  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder nationalId(String nationalId) {
            this.nationalId = nationalId;
            return this;
        }
        
        /**
         * Set nationalIdCountry
         * @param nationalIdCountry  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder nationalIdCountry(String nationalIdCountry) {
            this.nationalIdCountry = nationalIdCountry;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetSingleRecordRequestBuilder
         */
        public GetSingleRecordRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getSingleRecord
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getSingleRecordCall(companyId, employeeId, companyId2, employeeId2, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        }


        /**
         * Execute getSingleRecord request
         * @return List&lt;EmpPersonDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpPersonDetails> execute() throws ApiException {
            ApiResponse<List<EmpPersonDetails>> localVarResp = getSingleRecordWithHttpInfo(companyId, employeeId, companyId2, employeeId2, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getSingleRecord request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpPersonDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpPersonDetails>> executeWithHttpInfo() throws ApiException {
            return getSingleRecordWithHttpInfo(companyId, employeeId, companyId2, employeeId2, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage);
        }

        /**
         * Execute getSingleRecord request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpPersonDetails>> _callback) throws ApiException {
            return getSingleRecordAsync(companyId, employeeId, companyId2, employeeId2, lastName, emailAddress, addressState, addressCountry, cobraIsActive, cobraStatus, dateOfCobraEvent, dateTimeCreated, dateTimeChanged, nationalId, nationalIdCountry, page, perPage, _callback);
        }
    }

    /**
     * Get a single person detail record for a single company
     * Get a single person detail record for a single company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Person Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/person-details?dateTimeCreated&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param companyId  (required)
     * @param employeeId  (required)
     * @return GetSingleRecordRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
     </table>
     */
    public GetSingleRecordRequestBuilder getSingleRecord(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetSingleRecordRequestBuilder(companyId, employeeId);
    }
}
