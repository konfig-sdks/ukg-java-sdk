/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeIdsResponse;
import com.konfigthis.client.model.Identifiers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeeIdLookupApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeeIdLookupApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeeIdLookupApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call byCompanyIdsCall(List<Identifiers> identifiers, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = identifiers;

        // create path and map variables
        String localVarPath = "/personnel/v1/employee-ids";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml",
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call byCompanyIdsValidateBeforeCall(List<Identifiers> identifiers, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'identifiers' is set
        if (identifiers == null) {
            throw new ApiException("Missing the required parameter 'identifiers' when calling byCompanyIds(Async)");
        }

        return byCompanyIdsCall(identifiers, _callback);

    }


    private ApiResponse<List<EmployeeIdsResponse>> byCompanyIdsWithHttpInfo(List<Identifiers> identifiers) throws ApiException {
        okhttp3.Call localVarCall = byCompanyIdsValidateBeforeCall(identifiers, null);
        Type localVarReturnType = new TypeToken<List<EmployeeIdsResponse>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call byCompanyIdsAsync(List<Identifiers> identifiers, final ApiCallback<List<EmployeeIdsResponse>> _callback) throws ApiException {

        okhttp3.Call localVarCall = byCompanyIdsValidateBeforeCall(identifiers, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeeIdsResponse>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ByCompanyIdsRequestBuilder {
        private List<Identifiers> identifiers;

        private ByCompanyIdsRequestBuilder() {
        }

        /**
         * Set identifiers
         * @param identifiers  (optional)
         * @return ByCompanyIdsRequestBuilder
         */
        public ByCompanyIdsRequestBuilder identifiers(List<Identifiers> identifiers) {
            this.identifiers = identifiers;
            return this;
        }

        /**
         * Build call for byCompanyIds
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            List<Identifiers> identifiers = buildBodyParams();
            return byCompanyIdsCall(identifiers, _callback);
        }

        private List<Identifiers> buildBodyParams() {
            return this.identifiers;
        }

        /**
         * Execute byCompanyIds request
         * @return List&lt;EmployeeIdsResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeeIdsResponse> execute() throws ApiException {
            List<Identifiers> identifiers = buildBodyParams();
            ApiResponse<List<EmployeeIdsResponse>> localVarResp = byCompanyIdsWithHttpInfo(identifiers);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute byCompanyIds request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeeIdsResponse&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeeIdsResponse>> executeWithHttpInfo() throws ApiException {
            List<Identifiers> identifiers = buildBodyParams();
            return byCompanyIdsWithHttpInfo(identifiers);
        }

        /**
         * Execute byCompanyIds request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
            <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeeIdsResponse>> _callback) throws ApiException {
            List<Identifiers> identifiers = buildBodyParams();
            return byCompanyIdsAsync(identifiers, _callback);
        }
    }

    /**
     * Employee ID Lookup
     * Look up Employee ID/Company ID. This operation is a POST due the sensitive nature of the lookup properties not appropriate for URI. This service also supports multiple records to be looked up in the body of the request (array of Identifier objects). Permissions - Ultipro service account must have the \&quot;View\&quot; and \&quot;Add\&quot; roles for the \&quot;Personnel Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password})
     * @param identifiers  (required)
     * @return ByCompanyIdsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 207 </td><td> Multi-Status </td><td>  -  </td></tr>
        <tr><td> 403 </td><td> Forbidden </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests (Exceeded Rate Limit) </td><td>  -  </td></tr>
     </table>
     */
    public ByCompanyIdsRequestBuilder byCompanyIds() throws IllegalArgumentException {
        return new ByCompanyIdsRequestBuilder();
    }
}
