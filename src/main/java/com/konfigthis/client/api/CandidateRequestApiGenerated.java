/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.BackgroundChecks;
import com.konfigthis.client.model.BackgroundChecksApplication;
import com.konfigthis.client.model.BackgroundChecksAuthor;
import com.konfigthis.client.model.BackgroundChecksPackages;
import com.konfigthis.client.model.Links;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CandidateRequestApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CandidateRequestApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CandidateRequestApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call addBackgroundCheckCall(String candidateId, String tenantAlias, BackgroundChecks backgroundChecks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backgroundChecks;

        // create path and map variables
        String localVarPath = "/{tenant-alias}/api/candidates/{candidate-id}/background-checks"
            .replace("{" + "candidate-id" + "}", localVarApiClient.escapeString(candidateId.toString()))
            .replace("{" + "tenant-alias" + "}", localVarApiClient.escapeString(tenantAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call addBackgroundCheckValidateBeforeCall(String candidateId, String tenantAlias, BackgroundChecks backgroundChecks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling addBackgroundCheck(Async)");
        }

        // verify the required parameter 'tenantAlias' is set
        if (tenantAlias == null) {
            throw new ApiException("Missing the required parameter 'tenantAlias' when calling addBackgroundCheck(Async)");
        }

        return addBackgroundCheckCall(candidateId, tenantAlias, backgroundChecks, _callback);

    }


    private ApiResponse<BackgroundChecks> addBackgroundCheckWithHttpInfo(String candidateId, String tenantAlias, BackgroundChecks backgroundChecks) throws ApiException {
        okhttp3.Call localVarCall = addBackgroundCheckValidateBeforeCall(candidateId, tenantAlias, backgroundChecks, null);
        Type localVarReturnType = new TypeToken<BackgroundChecks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call addBackgroundCheckAsync(String candidateId, String tenantAlias, BackgroundChecks backgroundChecks, final ApiCallback<BackgroundChecks> _callback) throws ApiException {

        okhttp3.Call localVarCall = addBackgroundCheckValidateBeforeCall(candidateId, tenantAlias, backgroundChecks, _callback);
        Type localVarReturnType = new TypeToken<BackgroundChecks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class AddBackgroundCheckRequestBuilder {
        private final BackgroundChecksAuthor author;
        private final BackgroundChecksApplication application;
        private final String status;
        private final String orderNumber;
        private final BackgroundChecksPackages packages;
        private final String candidateId;
        private final String tenantAlias;
        private List<Links> links;

        private AddBackgroundCheckRequestBuilder(BackgroundChecksAuthor author, BackgroundChecksApplication application, String status, String orderNumber, BackgroundChecksPackages packages, String candidateId, String tenantAlias) {
            this.author = author;
            this.application = application;
            this.status = status;
            this.orderNumber = orderNumber;
            this.packages = packages;
            this.candidateId = candidateId;
            this.tenantAlias = tenantAlias;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return AddBackgroundCheckRequestBuilder
         */
        public AddBackgroundCheckRequestBuilder links(List<Links> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for addBackgroundCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            return addBackgroundCheckCall(candidateId, tenantAlias, backgroundChecks, _callback);
        }

        private BackgroundChecks buildBodyParams() {
            BackgroundChecks backgroundChecks = new BackgroundChecks();
            backgroundChecks.author(this.author);
            backgroundChecks.application(this.application);
            backgroundChecks.status(this.status);
            backgroundChecks.orderNumber(this.orderNumber);
            backgroundChecks.packages(this.packages);
            backgroundChecks.links(this.links);
            return backgroundChecks;
        }

        /**
         * Execute addBackgroundCheck request
         * @return BackgroundChecks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public BackgroundChecks execute() throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            ApiResponse<BackgroundChecks> localVarResp = addBackgroundCheckWithHttpInfo(candidateId, tenantAlias, backgroundChecks);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute addBackgroundCheck request with HTTP info returned
         * @return ApiResponse&lt;BackgroundChecks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BackgroundChecks> executeWithHttpInfo() throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            return addBackgroundCheckWithHttpInfo(candidateId, tenantAlias, backgroundChecks);
        }

        /**
         * Execute addBackgroundCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BackgroundChecks> _callback) throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            return addBackgroundCheckAsync(candidateId, tenantAlias, backgroundChecks, _callback);
        }
    }

    /**
     * Background Check Request
     * Add Background Check to Candidate
     * @param candidateId  (required)
     * @param tenantAlias  (required)
     * @return AddBackgroundCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
     </table>
     */
    public AddBackgroundCheckRequestBuilder addBackgroundCheck(BackgroundChecksAuthor author, BackgroundChecksApplication application, String status, String orderNumber, BackgroundChecksPackages packages, String candidateId, String tenantAlias) throws IllegalArgumentException {
        if (author == null) throw new IllegalArgumentException("\"author\" is required but got null");
        if (application == null) throw new IllegalArgumentException("\"application\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (orderNumber == null) throw new IllegalArgumentException("\"orderNumber\" is required but got null");
            

        if (packages == null) throw new IllegalArgumentException("\"packages\" is required but got null");
        if (candidateId == null) throw new IllegalArgumentException("\"candidateId\" is required but got null");
            

        if (tenantAlias == null) throw new IllegalArgumentException("\"tenantAlias\" is required but got null");
            

        return new AddBackgroundCheckRequestBuilder(author, application, status, orderNumber, packages, candidateId, tenantAlias);
    }
    private okhttp3.Call updateBackgroundCheckCall(String candidateId, String backgroundCheckId, String tenantAlias, BackgroundChecks backgroundChecks, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = backgroundChecks;

        // create path and map variables
        String localVarPath = "/{tenant-alias}/api/candidates/{candidate-id}/background-checks/{background-check-id}"
            .replace("{" + "candidate-id" + "}", localVarApiClient.escapeString(candidateId.toString()))
            .replace("{" + "background-check-id" + "}", localVarApiClient.escapeString(backgroundCheckId.toString()))
            .replace("{" + "tenant-alias" + "}", localVarApiClient.escapeString(tenantAlias.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call updateBackgroundCheckValidateBeforeCall(String candidateId, String backgroundCheckId, String tenantAlias, BackgroundChecks backgroundChecks, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'candidateId' is set
        if (candidateId == null) {
            throw new ApiException("Missing the required parameter 'candidateId' when calling updateBackgroundCheck(Async)");
        }

        // verify the required parameter 'backgroundCheckId' is set
        if (backgroundCheckId == null) {
            throw new ApiException("Missing the required parameter 'backgroundCheckId' when calling updateBackgroundCheck(Async)");
        }

        // verify the required parameter 'tenantAlias' is set
        if (tenantAlias == null) {
            throw new ApiException("Missing the required parameter 'tenantAlias' when calling updateBackgroundCheck(Async)");
        }

        return updateBackgroundCheckCall(candidateId, backgroundCheckId, tenantAlias, backgroundChecks, _callback);

    }


    private ApiResponse<BackgroundChecks> updateBackgroundCheckWithHttpInfo(String candidateId, String backgroundCheckId, String tenantAlias, BackgroundChecks backgroundChecks) throws ApiException {
        okhttp3.Call localVarCall = updateBackgroundCheckValidateBeforeCall(candidateId, backgroundCheckId, tenantAlias, backgroundChecks, null);
        Type localVarReturnType = new TypeToken<BackgroundChecks>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call updateBackgroundCheckAsync(String candidateId, String backgroundCheckId, String tenantAlias, BackgroundChecks backgroundChecks, final ApiCallback<BackgroundChecks> _callback) throws ApiException {

        okhttp3.Call localVarCall = updateBackgroundCheckValidateBeforeCall(candidateId, backgroundCheckId, tenantAlias, backgroundChecks, _callback);
        Type localVarReturnType = new TypeToken<BackgroundChecks>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class UpdateBackgroundCheckRequestBuilder {
        private final BackgroundChecksAuthor author;
        private final BackgroundChecksApplication application;
        private final String status;
        private final String orderNumber;
        private final BackgroundChecksPackages packages;
        private final String candidateId;
        private final String backgroundCheckId;
        private final String tenantAlias;
        private List<Links> links;

        private UpdateBackgroundCheckRequestBuilder(BackgroundChecksAuthor author, BackgroundChecksApplication application, String status, String orderNumber, BackgroundChecksPackages packages, String candidateId, String backgroundCheckId, String tenantAlias) {
            this.author = author;
            this.application = application;
            this.status = status;
            this.orderNumber = orderNumber;
            this.packages = packages;
            this.candidateId = candidateId;
            this.backgroundCheckId = backgroundCheckId;
            this.tenantAlias = tenantAlias;
        }

        /**
         * Set links
         * @param links  (optional)
         * @return UpdateBackgroundCheckRequestBuilder
         */
        public UpdateBackgroundCheckRequestBuilder links(List<Links> links) {
            this.links = links;
            return this;
        }
        
        /**
         * Build call for updateBackgroundCheck
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            return updateBackgroundCheckCall(candidateId, backgroundCheckId, tenantAlias, backgroundChecks, _callback);
        }

        private BackgroundChecks buildBodyParams() {
            BackgroundChecks backgroundChecks = new BackgroundChecks();
            backgroundChecks.author(this.author);
            backgroundChecks.application(this.application);
            backgroundChecks.status(this.status);
            backgroundChecks.orderNumber(this.orderNumber);
            backgroundChecks.packages(this.packages);
            backgroundChecks.links(this.links);
            return backgroundChecks;
        }

        /**
         * Execute updateBackgroundCheck request
         * @return BackgroundChecks
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public BackgroundChecks execute() throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            ApiResponse<BackgroundChecks> localVarResp = updateBackgroundCheckWithHttpInfo(candidateId, backgroundCheckId, tenantAlias, backgroundChecks);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute updateBackgroundCheck request with HTTP info returned
         * @return ApiResponse&lt;BackgroundChecks&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<BackgroundChecks> executeWithHttpInfo() throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            return updateBackgroundCheckWithHttpInfo(candidateId, backgroundCheckId, tenantAlias, backgroundChecks);
        }

        /**
         * Execute updateBackgroundCheck request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<BackgroundChecks> _callback) throws ApiException {
            BackgroundChecks backgroundChecks = buildBodyParams();
            return updateBackgroundCheckAsync(candidateId, backgroundCheckId, tenantAlias, backgroundChecks, _callback);
        }
    }

    /**
     * Background Check Status
     * Update Candidate Background Check
     * @param candidateId  (required)
     * @param backgroundCheckId  (required)
     * @param tenantAlias  (required)
     * @return UpdateBackgroundCheckRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> Response object. </td><td>  -  </td></tr>
     </table>
     */
    public UpdateBackgroundCheckRequestBuilder updateBackgroundCheck(BackgroundChecksAuthor author, BackgroundChecksApplication application, String status, String orderNumber, BackgroundChecksPackages packages, String candidateId, String backgroundCheckId, String tenantAlias) throws IllegalArgumentException {
        if (author == null) throw new IllegalArgumentException("\"author\" is required but got null");
        if (application == null) throw new IllegalArgumentException("\"application\" is required but got null");
        if (status == null) throw new IllegalArgumentException("\"status\" is required but got null");
            

        if (orderNumber == null) throw new IllegalArgumentException("\"orderNumber\" is required but got null");
            

        if (packages == null) throw new IllegalArgumentException("\"packages\" is required but got null");
        if (candidateId == null) throw new IllegalArgumentException("\"candidateId\" is required but got null");
            

        if (backgroundCheckId == null) throw new IllegalArgumentException("\"backgroundCheckId\" is required but got null");
            

        if (tenantAlias == null) throw new IllegalArgumentException("\"tenantAlias\" is required but got null");
            

        return new UpdateBackgroundCheckRequestBuilder(author, application, status, orderNumber, packages, candidateId, backgroundCheckId, tenantAlias);
    }
}
