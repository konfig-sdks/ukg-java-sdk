/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.DirectDepositModel;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class DirectDepositApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public DirectDepositApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public DirectDepositApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call listDirectDepositDetailsByCompanyCall(String companyId, String accountIsInactive, String employeeId, String companyId2, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/v1/companies/{companyId}/direct-deposit"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountIsInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIsInactive", accountIsInactive));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (companyId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId2));
        }

        if (employeeBankRoutingNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeBankRoutingNumber", employeeBankRoutingNumber));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDirectDepositDetailsByCompanyValidateBeforeCall(String companyId, String accountIsInactive, String employeeId, String companyId2, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling listDirectDepositDetailsByCompany(Async)");
        }

        return listDirectDepositDetailsByCompanyCall(companyId, accountIsInactive, employeeId, companyId2, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);

    }


    private ApiResponse<List<DirectDepositModel>> listDirectDepositDetailsByCompanyWithHttpInfo(String companyId, String accountIsInactive, String employeeId, String companyId2, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listDirectDepositDetailsByCompanyValidateBeforeCall(companyId, accountIsInactive, employeeId, companyId2, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<DirectDepositModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listDirectDepositDetailsByCompanyAsync(String companyId, String accountIsInactive, String employeeId, String companyId2, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage, final ApiCallback<List<DirectDepositModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDirectDepositDetailsByCompanyValidateBeforeCall(companyId, accountIsInactive, employeeId, companyId2, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<DirectDepositModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListDirectDepositDetailsByCompanyRequestBuilder {
        private final String companyId;
        private String accountIsInactive;
        private String employeeId;
        private String companyId2;
        private String employeeBankRoutingNumber;
        private String countryCode;
        private String dateTimeChanged;
        private Integer page;
        private Integer perPage;

        private ListDirectDepositDetailsByCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set accountIsInactive
         * @param accountIsInactive  (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder accountIsInactive(String accountIsInactive) {
            this.accountIsInactive = accountIsInactive;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set companyId2
         * @param companyId2  (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder companyId2(String companyId2) {
            this.companyId2 = companyId2;
            return this;
        }
        
        /**
         * Set employeeBankRoutingNumber
         * @param employeeBankRoutingNumber  (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder employeeBankRoutingNumber(String employeeBankRoutingNumber) {
            this.employeeBankRoutingNumber = employeeBankRoutingNumber;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged Used to find direct deposit record changed date less than, greater than, equal to, or between passed date(s) (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return ListDirectDepositDetailsByCompanyRequestBuilder
         */
        public ListDirectDepositDetailsByCompanyRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listDirectDepositDetailsByCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listDirectDepositDetailsByCompanyCall(companyId, accountIsInactive, employeeId, companyId2, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);
        }


        /**
         * Execute listDirectDepositDetailsByCompany request
         * @return List&lt;DirectDepositModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public List<DirectDepositModel> execute() throws ApiException {
            ApiResponse<List<DirectDepositModel>> localVarResp = listDirectDepositDetailsByCompanyWithHttpInfo(companyId, accountIsInactive, employeeId, companyId2, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listDirectDepositDetailsByCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DirectDepositModel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DirectDepositModel>> executeWithHttpInfo() throws ApiException {
            return listDirectDepositDetailsByCompanyWithHttpInfo(companyId, accountIsInactive, employeeId, companyId2, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage);
        }

        /**
         * Execute listDirectDepositDetailsByCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DirectDepositModel>> _callback) throws ApiException {
            return listDirectDepositDetailsByCompanyAsync(companyId, accountIsInactive, employeeId, companyId2, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);
        }
    }

    /**
     * Get list of direct deposit details for US and Canadian employees by company
     * Get list of direct deposit details for US and Canadian employees by company.   If no pagination parameters specified, the default/max is applied. Permissions - UltiPro service account must have \&quot;View\&quot; role for the \&quot;Employee Direct Deposit\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/direct-deposit?dateTimeChanged&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/direct-deposit?dateTimeChanged&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/direct-deposit?dateTimeChanged&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/direct-deposit?dateTimeChanged&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param companyId  (required)
     * @return ListDirectDepositDetailsByCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListDirectDepositDetailsByCompanyRequestBuilder listDirectDepositDetailsByCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new ListDirectDepositDetailsByCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call listEmployeeDirectDepositDetailsCall(String accountIsInactive, String employeeId, String companyId, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/v1/direct-deposit";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (accountIsInactive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("accountIsInactive", accountIsInactive));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (employeeBankRoutingNumber != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeBankRoutingNumber", employeeBankRoutingNumber));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (dateTimeChanged != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateTimeChanged", dateTimeChanged));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listEmployeeDirectDepositDetailsValidateBeforeCall(String accountIsInactive, String employeeId, String companyId, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return listEmployeeDirectDepositDetailsCall(accountIsInactive, employeeId, companyId, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);

    }


    private ApiResponse<List<DirectDepositModel>> listEmployeeDirectDepositDetailsWithHttpInfo(String accountIsInactive, String employeeId, String companyId, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = listEmployeeDirectDepositDetailsValidateBeforeCall(accountIsInactive, employeeId, companyId, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<DirectDepositModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call listEmployeeDirectDepositDetailsAsync(String accountIsInactive, String employeeId, String companyId, String employeeBankRoutingNumber, String countryCode, String dateTimeChanged, Integer page, Integer perPage, final ApiCallback<List<DirectDepositModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = listEmployeeDirectDepositDetailsValidateBeforeCall(accountIsInactive, employeeId, companyId, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<DirectDepositModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ListEmployeeDirectDepositDetailsRequestBuilder {
        private String accountIsInactive;
        private String employeeId;
        private String companyId;
        private String employeeBankRoutingNumber;
        private String countryCode;
        private String dateTimeChanged;
        private Integer page;
        private Integer perPage;

        private ListEmployeeDirectDepositDetailsRequestBuilder() {
        }

        /**
         * Set accountIsInactive
         * @param accountIsInactive  (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder accountIsInactive(String accountIsInactive) {
            this.accountIsInactive = accountIsInactive;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set companyId
         * @param companyId  (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set employeeBankRoutingNumber
         * @param employeeBankRoutingNumber  (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder employeeBankRoutingNumber(String employeeBankRoutingNumber) {
            this.employeeBankRoutingNumber = employeeBankRoutingNumber;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set dateTimeChanged
         * @param dateTimeChanged Used to find direct deposit record changed date less than, greater than, equal to, or between passed date(s) (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder dateTimeChanged(String dateTimeChanged) {
            this.dateTimeChanged = dateTimeChanged;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return ListEmployeeDirectDepositDetailsRequestBuilder
         */
        public ListEmployeeDirectDepositDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for listEmployeeDirectDepositDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return listEmployeeDirectDepositDetailsCall(accountIsInactive, employeeId, companyId, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);
        }


        /**
         * Execute listEmployeeDirectDepositDetails request
         * @return List&lt;DirectDepositModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public List<DirectDepositModel> execute() throws ApiException {
            ApiResponse<List<DirectDepositModel>> localVarResp = listEmployeeDirectDepositDetailsWithHttpInfo(accountIsInactive, employeeId, companyId, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute listEmployeeDirectDepositDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;DirectDepositModel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<DirectDepositModel>> executeWithHttpInfo() throws ApiException {
            return listEmployeeDirectDepositDetailsWithHttpInfo(accountIsInactive, employeeId, companyId, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage);
        }

        /**
         * Execute listEmployeeDirectDepositDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<DirectDepositModel>> _callback) throws ApiException {
            return listEmployeeDirectDepositDetailsAsync(accountIsInactive, employeeId, companyId, employeeBankRoutingNumber, countryCode, dateTimeChanged, page, perPage, _callback);
        }
    }

    /**
     * Get list of direct deposit details for US and Canadian employees
     * Get list of direct deposit details for US and Canadian employees.   If no pagination parameters specified, the default/max is applied. Permissions - UltiPro service account must have \&quot;View\&quot; role for the \&quot;Employee Direct Deposit\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /direct-deposit?dateTimeChanged&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /direct-deposit?dateTimeChanged&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /direct-deposit?dateTimeChanged&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /direct-deposit?dateTimeChanged&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @return ListEmployeeDirectDepositDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public ListEmployeeDirectDepositDetailsRequestBuilder listEmployeeDirectDepositDetails() throws IllegalArgumentException {
        return new ListEmployeeDirectDepositDetailsRequestBuilder();
    }
}
