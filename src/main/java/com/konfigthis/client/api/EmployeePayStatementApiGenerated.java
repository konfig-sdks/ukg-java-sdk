/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmployeeIdentifier;
import com.konfigthis.client.model.EmployeePayStatementModel;
import com.konfigthis.client.model.EmployeePayStatementRangeFilter;
import java.time.OffsetDateTime;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class EmployeePayStatementApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public EmployeePayStatementApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public EmployeePayStatementApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getByDateRangeCall(EmployeePayStatementRangeFilter employeePayStatementRangeFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePayStatementRangeFilter;

        // create path and map variables
        String localVarPath = "/payroll/v1/employees/pay-statements";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByDateRangeValidateBeforeCall(EmployeePayStatementRangeFilter employeePayStatementRangeFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeePayStatementRangeFilter' is set
        if (employeePayStatementRangeFilter == null) {
            throw new ApiException("Missing the required parameter 'employeePayStatementRangeFilter' when calling getByDateRange(Async)");
        }

        return getByDateRangeCall(employeePayStatementRangeFilter, _callback);

    }


    private ApiResponse<List<EmployeePayStatementModel>> getByDateRangeWithHttpInfo(EmployeePayStatementRangeFilter employeePayStatementRangeFilter) throws ApiException {
        okhttp3.Call localVarCall = getByDateRangeValidateBeforeCall(employeePayStatementRangeFilter, null);
        Type localVarReturnType = new TypeToken<List<EmployeePayStatementModel>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByDateRangeAsync(EmployeePayStatementRangeFilter employeePayStatementRangeFilter, final ApiCallback<List<EmployeePayStatementModel>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByDateRangeValidateBeforeCall(employeePayStatementRangeFilter, _callback);
        Type localVarReturnType = new TypeToken<List<EmployeePayStatementModel>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByDateRangeRequestBuilder {
        private EmployeeIdentifier employeeIdentifier;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private Integer page;
        private Integer perPage;
        private Integer pagesCount;

        private GetByDateRangeRequestBuilder() {
        }

        /**
         * Set employeeIdentifier
         * @param employeeIdentifier  (optional)
         * @return GetByDateRangeRequestBuilder
         */
        public GetByDateRangeRequestBuilder employeeIdentifier(EmployeeIdentifier employeeIdentifier) {
            this.employeeIdentifier = employeeIdentifier;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return GetByDateRangeRequestBuilder
         */
        public GetByDateRangeRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return GetByDateRangeRequestBuilder
         */
        public GetByDateRangeRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetByDateRangeRequestBuilder
         */
        public GetByDateRangeRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetByDateRangeRequestBuilder
         */
        public GetByDateRangeRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set pagesCount
         * @param pagesCount  (optional)
         * @return GetByDateRangeRequestBuilder
         */
        public GetByDateRangeRequestBuilder pagesCount(Integer pagesCount) {
            this.pagesCount = pagesCount;
            return this;
        }
        
        /**
         * Build call for getByDateRange
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            return getByDateRangeCall(employeePayStatementRangeFilter, _callback);
        }

        private EmployeePayStatementRangeFilter buildBodyParams() {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = new EmployeePayStatementRangeFilter();
            employeePayStatementRangeFilter.employeeIdentifier(this.employeeIdentifier);
            employeePayStatementRangeFilter.startDate(this.startDate);
            employeePayStatementRangeFilter.endDate(this.endDate);
            employeePayStatementRangeFilter.page(this.page);
            employeePayStatementRangeFilter.perPage(this.perPage);
            employeePayStatementRangeFilter.pagesCount(this.pagesCount);
            return employeePayStatementRangeFilter;
        }

        /**
         * Execute getByDateRange request
         * @return List&lt;EmployeePayStatementModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public List<EmployeePayStatementModel> execute() throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            ApiResponse<List<EmployeePayStatementModel>> localVarResp = getByDateRangeWithHttpInfo(employeePayStatementRangeFilter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByDateRange request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmployeePayStatementModel&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmployeePayStatementModel>> executeWithHttpInfo() throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            return getByDateRangeWithHttpInfo(employeePayStatementRangeFilter);
        }

        /**
         * Execute getByDateRange request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmployeePayStatementModel>> _callback) throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            return getByDateRangeAsync(employeePayStatementRangeFilter, _callback);
        }
    }

    /**
     * Get employee pay statement(s) based on the passed employee identifier for a given date range.
     * This method returns zero or more pay statements for a specific employee identified by the passed-in employee identifier. The pay statement returned is based on the start date and the end date passed in. &lt;br /&gt;If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Pay Statements\&quot; Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     * @param employeePayStatementRangeFilter  (required)
     * @return GetByDateRangeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetByDateRangeRequestBuilder getByDateRange() throws IllegalArgumentException {
        return new GetByDateRangeRequestBuilder();
    }
    private okhttp3.Call getByPayIdentifierCall(String payIdentifier, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/payroll/v1/employees/pay-statement/{PayIdentifier}"
            .replace("{" + "PayIdentifier" + "}", localVarApiClient.escapeString(payIdentifier.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByPayIdentifierValidateBeforeCall(String payIdentifier, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'payIdentifier' is set
        if (payIdentifier == null) {
            throw new ApiException("Missing the required parameter 'payIdentifier' when calling getByPayIdentifier(Async)");
        }

        return getByPayIdentifierCall(payIdentifier, _callback);

    }


    private ApiResponse<EmployeePayStatementModel> getByPayIdentifierWithHttpInfo(String payIdentifier) throws ApiException {
        okhttp3.Call localVarCall = getByPayIdentifierValidateBeforeCall(payIdentifier, null);
        Type localVarReturnType = new TypeToken<EmployeePayStatementModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByPayIdentifierAsync(String payIdentifier, final ApiCallback<EmployeePayStatementModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByPayIdentifierValidateBeforeCall(payIdentifier, _callback);
        Type localVarReturnType = new TypeToken<EmployeePayStatementModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByPayIdentifierRequestBuilder {
        private final String payIdentifier;

        private GetByPayIdentifierRequestBuilder(String payIdentifier) {
            this.payIdentifier = payIdentifier;
        }

        /**
         * Build call for getByPayIdentifier
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByPayIdentifierCall(payIdentifier, _callback);
        }


        /**
         * Execute getByPayIdentifier request
         * @return EmployeePayStatementModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public EmployeePayStatementModel execute() throws ApiException {
            ApiResponse<EmployeePayStatementModel> localVarResp = getByPayIdentifierWithHttpInfo(payIdentifier);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByPayIdentifier request with HTTP info returned
         * @return ApiResponse&lt;EmployeePayStatementModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeePayStatementModel> executeWithHttpInfo() throws ApiException {
            return getByPayIdentifierWithHttpInfo(payIdentifier);
        }

        /**
         * Execute getByPayIdentifier request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeePayStatementModel> _callback) throws ApiException {
            return getByPayIdentifierAsync(payIdentifier, _callback);
        }
    }

    /**
     * Get employee pay statement based on the given pay identifier.
     * This method returns zero or one pay statements based on the given pay identifier. The pay identifier is a string value that represents a unique pay statement.&lt;br /&gt; If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Pay Statements\&quot; Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password}).
     * @param payIdentifier  (required)
     * @return GetByPayIdentifierRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetByPayIdentifierRequestBuilder getByPayIdentifier(String payIdentifier) throws IllegalArgumentException {
        if (payIdentifier == null) throw new IllegalArgumentException("\"payIdentifier\" is required but got null");
            

        return new GetByPayIdentifierRequestBuilder(payIdentifier);
    }
    private okhttp3.Call getLastPayStatementCall(EmployeePayStatementRangeFilter employeePayStatementRangeFilter, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = employeePayStatementRangeFilter;

        // create path and map variables
        String localVarPath = "/payroll/v1/employees/pay-statement/last";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json",
            "text/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getLastPayStatementValidateBeforeCall(EmployeePayStatementRangeFilter employeePayStatementRangeFilter, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeePayStatementRangeFilter' is set
        if (employeePayStatementRangeFilter == null) {
            throw new ApiException("Missing the required parameter 'employeePayStatementRangeFilter' when calling getLastPayStatement(Async)");
        }

        return getLastPayStatementCall(employeePayStatementRangeFilter, _callback);

    }


    private ApiResponse<EmployeePayStatementModel> getLastPayStatementWithHttpInfo(EmployeePayStatementRangeFilter employeePayStatementRangeFilter) throws ApiException {
        okhttp3.Call localVarCall = getLastPayStatementValidateBeforeCall(employeePayStatementRangeFilter, null);
        Type localVarReturnType = new TypeToken<EmployeePayStatementModel>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getLastPayStatementAsync(EmployeePayStatementRangeFilter employeePayStatementRangeFilter, final ApiCallback<EmployeePayStatementModel> _callback) throws ApiException {

        okhttp3.Call localVarCall = getLastPayStatementValidateBeforeCall(employeePayStatementRangeFilter, _callback);
        Type localVarReturnType = new TypeToken<EmployeePayStatementModel>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetLastPayStatementRequestBuilder {
        private EmployeeIdentifier employeeIdentifier;
        private OffsetDateTime startDate;
        private OffsetDateTime endDate;
        private Integer page;
        private Integer perPage;
        private Integer pagesCount;

        private GetLastPayStatementRequestBuilder() {
        }

        /**
         * Set employeeIdentifier
         * @param employeeIdentifier  (optional)
         * @return GetLastPayStatementRequestBuilder
         */
        public GetLastPayStatementRequestBuilder employeeIdentifier(EmployeeIdentifier employeeIdentifier) {
            this.employeeIdentifier = employeeIdentifier;
            return this;
        }
        
        /**
         * Set startDate
         * @param startDate  (optional)
         * @return GetLastPayStatementRequestBuilder
         */
        public GetLastPayStatementRequestBuilder startDate(OffsetDateTime startDate) {
            this.startDate = startDate;
            return this;
        }
        
        /**
         * Set endDate
         * @param endDate  (optional)
         * @return GetLastPayStatementRequestBuilder
         */
        public GetLastPayStatementRequestBuilder endDate(OffsetDateTime endDate) {
            this.endDate = endDate;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetLastPayStatementRequestBuilder
         */
        public GetLastPayStatementRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetLastPayStatementRequestBuilder
         */
        public GetLastPayStatementRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Set pagesCount
         * @param pagesCount  (optional)
         * @return GetLastPayStatementRequestBuilder
         */
        public GetLastPayStatementRequestBuilder pagesCount(Integer pagesCount) {
            this.pagesCount = pagesCount;
            return this;
        }
        
        /**
         * Build call for getLastPayStatement
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            return getLastPayStatementCall(employeePayStatementRangeFilter, _callback);
        }

        private EmployeePayStatementRangeFilter buildBodyParams() {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = new EmployeePayStatementRangeFilter();
            employeePayStatementRangeFilter.employeeIdentifier(this.employeeIdentifier);
            employeePayStatementRangeFilter.startDate(this.startDate);
            employeePayStatementRangeFilter.endDate(this.endDate);
            employeePayStatementRangeFilter.page(this.page);
            employeePayStatementRangeFilter.perPage(this.perPage);
            employeePayStatementRangeFilter.pagesCount(this.pagesCount);
            return employeePayStatementRangeFilter;
        }

        /**
         * Execute getLastPayStatement request
         * @return EmployeePayStatementModel
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public EmployeePayStatementModel execute() throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            ApiResponse<EmployeePayStatementModel> localVarResp = getLastPayStatementWithHttpInfo(employeePayStatementRangeFilter);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getLastPayStatement request with HTTP info returned
         * @return ApiResponse&lt;EmployeePayStatementModel&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmployeePayStatementModel> executeWithHttpInfo() throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            return getLastPayStatementWithHttpInfo(employeePayStatementRangeFilter);
        }

        /**
         * Execute getLastPayStatement request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmployeePayStatementModel> _callback) throws ApiException {
            EmployeePayStatementRangeFilter employeePayStatementRangeFilter = buildBodyParams();
            return getLastPayStatementAsync(employeePayStatementRangeFilter, _callback);
        }
    }

    /**
     * Get employee last pay statement based on the passed employee identifier.
     * This method allows you to retrieve an individual pay statement by providing an employee identifier. This is helpful if you are designing an application that is aware of the employees to retrieve. &lt;br /&gt;If no pagination parameters specified, the default is applied. Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Pay Statements\&quot; Web Service. Headers - US-Customer-Api-Key, US-Client-id, Authorization ({username}:{password})
     * @param employeePayStatementRangeFilter  (required)
     * @return GetLastPayStatementRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> BadRequest </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetLastPayStatementRequestBuilder getLastPayStatement() throws IllegalArgumentException {
        return new GetLastPayStatementRequestBuilder();
    }
}
