/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.Contact;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class ContactApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public ContactApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public ContactApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getPersonnelContactDetailsCall(String contactId, String employeeId, String isActive, String relationshipCode, String contactId2, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/contacts/{contactId}"
            .replace("{" + "contactId" + "}", localVarApiClient.escapeString(contactId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (relationshipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationshipCode", relationshipCode));
        }

        if (contactId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactId", contactId2));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (cobraIsActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraIsActive", cobraIsActive));
        }

        if (cobraStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraStatus", cobraStatus));
        }

        if (isBeneficiary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBeneficiary", isBeneficiary));
        }

        if (isDependent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDependent", isDependent));
        }

        if (dateOfCobraEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfCobraEvent", dateOfCobraEvent));
        }

        if (statusAsOfDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusAsOfDate", statusAsOfDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonnelContactDetailsValidateBeforeCall(String contactId, String employeeId, String isActive, String relationshipCode, String contactId2, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'contactId' is set
        if (contactId == null) {
            throw new ApiException("Missing the required parameter 'contactId' when calling getPersonnelContactDetails(Async)");
        }

        return getPersonnelContactDetailsCall(contactId, employeeId, isActive, relationshipCode, contactId2, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);

    }


    private ApiResponse<Contact> getPersonnelContactDetailsWithHttpInfo(String contactId, String employeeId, String isActive, String relationshipCode, String contactId2, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPersonnelContactDetailsValidateBeforeCall(contactId, employeeId, isActive, relationshipCode, contactId2, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonnelContactDetailsAsync(String contactId, String employeeId, String isActive, String relationshipCode, String contactId2, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage, final ApiCallback<Contact> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonnelContactDetailsValidateBeforeCall(contactId, employeeId, isActive, relationshipCode, contactId2, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonnelContactDetailsRequestBuilder {
        private final String contactId;
        private String employeeId;
        private String isActive;
        private String relationshipCode;
        private String contactId2;
        private String countryCode;
        private String cobraIsActive;
        private String cobraStatus;
        private String isBeneficiary;
        private String isDependent;
        private String dateOfCobraEvent;
        private String statusAsOfDate;
        private Integer page;
        private Integer perPage;

        private GetPersonnelContactDetailsRequestBuilder(String contactId) {
            this.contactId = contactId;
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder isActive(String isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set relationshipCode
         * @param relationshipCode  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder relationshipCode(String relationshipCode) {
            this.relationshipCode = relationshipCode;
            return this;
        }
        
        /**
         * Set contactId2
         * @param contactId2  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder contactId2(String contactId2) {
            this.contactId2 = contactId2;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set cobraIsActive
         * @param cobraIsActive  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder cobraIsActive(String cobraIsActive) {
            this.cobraIsActive = cobraIsActive;
            return this;
        }
        
        /**
         * Set cobraStatus
         * @param cobraStatus  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder cobraStatus(String cobraStatus) {
            this.cobraStatus = cobraStatus;
            return this;
        }
        
        /**
         * Set isBeneficiary
         * @param isBeneficiary  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder isBeneficiary(String isBeneficiary) {
            this.isBeneficiary = isBeneficiary;
            return this;
        }
        
        /**
         * Set isDependent
         * @param isDependent  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder isDependent(String isDependent) {
            this.isDependent = isDependent;
            return this;
        }
        
        /**
         * Set dateOfCobraEvent
         * @param dateOfCobraEvent Used to find date of COBRA event less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder dateOfCobraEvent(String dateOfCobraEvent) {
            this.dateOfCobraEvent = dateOfCobraEvent;
            return this;
        }
        
        /**
         * Set statusAsOfDate
         * @param statusAsOfDate Used to find contact status as of date less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder statusAsOfDate(String statusAsOfDate) {
            this.statusAsOfDate = statusAsOfDate;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetPersonnelContactDetailsRequestBuilder
         */
        public GetPersonnelContactDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getPersonnelContactDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonnelContactDetailsCall(contactId, employeeId, isActive, relationshipCode, contactId2, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);
        }


        /**
         * Execute getPersonnelContactDetails request
         * @return Contact
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public Contact execute() throws ApiException {
            ApiResponse<Contact> localVarResp = getPersonnelContactDetailsWithHttpInfo(contactId, employeeId, isActive, relationshipCode, contactId2, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonnelContactDetails request with HTTP info returned
         * @return ApiResponse&lt;Contact&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contact> executeWithHttpInfo() throws ApiException {
            return getPersonnelContactDetailsWithHttpInfo(contactId, employeeId, isActive, relationshipCode, contactId2, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage);
        }

        /**
         * Execute getPersonnelContactDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contact> _callback) throws ApiException {
            return getPersonnelContactDetailsAsync(contactId, employeeId, isActive, relationshipCode, contactId2, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);
        }
    }

    /**
     * Get all details for a single person assigned to an employee as a contact
     * Get all details for a single person assigned to an employee as a contact.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Personnel Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /contacts/{contactId}?statusAsOfDate&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /contacts/{contactId}?statusAsOfDate&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /contacts/{contactId}?statusAsOfDate&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /contacts/{contactId}?statusAsOfDate&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param contactId  (required)
     * @return GetPersonnelContactDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonnelContactDetailsRequestBuilder getPersonnelContactDetails(String contactId) throws IllegalArgumentException {
        if (contactId == null) throw new IllegalArgumentException("\"contactId\" is required but got null");
            

        return new GetPersonnelContactDetailsRequestBuilder(contactId);
    }
    private okhttp3.Call getPersonnelDetailsCall(String employeeId, String isActive, String relationshipCode, String contactId, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/contacts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (isActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isActive", isActive));
        }

        if (relationshipCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("relationshipCode", relationshipCode));
        }

        if (contactId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("contactId", contactId));
        }

        if (countryCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("countryCode", countryCode));
        }

        if (cobraIsActive != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraIsActive", cobraIsActive));
        }

        if (cobraStatus != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cobraStatus", cobraStatus));
        }

        if (isBeneficiary != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isBeneficiary", isBeneficiary));
        }

        if (isDependent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isDependent", isDependent));
        }

        if (dateOfCobraEvent != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateOfCobraEvent", dateOfCobraEvent));
        }

        if (statusAsOfDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("statusAsOfDate", statusAsOfDate));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getPersonnelDetailsValidateBeforeCall(String employeeId, String isActive, String relationshipCode, String contactId, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getPersonnelDetailsCall(employeeId, isActive, relationshipCode, contactId, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);

    }


    private ApiResponse<Contact> getPersonnelDetailsWithHttpInfo(String employeeId, String isActive, String relationshipCode, String contactId, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getPersonnelDetailsValidateBeforeCall(employeeId, isActive, relationshipCode, contactId, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, null);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getPersonnelDetailsAsync(String employeeId, String isActive, String relationshipCode, String contactId, String countryCode, String cobraIsActive, String cobraStatus, String isBeneficiary, String isDependent, String dateOfCobraEvent, String statusAsOfDate, Integer page, Integer perPage, final ApiCallback<Contact> _callback) throws ApiException {

        okhttp3.Call localVarCall = getPersonnelDetailsValidateBeforeCall(employeeId, isActive, relationshipCode, contactId, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<Contact>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetPersonnelDetailsRequestBuilder {
        private String employeeId;
        private String isActive;
        private String relationshipCode;
        private String contactId;
        private String countryCode;
        private String cobraIsActive;
        private String cobraStatus;
        private String isBeneficiary;
        private String isDependent;
        private String dateOfCobraEvent;
        private String statusAsOfDate;
        private Integer page;
        private Integer perPage;

        private GetPersonnelDetailsRequestBuilder() {
        }

        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set isActive
         * @param isActive  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder isActive(String isActive) {
            this.isActive = isActive;
            return this;
        }
        
        /**
         * Set relationshipCode
         * @param relationshipCode  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder relationshipCode(String relationshipCode) {
            this.relationshipCode = relationshipCode;
            return this;
        }
        
        /**
         * Set contactId
         * @param contactId  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder contactId(String contactId) {
            this.contactId = contactId;
            return this;
        }
        
        /**
         * Set countryCode
         * @param countryCode  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder countryCode(String countryCode) {
            this.countryCode = countryCode;
            return this;
        }
        
        /**
         * Set cobraIsActive
         * @param cobraIsActive  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder cobraIsActive(String cobraIsActive) {
            this.cobraIsActive = cobraIsActive;
            return this;
        }
        
        /**
         * Set cobraStatus
         * @param cobraStatus  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder cobraStatus(String cobraStatus) {
            this.cobraStatus = cobraStatus;
            return this;
        }
        
        /**
         * Set isBeneficiary
         * @param isBeneficiary  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder isBeneficiary(String isBeneficiary) {
            this.isBeneficiary = isBeneficiary;
            return this;
        }
        
        /**
         * Set isDependent
         * @param isDependent  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder isDependent(String isDependent) {
            this.isDependent = isDependent;
            return this;
        }
        
        /**
         * Set dateOfCobraEvent
         * @param dateOfCobraEvent Used to find date of COBRA event less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder dateOfCobraEvent(String dateOfCobraEvent) {
            this.dateOfCobraEvent = dateOfCobraEvent;
            return this;
        }
        
        /**
         * Set statusAsOfDate
         * @param statusAsOfDate Used to find contact status as of date less than, greater than,equal to, or between passed date(s) (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder statusAsOfDate(String statusAsOfDate) {
            this.statusAsOfDate = statusAsOfDate;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetPersonnelDetailsRequestBuilder
         */
        public GetPersonnelDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getPersonnelDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getPersonnelDetailsCall(employeeId, isActive, relationshipCode, contactId, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);
        }


        /**
         * Execute getPersonnelDetails request
         * @return Contact
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public Contact execute() throws ApiException {
            ApiResponse<Contact> localVarResp = getPersonnelDetailsWithHttpInfo(employeeId, isActive, relationshipCode, contactId, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getPersonnelDetails request with HTTP info returned
         * @return ApiResponse&lt;Contact&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<Contact> executeWithHttpInfo() throws ApiException {
            return getPersonnelDetailsWithHttpInfo(employeeId, isActive, relationshipCode, contactId, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage);
        }

        /**
         * Execute getPersonnelDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<Contact> _callback) throws ApiException {
            return getPersonnelDetailsAsync(employeeId, isActive, relationshipCode, contactId, countryCode, cobraIsActive, cobraStatus, isBeneficiary, isDependent, dateOfCobraEvent, statusAsOfDate, page, perPage, _callback);
        }
    }

    /**
     * Get all details for a person assigned to an employee as a contact
     * Get all details for a person assigned to an employee as a contact.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Personnel Integration\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /contacts?statusAsOfDate&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /contacts?statusAsOfDate&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /contacts?statusAsOfDate&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /contacts?statusAsOfDate&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @return GetPersonnelDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetPersonnelDetailsRequestBuilder getPersonnelDetails() throws IllegalArgumentException {
        return new GetPersonnelDetailsRequestBuilder();
    }
}
