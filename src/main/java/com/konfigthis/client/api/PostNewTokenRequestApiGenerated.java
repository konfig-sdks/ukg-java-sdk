/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.PostNewTokenRequestObtainOAuthTokenRequest;
import com.konfigthis.client.model.TokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class PostNewTokenRequestApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public PostNewTokenRequestApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public PostNewTokenRequestApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call obtainOAuthTokenCall(String tenantName, String grantType, String clientId, String clientSecret, String scope, PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = postNewTokenRequestObtainOAuthTokenRequest;

        // create path and map variables
        String localVarPath = "/signin/oauth2/t/{tenant-name}/access_token"
            .replace("{" + "tenant-name" + "}", localVarApiClient.escapeString(tenantName.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call obtainOAuthTokenValidateBeforeCall(String tenantName, String grantType, String clientId, String clientSecret, String scope, PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'tenantName' is set
        if (tenantName == null) {
            throw new ApiException("Missing the required parameter 'tenantName' when calling obtainOAuthToken(Async)");
        }

        // verify the required parameter 'grantType' is set
        if (grantType == null) {
            throw new ApiException("Missing the required parameter 'grantType' when calling obtainOAuthToken(Async)");
        }

        // verify the required parameter 'clientId' is set
        if (clientId == null) {
            throw new ApiException("Missing the required parameter 'clientId' when calling obtainOAuthToken(Async)");
        }

        // verify the required parameter 'clientSecret' is set
        if (clientSecret == null) {
            throw new ApiException("Missing the required parameter 'clientSecret' when calling obtainOAuthToken(Async)");
        }

        // verify the required parameter 'scope' is set
        if (scope == null) {
            throw new ApiException("Missing the required parameter 'scope' when calling obtainOAuthToken(Async)");
        }

        // verify the required parameter 'postNewTokenRequestObtainOAuthTokenRequest' is set
        if (postNewTokenRequestObtainOAuthTokenRequest == null) {
            throw new ApiException("Missing the required parameter 'postNewTokenRequestObtainOAuthTokenRequest' when calling obtainOAuthToken(Async)");
        }

        return obtainOAuthTokenCall(tenantName, grantType, clientId, clientSecret, scope, postNewTokenRequestObtainOAuthTokenRequest, _callback);

    }


    private ApiResponse<TokenResponse> obtainOAuthTokenWithHttpInfo(String tenantName, String grantType, String clientId, String clientSecret, String scope, PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest) throws ApiException {
        okhttp3.Call localVarCall = obtainOAuthTokenValidateBeforeCall(tenantName, grantType, clientId, clientSecret, scope, postNewTokenRequestObtainOAuthTokenRequest, null);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call obtainOAuthTokenAsync(String tenantName, String grantType, String clientId, String clientSecret, String scope, PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest, final ApiCallback<TokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = obtainOAuthTokenValidateBeforeCall(tenantName, grantType, clientId, clientSecret, scope, postNewTokenRequestObtainOAuthTokenRequest, _callback);
        Type localVarReturnType = new TypeToken<TokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class ObtainOAuthTokenRequestBuilder {
        private final String tenantName;
        private final String grantType;
        private final String clientId;
        private final String clientSecret;
        private final String scope;

        private ObtainOAuthTokenRequestBuilder(String tenantName, String grantType, String clientId, String clientSecret, String scope) {
            this.tenantName = tenantName;
            this.grantType = grantType;
            this.clientId = clientId;
            this.clientSecret = clientSecret;
            this.scope = scope;
        }

        /**
         * Build call for obtainOAuthToken
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest = buildBodyParams();
            return obtainOAuthTokenCall(tenantName, grantType, clientId, clientSecret, scope, postNewTokenRequestObtainOAuthTokenRequest, _callback);
        }

        private PostNewTokenRequestObtainOAuthTokenRequest buildBodyParams() {
            PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest = new PostNewTokenRequestObtainOAuthTokenRequest();
            postNewTokenRequestObtainOAuthTokenRequest.grantType(this.grantType);
            postNewTokenRequestObtainOAuthTokenRequest.clientId(this.clientId);
            postNewTokenRequestObtainOAuthTokenRequest.clientSecret(this.clientSecret);
            postNewTokenRequestObtainOAuthTokenRequest.scope(this.scope);
            return postNewTokenRequestObtainOAuthTokenRequest;
        }

        /**
         * Execute obtainOAuthToken request
         * @return TokenResponse
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public TokenResponse execute() throws ApiException {
            PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest = buildBodyParams();
            ApiResponse<TokenResponse> localVarResp = obtainOAuthTokenWithHttpInfo(tenantName, grantType, clientId, clientSecret, scope, postNewTokenRequestObtainOAuthTokenRequest);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute obtainOAuthToken request with HTTP info returned
         * @return ApiResponse&lt;TokenResponse&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<TokenResponse> executeWithHttpInfo() throws ApiException {
            PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest = buildBodyParams();
            return obtainOAuthTokenWithHttpInfo(tenantName, grantType, clientId, clientSecret, scope, postNewTokenRequestObtainOAuthTokenRequest);
        }

        /**
         * Execute obtainOAuthToken request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<TokenResponse> _callback) throws ApiException {
            PostNewTokenRequestObtainOAuthTokenRequest postNewTokenRequestObtainOAuthTokenRequest = buildBodyParams();
            return obtainOAuthTokenAsync(tenantName, grantType, clientId, clientSecret, scope, postNewTokenRequestObtainOAuthTokenRequest, _callback);
        }
    }

    /**
     * Obtain new oAuth token
     * Obtain new token to use in subsequent service requests &lt;b&gt;ONLY&lt;/b&gt; for services that use oAuth.
     * @param tenantName Tenant Name provided to you from UltiPro (required)
     * @param grantType You should enter \\\&quot;client_credentials\\\&quot; for this value (required)
     * @param clientId This is from UltiPro Identity and provided to you (required)
     * @param clientSecret This is from UltiPro Identity and provided to you (required)
     * @param scope you should enter \\\&quot;profile\\\&quot; for this (required)
     * @param postNewTokenRequestObtainOAuthTokenRequest  (required)
     * @return ObtainOAuthTokenRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ObtainOAuthTokenRequestBuilder obtainOAuthToken(String tenantName, String grantType, String clientId, String clientSecret, String scope) throws IllegalArgumentException {
        if (tenantName == null) throw new IllegalArgumentException("\"tenantName\" is required but got null");
            

        if (grantType == null) throw new IllegalArgumentException("\"grantType\" is required but got null");
            

        if (clientId == null) throw new IllegalArgumentException("\"clientId\" is required but got null");
            

        if (clientSecret == null) throw new IllegalArgumentException("\"clientSecret\" is required but got null");
            

        if (scope == null) throw new IllegalArgumentException("\"scope\" is required but got null");
            

        return new ObtainOAuthTokenRequestBuilder(tenantName, grantType, clientId, clientSecret, scope);
    }
}
