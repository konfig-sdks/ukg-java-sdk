/*
 * User Profile Details
 * Configure your UKG Pro Configuration Codes through UKG Pro APIs. Status: R1 deployment
 *
 * The version of the OpenAPI document: v1
 * 
 *
 * NOTE: This class is auto generated by Konfig (https://konfigthis.com).
 * Do not edit the class manually.
 */


package com.konfigthis.client.api;

import com.konfigthis.client.ApiCallback;
import com.konfigthis.client.ApiClient;
import com.konfigthis.client.ApiException;
import com.konfigthis.client.ApiResponse;
import com.konfigthis.client.Configuration;
import com.konfigthis.client.Pair;
import com.konfigthis.client.ProgressRequestBody;
import com.konfigthis.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.konfigthis.client.model.EmpCompensationDetails;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.ws.rs.core.GenericType;

public class CompensationDetailsApiGenerated {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public CompensationDetailsApiGenerated() throws IllegalArgumentException {
        this(Configuration.getDefaultApiClient());
    }

    public CompensationDetailsApiGenerated(ApiClient apiClient) throws IllegalArgumentException {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    private okhttp3.Call getAllByCompanyCall(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/companies/{companyId}/compensation-details"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId2));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (primaryJobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryJobCode", primaryJobCode));
        }

        if (jobGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobGroupCode", jobGroupCode));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (payGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroupCode", payGroupCode));
        }

        if (fullTimeOrPartTimeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullTimeOrPartTimeCode", fullTimeOrPartTimeCode));
        }

        if (salaryOrHourlyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salaryOrHourlyCode", salaryOrHourlyCode));
        }

        if (primaryShiftCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryShiftCode", primaryShiftCode));
        }

        if (primaryShiftGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryShiftGroupCode", primaryShiftGroupCode));
        }

        if (dateInJob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateInJob", dateInJob));
        }

        if (dateLastPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateLastPaid", dateLastPaid));
        }

        if (datePaidThru != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datePaidThru", datePaidThru));
        }

        if (isAutoAllocated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAutoAllocated", isAutoAllocated));
        }

        if (isAutoPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAutoPaid", isAutoPaid));
        }

        if (isSeasonalWorker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSeasonalWorker", isSeasonalWorker));
        }

        if (isHighlyCompensated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHighlyCompensated", isHighlyCompensated));
        }

        if (isMultipleJob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMultipleJob", isMultipleJob));
        }

        if (performanceReviewRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performanceReviewRating", performanceReviewRating));
        }

        if (performanceReviewType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performanceReviewType", performanceReviewType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllByCompanyValidateBeforeCall(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getAllByCompany(Async)");
        }

        return getAllByCompanyCall(companyId, companyId2, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);

    }


    private ApiResponse<List<EmpCompensationDetails>> getAllByCompanyWithHttpInfo(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllByCompanyValidateBeforeCall(companyId, companyId2, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpCompensationDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllByCompanyAsync(String companyId, String companyId2, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback<List<EmpCompensationDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllByCompanyValidateBeforeCall(companyId, companyId2, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpCompensationDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllByCompanyRequestBuilder {
        private final String companyId;
        private String companyId2;
        private String employeeId;
        private String primaryJobCode;
        private String jobGroupCode;
        private String jobTitle;
        private String payGroupCode;
        private String fullTimeOrPartTimeCode;
        private String salaryOrHourlyCode;
        private String primaryShiftCode;
        private String primaryShiftGroupCode;
        private String dateInJob;
        private String dateLastPaid;
        private String datePaidThru;
        private String isAutoAllocated;
        private String isAutoPaid;
        private String isSeasonalWorker;
        private String isHighlyCompensated;
        private String isMultipleJob;
        private String performanceReviewRating;
        private String performanceReviewType;
        private Integer page;
        private Integer perPage;

        private GetAllByCompanyRequestBuilder(String companyId) {
            this.companyId = companyId;
        }

        /**
         * Set companyId2
         * @param companyId2  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder companyId2(String companyId2) {
            this.companyId2 = companyId2;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set primaryJobCode
         * @param primaryJobCode  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder primaryJobCode(String primaryJobCode) {
            this.primaryJobCode = primaryJobCode;
            return this;
        }
        
        /**
         * Set jobGroupCode
         * @param jobGroupCode  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder jobGroupCode(String jobGroupCode) {
            this.jobGroupCode = jobGroupCode;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set payGroupCode
         * @param payGroupCode  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder payGroupCode(String payGroupCode) {
            this.payGroupCode = payGroupCode;
            return this;
        }
        
        /**
         * Set fullTimeOrPartTimeCode
         * @param fullTimeOrPartTimeCode  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
            this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
            return this;
        }
        
        /**
         * Set salaryOrHourlyCode
         * @param salaryOrHourlyCode  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder salaryOrHourlyCode(String salaryOrHourlyCode) {
            this.salaryOrHourlyCode = salaryOrHourlyCode;
            return this;
        }
        
        /**
         * Set primaryShiftCode
         * @param primaryShiftCode  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder primaryShiftCode(String primaryShiftCode) {
            this.primaryShiftCode = primaryShiftCode;
            return this;
        }
        
        /**
         * Set primaryShiftGroupCode
         * @param primaryShiftGroupCode  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder primaryShiftGroupCode(String primaryShiftGroupCode) {
            this.primaryShiftGroupCode = primaryShiftGroupCode;
            return this;
        }
        
        /**
         * Set dateInJob
         * @param dateInJob Used to find date in job less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder dateInJob(String dateInJob) {
            this.dateInJob = dateInJob;
            return this;
        }
        
        /**
         * Set dateLastPaid
         * @param dateLastPaid Used to find date last paid less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder dateLastPaid(String dateLastPaid) {
            this.dateLastPaid = dateLastPaid;
            return this;
        }
        
        /**
         * Set datePaidThru
         * @param datePaidThru Used to find date paid through less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder datePaidThru(String datePaidThru) {
            this.datePaidThru = datePaidThru;
            return this;
        }
        
        /**
         * Set isAutoAllocated
         * @param isAutoAllocated  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder isAutoAllocated(String isAutoAllocated) {
            this.isAutoAllocated = isAutoAllocated;
            return this;
        }
        
        /**
         * Set isAutoPaid
         * @param isAutoPaid  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder isAutoPaid(String isAutoPaid) {
            this.isAutoPaid = isAutoPaid;
            return this;
        }
        
        /**
         * Set isSeasonalWorker
         * @param isSeasonalWorker  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder isSeasonalWorker(String isSeasonalWorker) {
            this.isSeasonalWorker = isSeasonalWorker;
            return this;
        }
        
        /**
         * Set isHighlyCompensated
         * @param isHighlyCompensated  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder isHighlyCompensated(String isHighlyCompensated) {
            this.isHighlyCompensated = isHighlyCompensated;
            return this;
        }
        
        /**
         * Set isMultipleJob
         * @param isMultipleJob  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder isMultipleJob(String isMultipleJob) {
            this.isMultipleJob = isMultipleJob;
            return this;
        }
        
        /**
         * Set performanceReviewRating
         * @param performanceReviewRating  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder performanceReviewRating(String performanceReviewRating) {
            this.performanceReviewRating = performanceReviewRating;
            return this;
        }
        
        /**
         * Set performanceReviewType
         * @param performanceReviewType  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder performanceReviewType(String performanceReviewType) {
            this.performanceReviewType = performanceReviewType;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetAllByCompanyRequestBuilder
         */
        public GetAllByCompanyRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllByCompany
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllByCompanyCall(companyId, companyId2, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        }


        /**
         * Execute getAllByCompany request
         * @return List&lt;EmpCompensationDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpCompensationDetails> execute() throws ApiException {
            ApiResponse<List<EmpCompensationDetails>> localVarResp = getAllByCompanyWithHttpInfo(companyId, companyId2, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllByCompany request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpCompensationDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpCompensationDetails>> executeWithHttpInfo() throws ApiException {
            return getAllByCompanyWithHttpInfo(companyId, companyId2, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage);
        }

        /**
         * Execute getAllByCompany request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpCompensationDetails>> _callback) throws ApiException {
            return getAllByCompanyAsync(companyId, companyId2, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        }
    }

    /**
     * Get all compensation details by company
     * Get all compensation details by company.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Compensation Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/compensation-details?dateInJob&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/compensation-details?dateInJob&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/compensation-details?dateInJob&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/compensation-details?dateInJob&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param companyId  (required)
     * @return GetAllByCompanyRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
     </table>
     */
    public GetAllByCompanyRequestBuilder getAllByCompany(String companyId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        return new GetAllByCompanyRequestBuilder(companyId);
    }
    private okhttp3.Call getAllDetailsCall(String companyId, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/compensation-details";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId));
        }

        if (employeeId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId));
        }

        if (primaryJobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryJobCode", primaryJobCode));
        }

        if (jobGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobGroupCode", jobGroupCode));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (payGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroupCode", payGroupCode));
        }

        if (fullTimeOrPartTimeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullTimeOrPartTimeCode", fullTimeOrPartTimeCode));
        }

        if (salaryOrHourlyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salaryOrHourlyCode", salaryOrHourlyCode));
        }

        if (primaryShiftCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryShiftCode", primaryShiftCode));
        }

        if (primaryShiftGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryShiftGroupCode", primaryShiftGroupCode));
        }

        if (dateInJob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateInJob", dateInJob));
        }

        if (dateLastPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateLastPaid", dateLastPaid));
        }

        if (datePaidThru != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datePaidThru", datePaidThru));
        }

        if (isAutoAllocated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAutoAllocated", isAutoAllocated));
        }

        if (isAutoPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAutoPaid", isAutoPaid));
        }

        if (isSeasonalWorker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSeasonalWorker", isSeasonalWorker));
        }

        if (isHighlyCompensated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHighlyCompensated", isHighlyCompensated));
        }

        if (isMultipleJob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMultipleJob", isMultipleJob));
        }

        if (performanceReviewRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performanceReviewRating", performanceReviewRating));
        }

        if (performanceReviewType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performanceReviewType", performanceReviewType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getAllDetailsValidateBeforeCall(String companyId, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        return getAllDetailsCall(companyId, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);

    }


    private ApiResponse<List<EmpCompensationDetails>> getAllDetailsWithHttpInfo(String companyId, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getAllDetailsValidateBeforeCall(companyId, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpCompensationDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getAllDetailsAsync(String companyId, String employeeId, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback<List<EmpCompensationDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getAllDetailsValidateBeforeCall(companyId, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpCompensationDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetAllDetailsRequestBuilder {
        private String companyId;
        private String employeeId;
        private String primaryJobCode;
        private String jobGroupCode;
        private String jobTitle;
        private String payGroupCode;
        private String fullTimeOrPartTimeCode;
        private String salaryOrHourlyCode;
        private String primaryShiftCode;
        private String primaryShiftGroupCode;
        private String dateInJob;
        private String dateLastPaid;
        private String datePaidThru;
        private String isAutoAllocated;
        private String isAutoPaid;
        private String isSeasonalWorker;
        private String isHighlyCompensated;
        private String isMultipleJob;
        private String performanceReviewRating;
        private String performanceReviewType;
        private Integer page;
        private Integer perPage;

        private GetAllDetailsRequestBuilder() {
        }

        /**
         * Set companyId
         * @param companyId  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder companyId(String companyId) {
            this.companyId = companyId;
            return this;
        }
        
        /**
         * Set employeeId
         * @param employeeId  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder employeeId(String employeeId) {
            this.employeeId = employeeId;
            return this;
        }
        
        /**
         * Set primaryJobCode
         * @param primaryJobCode  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder primaryJobCode(String primaryJobCode) {
            this.primaryJobCode = primaryJobCode;
            return this;
        }
        
        /**
         * Set jobGroupCode
         * @param jobGroupCode  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder jobGroupCode(String jobGroupCode) {
            this.jobGroupCode = jobGroupCode;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set payGroupCode
         * @param payGroupCode  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder payGroupCode(String payGroupCode) {
            this.payGroupCode = payGroupCode;
            return this;
        }
        
        /**
         * Set fullTimeOrPartTimeCode
         * @param fullTimeOrPartTimeCode  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
            this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
            return this;
        }
        
        /**
         * Set salaryOrHourlyCode
         * @param salaryOrHourlyCode  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder salaryOrHourlyCode(String salaryOrHourlyCode) {
            this.salaryOrHourlyCode = salaryOrHourlyCode;
            return this;
        }
        
        /**
         * Set primaryShiftCode
         * @param primaryShiftCode  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder primaryShiftCode(String primaryShiftCode) {
            this.primaryShiftCode = primaryShiftCode;
            return this;
        }
        
        /**
         * Set primaryShiftGroupCode
         * @param primaryShiftGroupCode  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder primaryShiftGroupCode(String primaryShiftGroupCode) {
            this.primaryShiftGroupCode = primaryShiftGroupCode;
            return this;
        }
        
        /**
         * Set dateInJob
         * @param dateInJob Used to find date in job less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder dateInJob(String dateInJob) {
            this.dateInJob = dateInJob;
            return this;
        }
        
        /**
         * Set dateLastPaid
         * @param dateLastPaid Used to find date last paid less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder dateLastPaid(String dateLastPaid) {
            this.dateLastPaid = dateLastPaid;
            return this;
        }
        
        /**
         * Set datePaidThru
         * @param datePaidThru Used to find date paid through less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder datePaidThru(String datePaidThru) {
            this.datePaidThru = datePaidThru;
            return this;
        }
        
        /**
         * Set isAutoAllocated
         * @param isAutoAllocated  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder isAutoAllocated(String isAutoAllocated) {
            this.isAutoAllocated = isAutoAllocated;
            return this;
        }
        
        /**
         * Set isAutoPaid
         * @param isAutoPaid  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder isAutoPaid(String isAutoPaid) {
            this.isAutoPaid = isAutoPaid;
            return this;
        }
        
        /**
         * Set isSeasonalWorker
         * @param isSeasonalWorker  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder isSeasonalWorker(String isSeasonalWorker) {
            this.isSeasonalWorker = isSeasonalWorker;
            return this;
        }
        
        /**
         * Set isHighlyCompensated
         * @param isHighlyCompensated  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder isHighlyCompensated(String isHighlyCompensated) {
            this.isHighlyCompensated = isHighlyCompensated;
            return this;
        }
        
        /**
         * Set isMultipleJob
         * @param isMultipleJob  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder isMultipleJob(String isMultipleJob) {
            this.isMultipleJob = isMultipleJob;
            return this;
        }
        
        /**
         * Set performanceReviewRating
         * @param performanceReviewRating  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder performanceReviewRating(String performanceReviewRating) {
            this.performanceReviewRating = performanceReviewRating;
            return this;
        }
        
        /**
         * Set performanceReviewType
         * @param performanceReviewType  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder performanceReviewType(String performanceReviewType) {
            this.performanceReviewType = performanceReviewType;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetAllDetailsRequestBuilder
         */
        public GetAllDetailsRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getAllDetails
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getAllDetailsCall(companyId, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        }


        /**
         * Execute getAllDetails request
         * @return List&lt;EmpCompensationDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpCompensationDetails> execute() throws ApiException {
            ApiResponse<List<EmpCompensationDetails>> localVarResp = getAllDetailsWithHttpInfo(companyId, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getAllDetails request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpCompensationDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpCompensationDetails>> executeWithHttpInfo() throws ApiException {
            return getAllDetailsWithHttpInfo(companyId, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage);
        }

        /**
         * Execute getAllDetails request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpCompensationDetails>> _callback) throws ApiException {
            return getAllDetailsAsync(companyId, employeeId, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        }
    }

    /**
     * Get all compensation details
     * Get all compensation details.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Compensation Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /compensation-details?dateInJob&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /compensation-details?dateInJob&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /compensation-details?dateInJob&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /compensation-details?dateInJob&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @return GetAllDetailsRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
     </table>
     */
    public GetAllDetailsRequestBuilder getAllDetails() throws IllegalArgumentException {
        return new GetAllDetailsRequestBuilder();
    }
    private okhttp3.Call getByCompanyAndEmployeeCall(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/companies/{companyId}/employees/{employeeId}/compensation-details"
            .replace("{" + "companyId" + "}", localVarApiClient.escapeString(companyId.toString()))
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (companyId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("companyId", companyId2));
        }

        if (employeeId2 != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("employeeId", employeeId2));
        }

        if (primaryJobCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryJobCode", primaryJobCode));
        }

        if (jobGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobGroupCode", jobGroupCode));
        }

        if (jobTitle != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("jobTitle", jobTitle));
        }

        if (payGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("payGroupCode", payGroupCode));
        }

        if (fullTimeOrPartTimeCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("fullTimeOrPartTimeCode", fullTimeOrPartTimeCode));
        }

        if (salaryOrHourlyCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("salaryOrHourlyCode", salaryOrHourlyCode));
        }

        if (primaryShiftCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryShiftCode", primaryShiftCode));
        }

        if (primaryShiftGroupCode != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("primaryShiftGroupCode", primaryShiftGroupCode));
        }

        if (dateInJob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateInJob", dateInJob));
        }

        if (dateLastPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("dateLastPaid", dateLastPaid));
        }

        if (datePaidThru != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("datePaidThru", datePaidThru));
        }

        if (isAutoAllocated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAutoAllocated", isAutoAllocated));
        }

        if (isAutoPaid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isAutoPaid", isAutoPaid));
        }

        if (isSeasonalWorker != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isSeasonalWorker", isSeasonalWorker));
        }

        if (isHighlyCompensated != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isHighlyCompensated", isHighlyCompensated));
        }

        if (isMultipleJob != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("isMultipleJob", isMultipleJob));
        }

        if (performanceReviewRating != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performanceReviewRating", performanceReviewRating));
        }

        if (performanceReviewType != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("performanceReviewType", performanceReviewType));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (perPage != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("per_Page", perPage));
        }

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByCompanyAndEmployeeValidateBeforeCall(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'companyId' is set
        if (companyId == null) {
            throw new ApiException("Missing the required parameter 'companyId' when calling getByCompanyAndEmployee(Async)");
        }

        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByCompanyAndEmployee(Async)");
        }

        return getByCompanyAndEmployeeCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);

    }


    private ApiResponse<List<EmpCompensationDetails>> getByCompanyAndEmployeeWithHttpInfo(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage) throws ApiException {
        okhttp3.Call localVarCall = getByCompanyAndEmployeeValidateBeforeCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, null);
        Type localVarReturnType = new TypeToken<List<EmpCompensationDetails>>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByCompanyAndEmployeeAsync(String companyId, String employeeId, String companyId2, String employeeId2, String primaryJobCode, String jobGroupCode, String jobTitle, String payGroupCode, String fullTimeOrPartTimeCode, String salaryOrHourlyCode, String primaryShiftCode, String primaryShiftGroupCode, String dateInJob, String dateLastPaid, String datePaidThru, String isAutoAllocated, String isAutoPaid, String isSeasonalWorker, String isHighlyCompensated, String isMultipleJob, String performanceReviewRating, String performanceReviewType, Integer page, Integer perPage, final ApiCallback<List<EmpCompensationDetails>> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByCompanyAndEmployeeValidateBeforeCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        Type localVarReturnType = new TypeToken<List<EmpCompensationDetails>>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByCompanyAndEmployeeRequestBuilder {
        private final String companyId;
        private final String employeeId;
        private String companyId2;
        private String employeeId2;
        private String primaryJobCode;
        private String jobGroupCode;
        private String jobTitle;
        private String payGroupCode;
        private String fullTimeOrPartTimeCode;
        private String salaryOrHourlyCode;
        private String primaryShiftCode;
        private String primaryShiftGroupCode;
        private String dateInJob;
        private String dateLastPaid;
        private String datePaidThru;
        private String isAutoAllocated;
        private String isAutoPaid;
        private String isSeasonalWorker;
        private String isHighlyCompensated;
        private String isMultipleJob;
        private String performanceReviewRating;
        private String performanceReviewType;
        private Integer page;
        private Integer perPage;

        private GetByCompanyAndEmployeeRequestBuilder(String companyId, String employeeId) {
            this.companyId = companyId;
            this.employeeId = employeeId;
        }

        /**
         * Set companyId2
         * @param companyId2  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder companyId2(String companyId2) {
            this.companyId2 = companyId2;
            return this;
        }
        
        /**
         * Set employeeId2
         * @param employeeId2  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder employeeId2(String employeeId2) {
            this.employeeId2 = employeeId2;
            return this;
        }
        
        /**
         * Set primaryJobCode
         * @param primaryJobCode  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder primaryJobCode(String primaryJobCode) {
            this.primaryJobCode = primaryJobCode;
            return this;
        }
        
        /**
         * Set jobGroupCode
         * @param jobGroupCode  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder jobGroupCode(String jobGroupCode) {
            this.jobGroupCode = jobGroupCode;
            return this;
        }
        
        /**
         * Set jobTitle
         * @param jobTitle  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder jobTitle(String jobTitle) {
            this.jobTitle = jobTitle;
            return this;
        }
        
        /**
         * Set payGroupCode
         * @param payGroupCode  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder payGroupCode(String payGroupCode) {
            this.payGroupCode = payGroupCode;
            return this;
        }
        
        /**
         * Set fullTimeOrPartTimeCode
         * @param fullTimeOrPartTimeCode  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder fullTimeOrPartTimeCode(String fullTimeOrPartTimeCode) {
            this.fullTimeOrPartTimeCode = fullTimeOrPartTimeCode;
            return this;
        }
        
        /**
         * Set salaryOrHourlyCode
         * @param salaryOrHourlyCode  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder salaryOrHourlyCode(String salaryOrHourlyCode) {
            this.salaryOrHourlyCode = salaryOrHourlyCode;
            return this;
        }
        
        /**
         * Set primaryShiftCode
         * @param primaryShiftCode  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder primaryShiftCode(String primaryShiftCode) {
            this.primaryShiftCode = primaryShiftCode;
            return this;
        }
        
        /**
         * Set primaryShiftGroupCode
         * @param primaryShiftGroupCode  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder primaryShiftGroupCode(String primaryShiftGroupCode) {
            this.primaryShiftGroupCode = primaryShiftGroupCode;
            return this;
        }
        
        /**
         * Set dateInJob
         * @param dateInJob Used to find date in job less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder dateInJob(String dateInJob) {
            this.dateInJob = dateInJob;
            return this;
        }
        
        /**
         * Set dateLastPaid
         * @param dateLastPaid Used to find date last paid less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder dateLastPaid(String dateLastPaid) {
            this.dateLastPaid = dateLastPaid;
            return this;
        }
        
        /**
         * Set datePaidThru
         * @param datePaidThru Used to find date paid through less than, greater than, equal to, or between passed date(s) (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder datePaidThru(String datePaidThru) {
            this.datePaidThru = datePaidThru;
            return this;
        }
        
        /**
         * Set isAutoAllocated
         * @param isAutoAllocated  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder isAutoAllocated(String isAutoAllocated) {
            this.isAutoAllocated = isAutoAllocated;
            return this;
        }
        
        /**
         * Set isAutoPaid
         * @param isAutoPaid  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder isAutoPaid(String isAutoPaid) {
            this.isAutoPaid = isAutoPaid;
            return this;
        }
        
        /**
         * Set isSeasonalWorker
         * @param isSeasonalWorker  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder isSeasonalWorker(String isSeasonalWorker) {
            this.isSeasonalWorker = isSeasonalWorker;
            return this;
        }
        
        /**
         * Set isHighlyCompensated
         * @param isHighlyCompensated  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder isHighlyCompensated(String isHighlyCompensated) {
            this.isHighlyCompensated = isHighlyCompensated;
            return this;
        }
        
        /**
         * Set isMultipleJob
         * @param isMultipleJob  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder isMultipleJob(String isMultipleJob) {
            this.isMultipleJob = isMultipleJob;
            return this;
        }
        
        /**
         * Set performanceReviewRating
         * @param performanceReviewRating  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder performanceReviewRating(String performanceReviewRating) {
            this.performanceReviewRating = performanceReviewRating;
            return this;
        }
        
        /**
         * Set performanceReviewType
         * @param performanceReviewType  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder performanceReviewType(String performanceReviewType) {
            this.performanceReviewType = performanceReviewType;
            return this;
        }
        
        /**
         * Set page
         * @param page  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder page(Integer page) {
            this.page = page;
            return this;
        }
        
        /**
         * Set perPage
         * @param perPage  (optional)
         * @return GetByCompanyAndEmployeeRequestBuilder
         */
        public GetByCompanyAndEmployeeRequestBuilder perPage(Integer perPage) {
            this.perPage = perPage;
            return this;
        }
        
        /**
         * Build call for getByCompanyAndEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByCompanyAndEmployeeCall(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        }


        /**
         * Execute getByCompanyAndEmployee request
         * @return List&lt;EmpCompensationDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public List<EmpCompensationDetails> execute() throws ApiException {
            ApiResponse<List<EmpCompensationDetails>> localVarResp = getByCompanyAndEmployeeWithHttpInfo(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByCompanyAndEmployee request with HTTP info returned
         * @return ApiResponse&lt;List&lt;EmpCompensationDetails&gt;&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<List<EmpCompensationDetails>> executeWithHttpInfo() throws ApiException {
            return getByCompanyAndEmployeeWithHttpInfo(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage);
        }

        /**
         * Execute getByCompanyAndEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<List<EmpCompensationDetails>> _callback) throws ApiException {
            return getByCompanyAndEmployeeAsync(companyId, employeeId, companyId2, employeeId2, primaryJobCode, jobGroupCode, jobTitle, payGroupCode, fullTimeOrPartTimeCode, salaryOrHourlyCode, primaryShiftCode, primaryShiftGroupCode, dateInJob, dateLastPaid, datePaidThru, isAutoAllocated, isAutoPaid, isSeasonalWorker, isHighlyCompensated, isMultipleJob, performanceReviewRating, performanceReviewType, page, perPage, _callback);
        }
    }

    /**
     * Get all compensation details by company and employee
     * Get all compensation details by company and employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Compensation Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /companies/{companyId}/employees/{employeeId}/compensation-details?dateInJob&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param companyId  (required)
     * @param employeeId  (required)
     * @return GetByCompanyAndEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> 429 </td><td>  -  </td></tr>
     </table>
     */
    public GetByCompanyAndEmployeeRequestBuilder getByCompanyAndEmployee(String companyId, String employeeId) throws IllegalArgumentException {
        if (companyId == null) throw new IllegalArgumentException("\"companyId\" is required but got null");
            

        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByCompanyAndEmployeeRequestBuilder(companyId, employeeId);
    }
    private okhttp3.Call getByEmployeeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/personnel/v1/compensation-details/{employeeId}"
            .replace("{" + "employeeId" + "}", localVarApiClient.escapeString(employeeId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json",
            "text/json",
            "application/problem+json",
            "application/xml",
            "text/xml"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "OauthSecurity" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call getByEmployeeValidateBeforeCall(String employeeId, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'employeeId' is set
        if (employeeId == null) {
            throw new ApiException("Missing the required parameter 'employeeId' when calling getByEmployee(Async)");
        }

        return getByEmployeeCall(employeeId, _callback);

    }


    private ApiResponse<EmpCompensationDetails> getByEmployeeWithHttpInfo(String employeeId) throws ApiException {
        okhttp3.Call localVarCall = getByEmployeeValidateBeforeCall(employeeId, null);
        Type localVarReturnType = new TypeToken<EmpCompensationDetails>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    private okhttp3.Call getByEmployeeAsync(String employeeId, final ApiCallback<EmpCompensationDetails> _callback) throws ApiException {

        okhttp3.Call localVarCall = getByEmployeeValidateBeforeCall(employeeId, _callback);
        Type localVarReturnType = new TypeToken<EmpCompensationDetails>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }

    public class GetByEmployeeRequestBuilder {
        private final String employeeId;

        private GetByEmployeeRequestBuilder(String employeeId) {
            this.employeeId = employeeId;
        }

        /**
         * Build call for getByEmployee
         * @param _callback ApiCallback API callback
         * @return Call to execute
         * @throws ApiException If fail to serialize the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call buildCall(final ApiCallback _callback) throws ApiException {
            return getByEmployeeCall(employeeId, _callback);
        }


        /**
         * Execute getByEmployee request
         * @return EmpCompensationDetails
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public EmpCompensationDetails execute() throws ApiException {
            ApiResponse<EmpCompensationDetails> localVarResp = getByEmployeeWithHttpInfo(employeeId);
            return localVarResp.getResponseBody();
        }

        /**
         * Execute getByEmployee request with HTTP info returned
         * @return ApiResponse&lt;EmpCompensationDetails&gt;
         * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public ApiResponse<EmpCompensationDetails> executeWithHttpInfo() throws ApiException {
            return getByEmployeeWithHttpInfo(employeeId);
        }

        /**
         * Execute getByEmployee request (asynchronously)
         * @param _callback The callback to be executed when the API call finishes
         * @return The request call
         * @throws ApiException If fail to process the API call, e.g. serializing the request body object
         * @http.response.details
         <table summary="Response Details" border="1">
            <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
            <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
            <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
            <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
         </table>
         */
        public okhttp3.Call executeAsync(final ApiCallback<EmpCompensationDetails> _callback) throws ApiException {
            return getByEmployeeAsync(employeeId, _callback);
        }
    }

    /**
     * Get all compensation details by employee
     * Get all compensation details by employee.  If no pagination parameters specified, the default/max is applied.  Permissions - UKG Pro service account must have \&quot;View\&quot; role for the \&quot;Employee Compensation Details\&quot; Web Service. Headers - US-Customer-Api-Key, Authorization (base64 encoded {username}:{password}). Correct syntax when using date-time parameters are as follows:  &lt;ul&gt;  &lt;li&gt;less than (&#x3D;&lt;)    &lt;ul&gt;    &lt;li&gt;Example: /compensation-details/{employeeId}?dateInJob&#x3D;&lt;01-01-1900&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;greater than (&#x3D;&gt;)    &lt;ul&gt;    &lt;li&gt;Example: /compensation-details/{employeeId}?dateInJob&#x3D;&gt;01-01-1900&lt;/li&gt;   &lt;/ul&gt;    &lt;/li&gt; &lt;li&gt;equal to (&#x3D;)    &lt;ul&gt;   &lt;li&gt;Example: /compensation-details/{employeeId}?dateInJob&#x3D;01-01-1900&lt;/li&gt;    &lt;/ul&gt;   &lt;/li&gt; &lt;li&gt;between (&#x3D;{minimum date,maximum date})    &lt;ul&gt;   &lt;li&gt;Example: /compensation-details/{employeeId}?dateInJob&#x3D;{01-01-1900,01-01-1901}&lt;/li&gt;    &lt;/ul&gt;    &lt;/li&gt; &lt;/ul&gt; 
     * @param employeeId  (required)
     * @return GetByEmployeeRequestBuilder
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> NotFound </td><td>  -  </td></tr>
        <tr><td> 500 </td><td> InternalServerError </td><td>  -  </td></tr>
     </table>
     */
    public GetByEmployeeRequestBuilder getByEmployee(String employeeId) throws IllegalArgumentException {
        if (employeeId == null) throw new IllegalArgumentException("\"employeeId\" is required but got null");
            

        return new GetByEmployeeRequestBuilder(employeeId);
    }
}
